//
//  BaseMsgContentViewController.m
//
//  Generated by Class Decompile.
//  Repository is https://github.com/poboke/Class-Decompile
//  Copyright Â© 2016 www.poboke.com. All rights reserved.
//

@implementation BaseMsgContentViewController

- (void)setM_delegate:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r20 = self;
    r19 = [arg2 retain];
    if (r19 != 0x0) {
            r0 = [r19 class];
            asm{ ldrsw      x8, [x8, #0xd68] };
            *(int32_t *)(r20 + 0x1039e8000) = r0;
    }
    asm{ ldrsw      x8, [x8, #0xd6c] };
    objc_storeWeak(r20 + 0x1039e8000, r19);
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (id)findNodeIndexByLocalId:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    *(int32_t *)(r31 + 0xc) = arg2;
    r20 = self;
    asm{ ldrsw      x24, [x8, #0xd70] };
    r0 = *(int32_t *)(r20 + r24);
    if ([r0 count] == 0x0) goto loc_101d01d6c;
    goto loc_101d01cb0;

loc_101d01d6c:
    r21 = 0x7fffffffffffffff;

loc_101d01d70:
    r0 = r21;
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;

loc_101d01cb0:
    asm{ movz       x21, #0x0 };
    r22 = @selector(objectAtIndexedSubscript:);
    r23 = @selector(modelType);
    *(int32_t *)r31 = @selector(messageWrap);
    r25 = @selector(m_uiMesLocalID);
    r26 = *(int32_t *)(0x103950000 + 0x9a8);

loc_101d01cdc:
    r0 = *(int32_t *)(r20 + r24);
    r0 = [r0 objectAtIndexedSubscript:r2];
    r29 = r29;
    r0 = [r0 retain];
    r27 = r0;
    if ([r0 modelType] != 0x1) goto loc_101d01d4c;
    goto loc_101d01d08;

loc_101d01d4c:
    [r27 release];

loc_101d01d54:
    r21 = r21 + 0x1;
    if (r21 < objc_msgSend(*(int32_t *)(r20 + r24), r26)) goto loc_101d01cdc;
    goto loc_101d01d6c;

loc_101d01d08:
    r0 = objc_msgSend(r27, *(int32_t *)r31);
    r29 = r29;
    r0 = [r0 retain];
    r19 = [r0 m_uiMesLocalID];
    [r0 release];
    [r27 release];
    if (r19 != *(int32_t *)(r31 + 0xc)) goto loc_101d01d54;
    goto loc_101d01d70;
}

- (void)removeAllObjectsFromMessageNodeDatas
{
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 removeAllObjects];
    return;
}

- (void)removeObjectsFromMessageNodeDatas:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 removeObjectsInArray:r19];
    r0 = [self getLastSentMsg];
    r21 = [r0 retain];
    [self updateMessageNodeStatus:r21];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)reloadNodeWithMessageWrap:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x30;
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    r2 = [r0 m_uiMesLocalID];
    if ([r20 findNodeIndexByLocalId:r2] != 0x7fffffffffffffff) {
            *(int32_t *)r31 = *(int32_t *)_NSConcreteStackBlock;
            asm{ movz       w8, #0xc200, lsl #16 };
            asm{ stp        w8, wzr, [sp, #0x8] };
            asm{ nop         };
            *(int32_t *)(r31 + 0x10) = 0x101d01f6c;
            *(int32_t *)(r31 + 0x18) = 0x103218660;
            [r20 retain];
            asm{ stp        x0, x21, [sp, #0x20] };
            [UIView performWithoutAnimation:0x0];
            r0 = *(int32_t *)(r31 + 0x20);
            [r0 release];
    }
    r0 = [r19 release];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (id)findNodeDataByLocalId:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0xe0;
    r20 = arg2;
    r21 = *(int32_t *)__stack_chk_guard;
    r21 = *(int32_t *)r21;
    asm{ stur       x21, [x29, #0xffffffa8] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + r8);
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x10) = r0;
    r22 = [r0 countByEnumeratingWithState:0x18 objects:0x58 count:STK-1];
    if (r22 == 0x0) goto loc_101d021c4;
    goto loc_101d020d8;

loc_101d021c4:
    asm{ movz       x20, #0x0 };

loc_101d021c8:
    r0 = *(int32_t *)(r31 + 0x10);
    r0 = [r0 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r21 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r20 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d020d8:
    r19 = 0x103950000;
    r21 = **(int32_t *)(r31 + 0x28);
    *(int32_t *)(r31 + 0x8) = *(int32_t *)(r19 + 0xa18);
    r8 = 0x1039a5000;
    r9 = 0x103955000;
    r10 = 0x103954000;

loc_101d020f4:
    asm{ movz       x19, #0x0 };
    r23 = *(int32_t *)(r8 + 0xf28);
    r24 = *(int32_t *)(r9 + 0xa58);
    r25 = *(int32_t *)(r10 + 0x450);

loc_101d02104:
    if (**(int32_t *)(r31 + 0x28) != r21) {
            r0 = *(int32_t *)(r31 + 0x10);
            objc_enumerationMutation(r0);
    }
    r8 = *(int32_t *)(r31 + 0x20);
    r26 = *(int32_t *)(r8 + r19 * 0x8);
    r1 = r23;
    r0 = objc_msgSend(r26, r1);
    if (r0 != 0x1) goto loc_101d0216c;
    goto loc_101d02138;

loc_101d0216c:
    r19 = r19 + 0x1;
    if (r19 < r22) goto loc_101d02104;
    asm{ ldp        x1, x0, [sp, #0x8] };
    r22 = objc_msgSend(r0, r1);
    r8 = 0x1039a5000;
    r9 = 0x103955000;
    r10 = 0x103954000;
    if (r22 != 0x0) goto loc_101d020f4;
    asm{ movz       x20, #0x0 };

loc_101d021b4:
    r21 = *(int32_t *)__stack_chk_guard;
    r21 = *(int32_t *)r21;
    goto loc_101d021c8;

loc_101d02138:
    r0 = objc_msgSend(r26, r24);
    r29 = r29;
    r0 = [r0 retain];
    r1 = r25;
    r28 = objc_msgSend(r0, r1);
    r0 = [r0 release];
    if (r28 == r20) goto loc_101d021a8;
    goto loc_101d0216c;

loc_101d021a8:
    r20 = [r26 retain];
    goto loc_101d021b4;
}

- (id)findNodeViewByLocalId:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0xe0;
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    asm{ stur       x22, [x29, #0xffffff98] };
    r19 = [[self findNodeDataByLocalId:arg2] retain];
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r8 = 0x103956000;
    r0 = [r0 visibleCells];
    r29 = 0x60;
    r0 = [r0 retain];
    r20 = r0;
    r21 = 0x103950000;
    r24 = [r0 countByEnumeratingWithState:0x18 objects:0x58 count:STK-1];
    if (r24 == 0x0) goto loc_101d023d0;
    goto loc_101d022d8;

loc_101d023d0:
    asm{ movz       x21, #0x0 };

loc_101d0244c:
    [r20 release];
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (r22 == r8) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            r0 = [r21 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d022d8:
    r28 = **(int32_t *)(r31 + 0x28);
    *(int32_t *)(r31 + 0x10) = *(int32_t *)(0x103950000 + 0xa18);
    r8 = 0x10396f000;
    r9 = 0x103955000;

loc_101d022f0:
    asm{ movz       x23, #0x0 };
    r21 = *(int32_t *)(r8 + 0xd38);
    r25 = *(int32_t *)(r9 + 0x9f0);

loc_101d022fc:
    if (**(int32_t *)(r31 + 0x28) != r28) {
            objc_enumerationMutation(r20);
    }
    r22 = *(int32_t *)(*(int32_t *)(r31 + 0x20) + r23 * 0x8);
    r0 = objc_msgSend(r22, r21);
    r0 = [r0 retain];
    r26 = r0;
    r0 = objc_msgSend(r0, r25);
    r29 = r29;
    r0 = [r0 retain];
    r27 = r0;
    [r0 release];
    [r26 release];
    if (r27 == r19) goto loc_101d02398;
    goto loc_101d0235c;

loc_101d02398:
    r0 = objc_msgSend(r22, r21);
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    [r0 width];
    asm{ fcmp       d0, #0x0 };
    if (CPU_FLAGS & NE) {
            [r23 release];
            r8 = 0x10395c000;
            [r22 layoutIfNeeded];
    }
    else {
            r0 = objc_msgSend(r22, r21);
            r29 = r29;
            r0 = [r0 retain];
            r24 = r0;
            r8 = 0x103950000;
            [r0 height];
            [r24 release];
            [r23 release];
            asm{ fcmp       d8, #0x0 };
            if (CPU_FLAGS & NE) {
                    r8 = 0x10395c000;
                    [r22 layoutIfNeeded];
            }
    }
    r0 = objc_msgSend(r22, r21);
    r29 = r29;
    r21 = [r0 retain];

loc_101d02440:
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    goto loc_101d0244c;

loc_101d0235c:
    r23 = r23 + 0x1;
    if (r23 < r24) goto loc_101d022fc;
    r24 = objc_msgSend(r20, *(int32_t *)(r31 + 0x10));
    r8 = 0x10396f000;
    r9 = 0x103955000;
    if (r24 != 0x0) goto loc_101d022f0;
    asm{ movz       x21, #0x0 };
    goto loc_101d02440;
}

- (id)getLastNodePreContentSizeHeight
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r0 = [r0 tableHeaderView];
    r29 = 0x40;
    r0 = [r0 retain];
    r20 = r0;
    [r0 frame];
    asm{ fcvtzu     w24, d3 };
    [r20 release];
    asm{ ldrsw      x25, [x8, #0xd70] };
    r0 = *(int32_t *)(r19 + r25);
    if (r0 != 0x0) {
            r20 = @selector(count);
            if (([r0 count] != 0x0) && ([*(int32_t *)(r19 + r25) count] != 0x1)) {
                    asm{ movz       x23, #0x0 };
                    r20 = @selector(objectAtIndexedSubscript:);
                    r21 = @selector(sectionHeight);
                    r22 = *(int32_t *)(0x103950000 + 0x9a8);
                    r26 = 0x1;
                    do {
                            r0 = *(int32_t *)(r19 + r25);
                            r0 = [r0 objectAtIndexedSubscript:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r23 = r0;
                            [r0 sectionHeight];
                            asm{ ucvtf      d1, w24 };
                            asm{ fadd       d0, d1, d0 };
                            asm{ fcvtzu     w24, d0 };
                            [r23 release];
                            r0 = *(int32_t *)(r19 + r25);
                            r23 = r26;
                            r0 = objc_msgSend(r0, r22);
                            r26 = r26 + 0x1;
                    } while (r23 < r0 - 0x1);
            }
    }
    r0 = r24;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return r0;
}

- (id)getCurContentSizeHeight
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0xd0;
    r23 = *(int32_t *)__stack_chk_guard;
    r23 = *(int32_t *)r23;
    asm{ stur       x23, [x29, #0xffffff98] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 tableHeaderView];
    r0 = [r0 retain];
    r21 = r0;
    [r0 frame];
    [r21 release];
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ stp        xzr, xzr, [sp, #0x8] };
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + r8);
    r0 = [r0 retain];
    r19 = r0;
    r20 = [r0 countByEnumeratingWithState:0x8 objects:0x48 count:STK-1];
    asm{ fcvtzu     w24, d8 };
    if (r20 != 0x0) {
            r25 = **(int32_t *)(r31 + 0x18);
            r21 = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x27, #0x0 };
                    r22 = *(int32_t *)(0x10399f000 + 0xaa8);
                    do {
                            if (**(int32_t *)(r31 + 0x18) != r25) {
                                    objc_enumerationMutation(r19);
                            }
                            r8 = *(int32_t *)(r31 + 0x10);
                            r0 = *(int32_t *)(r8 + r27 * 0x8);
                            objc_msgSend(r0, r22);
                            asm{ ucvtf      d1, w24 };
                            asm{ fadd       d0, d1, d0 };
                            asm{ fcvtzu     w24, d0 };
                            r27 = r27 + 0x1;
                    } while (r27 < r20);
                    r20 = objc_msgSend(r19, r21);
            } while (r20 != 0x0);
    }
    [r19 release];
    r0 = r24;
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (r23 == r8) {
            0x0 = 0x60 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;
}

- (id)getMsgContentSizeHeight:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0xf0;
    *(int32_t *)(r31 + 0x24) = arg2;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffff98] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 tableHeaderView];
    r29 = 0x60;
    r0 = [r0 retain];
    r21 = r0;
    [r0 frame];
    [r21 release];
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + r8);
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x18) = r0;
    r21 = [r0 countByEnumeratingWithState:0x28 objects:0x68 count:STK-1];
    asm{ fcvtzu     w22, d8 };
    if (r21 == 0x0) goto loc_101d02964;
    goto loc_101d02894;

loc_101d02964:
    r0 = *(int32_t *)(r31 + 0x18);
    [r0 release];
    r0 = r22;
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (**(int32_t *)__stack_chk_guard == r8) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d02894:
    r19 = 0x103950000;
    r20 = **(int32_t *)(r31 + 0x38);
    *(int32_t *)(r31 + 0x10) = *(int32_t *)(r19 + 0xa18);
    r8 = 0x103955000;
    r9 = 0x103954000;
    r10 = 0x10399f000;

loc_101d028b0:
    asm{ movz       x19, #0x0 };
    r23 = *(int32_t *)(r8 + 0xa58);
    r24 = *(int32_t *)(r9 + 0x450);
    r25 = *(int32_t *)(r10 + 0xaa8);

loc_101d028c0:
    if (**(int32_t *)(r31 + 0x38) != r20) {
            r0 = *(int32_t *)(r31 + 0x18);
            objc_enumerationMutation(r0);
    }
    r26 = *(int32_t *)(*(int32_t *)(r31 + 0x30) + r19 * 0x8);
    r0 = objc_msgSend(r26, r23);
    r29 = r29;
    r0 = [r0 retain];
    r28 = objc_msgSend(r0, r24);
    [r0 release];
    r8 = *(int32_t *)(r31 + 0x24);
    if (r28 == r8) goto loc_101d02964;
    r1 = r25;
    r0 = objc_msgSend(r26, r1);
    asm{ ucvtf      d1, w22 };
    asm{ fadd       d0, d1, d0 };
    asm{ fcvtzu     w22, d0 };
    r19 = r19 + 0x1;
    if (r19 < r21) goto loc_101d028c0;
    asm{ ldp        x1, x0, [sp, #0x10] };
    r21 = objc_msgSend(r0, r1);
    r8 = 0x103955000;
    r9 = 0x103954000;
    r10 = 0x10399f000;
    if (r21 != 0x0) goto loc_101d028b0;
    goto loc_101d02964;
}

- (void)locateTableViewWithLocalID:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    0x0 = 0x0 - 0xf0;
    r19 = arg2;
    r24 = self;
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    asm{ stur       x22, [x29, #0xffffff98] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(r24 + 0x1039e8000);
    r0 = [r0 retain];
    r20 = r0;
    r3 = 0x68;
    r23 = [r0 countByEnumeratingWithState:0x28 objects:r3 count:STK-1];
    if (r23 == 0x0) goto loc_101d02b8c;
    goto loc_101d02a6c;

loc_101d02b8c:
    [r20 release];
    r8 = @"error, can not locate msg. msgLocalId=%tu";
    asm{ stp        x8, x19, [sp] };
    asm{ movz       w6, #0x195 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    r0 = [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];

loc_101d02bd8:
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (r22 == r8) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;

loc_101d02a6c:
    r21 = 0x103950000;
    *(int32_t *)(r31 + 0x18) = r24;
    asm{ movz       w28, #0x0 };
    r22 = **(int32_t *)(r31 + 0x38);
    *(int32_t *)(r31 + 0x20) = *(int32_t *)(r21 + 0xa18);

loc_101d02a84:
    asm{ movz       x21, #0x0 };
    r24 = @selector(messageWrap);
    r25 = @selector(m_uiMesLocalID);

loc_101d02a98:
    if (**(int32_t *)(r31 + 0x38) != r22) {
            objc_enumerationMutation(r20);
    }
    r8 = *(int32_t *)(r31 + 0x30);
    r0 = *(int32_t *)(r8 + r21 * 0x8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r27 = [r0 m_uiMesLocalID];
    [r0 release];
    asm{ cset       w8, eq };
    r28 = r28 | r8;
    if (r27 == r19) goto loc_101d02b1c;
    goto loc_101d02af0;

loc_101d02b1c:
    [r20 release];
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    if ((r28 & 0x1 << 0x0) != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd74] };
            r21 = *(int32_t *)(r31 + 0x18);
            r20 = *(int32_t *)(r21 + 0x1039e8000);
            [r20 contentOffset];
            [r21 getMsgContentSizeHeight:r19] - 0xa;
            asm{ ucvtf      d1, x8 };
            r8 = 0x103953000;
            r0 = [r20 setContentOffset:r19];
    }
    else {
            r8 = @"error, can not locate msg. msgLocalId=%tu";
            asm{ stp        x8, x19, [sp] };
            asm{ movz       w6, #0x195 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    goto loc_101d02bd8;

loc_101d02af0:
    r21 = r21 + 0x1;
    if (r21 < r23) goto loc_101d02a98;
    r3 = 0x68;
    r23 = objc_msgSend(r20, *(int32_t *)(r31 + 0x20));
    if (r23 != 0x0) goto loc_101d02a84;
    goto loc_101d02b1c;
}

- (id)getTitleLableViewWithMaxWidth:(id)arg2 title:(id)arg3 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x10;
    r22 = self;
    r19 = [arg2 retain];
    r0 = [MMUILabel alloc];
    asm{ fmov       d3, #0x19 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    r20 = [r0 initWithFrame:r2];
    *(int32_t *)(r31 + 0x8) = r19;
    [r20 setText:r19];
    asm{ nop         };
    r21 = @selector(sharedThemeManager);
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r23 = r0;
    r24 = [[r0 getValueOfProperty:@"titleview_fontsize" inRuleSet:@"#navigation_bar"] retain];
    [MMThemeUtil parseFloatFromValues:r24];
    r25 = [[UIFont boldSystemFontOfSize:r24] retain];
    [r20 setFont:r25];
    [r25 release];
    [r24 release];
    [r23 release];
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r25 = r0;
    r24 = @selector(colorList);
    r0 = [r0 colorList];
    r0 = [r0 retain];
    r26 = r0;
    r23 = @selector(getColorByName:);
    r0 = [r0 getColorByName:r2];
    r29 = 0x60;
    r27 = [[r0 retain] retain];
    if (r27 != 0x0) {
            r0 = [r27 retain];
    }
    else {
            r0 = [UIColor clearColor];
            r29 = 0x60;
            r0 = [r0 retain];
    }
    r28 = r0;
    [r27 release];
    [r20 setBackgroundColor:r28];
    [r28 release];
    [r27 release];
    [r26 release];
    [r25 release];
    [r20 setTextAlignment:0x1];
    r0 = [r22 navigationController];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 navigationBar];
    r0 = [r0 retain];
    r26 = r0;
    r27 = [[r0 tintColor] retain];
    r22 = @selector(clearColor);
    r0 = [UIColor clearColor];
    r29 = r29;
    r0 = [r0 retain];
    r28 = r0;
    [r0 release];
    [r27 release];
    [r26 release];
    [r25 release];
    r0 = *(int32_t *)(0x1039c3000 + 0x3c8);
    if (r27 != r28) {
            r0 = [r0 sharedThemeManager];
            r0 = [r0 retain];
            r25 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getColorByName:r2];
            r29 = r29;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r22 = r0;
            [r23 release];
            [r20 setTextColor:r22];
    }
    else {
            r0 = [r0 sharedThemeManager];
            r0 = [r0 retain];
            r25 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getColorByName:r2];
            r29 = r29;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r22 = r0;
            [r23 release];
            [r20 setTextColor:r22];
    }
    [r22 release];
    [r23 release];
    [r24 release];
    [r25 release];
    r22 = [[r20 text] retain];
    r23 = [[r20 font] retain];
    [CControlUtil labelWidth:r22 maxWidth:r23 font:STK-1];
    asm{ fcvtzs     w8, d0 };
    asm{ scvtf      d0, w8 };
    [r20 setWidth:r22];
    [r23 release];
    [r22 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [r20 autorelease];
    return r0;
}

- (void)viewDidTransitionToNewSize
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    *(int32_t *)(r31 + 0x10) = r19;
    *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d3c98;
    [[0x10 super] viewDidTransitionToNewSize];
    asm{ movz       x2, #0x0 };
    [r19 updateTitleView:r2];
    r0 = [r19 navigationController];
    r20 = [r0 retain];
    if (r20 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd78] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r21 = [r0 viewAlreadyShow];
            r0 = [r20 release];
            if ((r21 & 0x1 << 0x0) == 0x0) {
                    [r19 updateToolViewOrigin];
                    *(int32_t *)r31 = r19;
                    *(int32_t *)(r31 + 0x8) = *(int32_t *)(0x1039d3000 + 0xc98);
                    [[0x0 super] onTopBarFrameChanged];
                    [r19 adjustDeleteViewRect];
                    asm{ movz       w2, #0x0 };
                    r0 = [r19 tryScrollToBottomAnimated:r2];
            }
    }
    else {
            r0 = [r20 release];
    }
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)updateTitleView:(id)arg2 
{
    asm{ stp        d15, d14, [sp, #0xffffff60]! };
    asm{ stp        d13, d12, [sp, #0x10] };
    asm{ stp        d11, d10, [sp, #0x20] };
    asm{ stp        d9, d8, [sp, #0x30] };
    asm{ stp        x28, x27, [sp, #0x40] };
    asm{ stp        x26, x25, [sp, #0x50] };
    asm{ stp        x24, x23, [sp, #0x60] };
    asm{ stp        x22, x21, [sp, #0x70] };
    asm{ stp        x20, x19, [sp, #0x80] };
    asm{ stp        x29, x30, [sp, #0x90] };
    r29 = 0x90;
    0x0 = 0x0 - 0xa0;
    r21 = self;
    r25 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd7c] };
    if (*(int8_t *)(r21 + 0x1039e8000) == 0x0) goto loc_101d04104;
    goto loc_101d03368;

loc_101d04104:
    r0 = [r25 release];
    0x0 = r29 - 0x90;
    asm{ ldp        x29, x30, [sp, #0x90] };
    asm{ ldp        x20, x19, [sp, #0x80] };
    asm{ ldp        x22, x21, [sp, #0x70] };
    asm{ ldp        x24, x23, [sp, #0x60] };
    asm{ ldp        x26, x25, [sp, #0x50] };
    asm{ ldp        x28, x27, [sp, #0x40] };
    asm{ ldp        d9, d8, [sp, #0x30] };
    asm{ ldp        d11, d10, [sp, #0x20] };
    asm{ ldp        d13, d12, [sp, #0x10] };
    asm{ ldp        d15, d14, [sp], #0xa0 };
    return;

loc_101d03368:
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x858] };
    if (*(int8_t *)(r21 + 0x1039ef000) == 0x0) goto loc_101d03390;
    goto loc_101d0337c;

loc_101d03390:
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    r0 = [r0 isEditing];
    r26 = @selector(navigationItem);
    if ((r0 & 0x1 << 0x0) == 0x0) {
            r19 = [[r21 navigationItem] retain];
            r0 = [r21 getLeftBarButton];
            r29 = 0x90;
            r22 = [r0 retain];
            [r19 setLeftBarButtonItem:r22];
            [r22 release];
            [r19 release];
    }
    r0 = [r21 navigationItem];
    r0 = [r0 retain];
    r19 = r0;
    r28 = @selector(leftBarButtonItem);
    r0 = [r0 leftBarButtonItem];
    r29 = r29;
    r22 = [r0 retain];
    *(int32_t *)(r31 + 0x80) = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    asm{ stp        x8, x22, [sp] };
    asm{ movz       w6, #0x1d4 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    [r22 release];
    [r19 release];
    asm{ sturb      w23, [x29, #0xffffff6f] };
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r21 + r8;
    r19 = objc_loadWeakRetained(r20);
    if (r19 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(setNeedUpdateTitle:);
            r8 = 0x103950000;
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r19 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r19 = r0;
                    [r0 setNeedUpdateTitle:r2];
                    [r19 release];
            }
    }
    asm{ ldurb      w8, [x29, #0xffffff6f] };
    if (r8 == 0x0) goto loc_101d04104;
    if (r25 != 0x0) goto loc_101d035c4;
    goto loc_101d03528;

loc_101d035c4:
    *(int32_t *)(r31 + 0x68) = 0x0;

loc_101d035c8:
    r0 = objc_loadWeakRetained(r20);
    r24 = @selector(isUsrTitleUnsafe);
    r22 = [r0 isUsrTitleUnsafe];
    [r0 release];
    if (r22 != 0x0) {
            r19 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r19 getService:r2];
            r0 = [r0 retain];
            r22 = r0;
            r3 = @"CrashProtected_WordingForOtherContent";
            r0 = [r0 getStringForCurLanguage:0x1032f3000 defaultTo:r3];
            r29 = r29;
            r23 = [r0 retain];
            [r25 release];
            [r22 release];
            [r19 release];
            r25 = r23;
    }
    r0 = objc_loadWeakRetained(r20);
    r19 = r0;
    r22 = [[r0 GetUsrTitleCPKey] retain];
    sub_1028a5014(0x90, r22);
    [r22 release];
    [r19 release];
    r27 = @selector(navigationController);
    r0 = [r21 navigationController];
    *(int32_t *)(r31 + 0x78) = r24;
    r0 = [r0 retain];
    r19 = r0;
    r23 = @selector(navigationBar);
    r0 = [r0 navigationBar];
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    r24 = @selector(width);
    [r0 width];
    asm{ fcmp       d0, #0x0 };
    if (CPU_FLAGS & NE) {
            [UiUtil screenWidthCurOri];
    }
    else {
            r0 = [r21 navigationController];
            r0 = [r0 retain];
            r27 = r0;
            r0 = [r0 navigationBar];
            r29 = r29;
            r0 = [r0 retain];
            r23 = r0;
            [r0 width];
            [r23 release];
            [r27 release];
    }
    [r22 release];
    [r19 release];
    if ([DeviceInfo isiPhone] != 0x0) {
            r19 = @selector(screenHeightCurOri);
            [UiUtil screenHeightCurOri];
            asm{ fcmp       d8, d0 };
            if (CPU_FLAGS & LE) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                    [r0 screenHeightCurOri];
            }
    }
    r0 = [r21 getTitleLableViewWithMaxWidth:*(int32_t *)(r31 + 0x68) title:r3];
    *(int32_t *)(r31 + 0x20) = @selector(getTitleLableViewWithMaxWidth:title:);
    r29 = r29;
    *(int32_t *)(r31 + 0x88) = [r0 retain];
    r19 = objc_loadWeakRetained(r20);
    if (r19 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = r0;
            r23 = @selector(GetTitleTailImage);
            asm{ nop         };
            if ([r0 respondsToSelector:r23] != 0x0) {
                    r27 = r26;
                    *(int32_t *)(r31 + 0x70) = r25;
                    r0 = objc_loadWeakRetained(r20);
                    r25 = r0;
                    r0 = [r0 GetTitleTailImage];
                    r26 = r28;
                    r29 = r29;
                    r28 = [r0 retain];
                    [r25 release];
                    r25 = *(int32_t *)(r31 + 0x70);
            }
            else {
                    r27 = r26;
                    r26 = r28;
                    asm{ movz       x28, #0x0 };
            }
            [r22 release];
            *(int32_t *)(r31 + 0x30) = r28;
    }
    else {
            r27 = r26;
            r26 = r28;
            asm{ movz       x28, #0x0 };
            *(int32_t *)(r31 + 0x30) = 0x0;
    }
    [r19 release];
    [r21 getRightBarButtonWidth];
    *(int32_t *)(r31 + 0x8) = d10;
    *(int32_t *)r31 = @"fRightButtonWidth: %f";
    asm{ movz       w6, #0x1fa };
    r1 = *(int32_t *)(r31 + 0x80);
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r1);
    r0 = [r21 navigationController];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 navigationItem];
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    [r0 width];
    [r22 release];
    [r19 release];
    *(int32_t *)(r31 + 0x8) = d11;
    *(int32_t *)r31 = @"fBackButtonWidth: %f";
    r1 = *(int32_t *)(r31 + 0x80);
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r1);
    r19 = objc_loadWeakRetained(r20);
    if (r19 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = r0;
            r23 = @selector(GetTitleImage);
            if ([r0 respondsToSelector:r23] != 0x0) {
                    *(int32_t *)(r31 + 0x70) = r25;
                    r0 = objc_loadWeakRetained(r20);
                    r25 = r0;
                    r0 = [r0 GetTitleImage];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r25 release];
                    r25 = *(int32_t *)(r31 + 0x70);
            }
            else {
                    asm{ movz       x23, #0x0 };
            }
            [r22 release];
            [r19 release];
            if (r23 != 0x0) {
                    [r23 size];
                    *(int32_t *)(r31 + 0x50) = q0;
                    *(int32_t *)(r31 + 0x38) = r23;
            }
            else {
                    *(int32_t *)(r31 + 0x38) = 0x0;
                    asm{ movi.16b   v0, #0x0 };
                    *(int32_t *)(r31 + 0x50) = q0;
            }
    }
    else {
            asm{ movz       x23, #0x0 };
            *(int32_t *)(r31 + 0x38) = 0x0;
            asm{ movi.16b   v0, #0x0 };
            *(int32_t *)(r31 + 0x50) = q0;
    }
    if (r28 != 0x0) {
            r0 = *(int32_t *)(r31 + 0x30);
            [r0 size];
            *(int32_t *)(r31 + 0x40) = q0;
    }
    else {
            asm{ movi.16b   v0, #0x0 };
            *(int32_t *)(r31 + 0x40) = q0;
    }
    *(int32_t *)(r31 + 0x28) = r28;
    asm{ movi.16b   v0, #0x0 };
    asm{ fmov       d1, #0x4 };
    asm{ fcsel      d13, d1, d0, ne };
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 width];
    asm{ fadd       d1, d10, d11 };
    asm{ fsub       d1, d8, d1 };
    asm{ fsub       d1, d1, d2 };
    asm{ fsub       d1, d1, d2 };
    asm{ fsub       d1, d1, d13 };
    asm{ fsub       d0, d1, d0 };
    asm{ fmov       d1, #0xffffffffffffffec };
    asm{ fadd       d9, d0, d1 };
    r1 = *(int32_t *)(r31 + 0x20);
    r0 = objc_msgSend(r21, r1);
    *(int32_t *)(r31 + 0x20) = r23;
    r29 = r29;
    r28 = [r0 retain];
    r0 = objc_loadWeakRetained(r20);
    r20 = objc_msgSend(r0, *(int32_t *)(r31 + 0x78));
    [r0 release];
    if (r20 != 0x0) {
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getColorByName:@"cpcolor_for_othercontent"];
            r29 = r29;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r26 = r0;
            [r23 release];
            [r28 setTextColor:r26];
            [r26 release];
            [r23 release];
            [r22 release];
            [r19 release];
    }
    r26 = @selector(frame);
    [r28 frame];
    [CControlUtil labelSizeOfLabel:r28 maxWidth:r3];
    *(int32_t *)(r31 + 0x78) = @selector(height);
    [r28 height];
    [r28 setSize:r28];
    [r28 width];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 width];
    *(int32_t *)(r31 + 0x70) = r25;
    asm{ fadd       d0, d12, d0 };
    asm{ fadd       d0, d1, d0 };
    asm{ fadd       d0, d1, d0 };
    asm{ fadd       d0, d13, d0 };
    asm{ fmov       d14, #0x0 };
    asm{ fmul       d1, d0, d14 };
    asm{ fmul       d2, d8, d14 };
    asm{ fsub       d2, d2, d11 };
    asm{ fcmp       d1, d2 };
    if (CPU_FLAGS & LE) {
            asm{ fsub       d1, d11, d10 };
            asm{ fsub       d0, d1, d0 };
            asm{ fmul       d0, d0, d14 };
            r23 = @selector(setOrigin:);
            asm{ movi.16b   v1, #0x0 };
            [r28 setOrigin:r2];
    }
    else {
            asm{ fmov       d0, #0x1 };
            asm{ fsub       d0, d0, d1 };
            r23 = @selector(setOrigin:);
            asm{ movi.16b   v1, #0x0 };
            [r28 setOrigin:r2];
    }
    r27 = @selector(origin);
    [r28 origin];
    *(int32_t *)(r31 + 0x8) = d0;
    *(int32_t *)r31 = @"textView.origin.x: %f";
    asm{ movz       w6, #0x21f };
    r1 = *(int32_t *)(r31 + 0x80);
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r1);
    [r28 origin];
    *(int32_t *)(r31 + 0x8) = d1;
    *(int32_t *)r31 = @"textView.origin.y: %f";
    asm{ movz       w6, #0x220 };
    r1 = *(int32_t *)(r31 + 0x80);
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r1);
    [r28 origin];
    [r28 width];
    asm{ fadd       d0, d8, d0 };
    asm{ movi.16b   v1, #0x0 };
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 navigationBar];
    r22 = @selector(alloc);
    r0 = [UIImageView alloc];
    *(int32_t *)(r31 + 0x80) = @selector(initWithImage:);
    r25 = [r0 initWithImage:*(int32_t *)(r31 + 0x38)];
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 imageNamed:@"QQMsgTitle.png"];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    [r0 release];
    [r19 release];
    COND = *(int32_t *)(r31 + 0x38) >= r20;
    asm{ fmov       d0, #0x5 };
    asm{ fmov       d1, #0x2 };
    asm{ fcsel      d8, d1, d0, eq };
    [r28 origin];
    [r28 width];
    [r25 frame];
    [r25 frame];
    asm{ fadd       d0, d10, d12 };
    [r25 setFrame:@"QQMsgTitle.png"];
    r0 = [UIView alloc];
    r26 = [r0 init];
    [r28 width];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 width];
    [r25 width];
    asm{ fadd       d1, d8, d10 };
    asm{ fadd       d0, d1, d0 };
    asm{ fcmp       d0, d9 };
    asm{ fcsel      d0, d0, d9, mi };
    [r26 setWidth:@"QQMsgTitle.png"];
    objc_msgSend(r28, *(int32_t *)(r31 + 0x78));
    objc_msgSend(r25, *(int32_t *)(r31 + 0x78));
    asm{ fcmp       d8, d0 };
    asm{ fcsel      d0, d0, d8, mi };
    [r26 setHeight:@"QQMsgTitle.png"];
    r19 = @selector(addSubview:);
    [r26 addSubview:r2];
    [r26 addSubview:r2];
    r2 = r25;
    [r26 addSubview:r2];
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    [r26 navigationBar];
    [r26 width];
    asm{ fcvtzs     w8, d0 };
    asm{ scvtf      d0, w8 };
    asm{ fcmp       d0, d9 };
    if (!COND) {
            [r26 origin];
            [UiUtil screenWidthCurOri];
            asm{ fcmp       d8, d0 };
            if (CPU_FLAGS & LE) {
                    asm{ ldp        d0, d1, [x8] };
                    [r26 navigationBar];
            }
    }
    else {
            asm{ ldp        d0, d1, [x8] };
            [r26 navigationBar];
    }
    if (*(int32_t *)(r31 + 0x28) != 0x0) {
            r0 = [UIImageView alloc];
            r1 = *(int32_t *)(r31 + 0x80);
            r22 = objc_msgSend(r0, r1);
            r0 = *(int32_t *)(r31 + 0x88);
            [r0 origin];
            r0 = *(int32_t *)(r31 + 0x88);
            [r0 width];
            [r25 width];
            asm{ fadd       d1, d8, d9 };
            asm{ fadd       d0, d1, d0 };
            asm{ fadd       d0, d13, d0 };
            asm{ fmov       d1, #0x5 };
            [r22 navigationBar];
            r2 = r22;
            [r26 addSubview:r2];
            [r22 release];
    }
    asm{ nop         };
    asm{ ldrsw      x20, [x8, #0x818] };
    r0 = *(int32_t *)(r21 + r20);
    objc_msgSend(r0, *(int32_t *)(r31 + 0x78));
    objc_msgSend(r26, *(int32_t *)(r31 + 0x78));
    asm{ fsub       d0, d8, d0 };
    asm{ fmul       d0, d0, d14 };
    [r26 setY:r2];
    r0 = *(int32_t *)(r21 + r20);
    [r0 removeAllSubViews];
    r0 = *(int32_t *)(r21 + r20);
    [r0 addSubview:r2];
    [r26 release];
    [r25 release];
    [r28 release];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x30);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 release];
    sub_1028a50bc(0x90);
    r0 = *(int32_t *)(r31 + 0x68);
    [r0 release];
    r25 = *(int32_t *)(r31 + 0x70);
    goto loc_101d04104;

loc_101d03528:
    r0 = objc_loadWeakRetained(r20);
    r22 = r0;
    r0 = [r0 GetUsrTitleFront];
    r29 = r29;
    r19 = [r0 retain];
    [r25 release];
    [r22 release];
    r22 = objc_loadWeakRetained(r20);
    if (r19 == 0x0) goto loc_101d03598;
    goto loc_101d0356c;

loc_101d03598:
    r0 = [r22 GetUsrTitle];
    r29 = r29;
    r25 = [r0 retain];
    [r19 release];
    [r22 release];
    goto loc_101d035c4;

loc_101d0356c:
    r0 = [r22 GetUsrTitleTail];
    r29 = r29;
    *(int32_t *)(r31 + 0x68) = [r0 retain];
    [r22 release];
    r25 = r19;
    goto loc_101d035c8;

loc_101d0337c:
    asm{ ldrsw      x8, [x8, #0xd80] };
    *(int8_t *)(r21 + 0x1039e8000) = 0x1;
    goto loc_101d04104;
}

- (id)getNavigationButton:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x100;
    r21 = self;
    r19 = *(int32_t *)__stack_chk_guard;
    r19 = *(int32_t *)r19;
    asm{ stur       x19, [x29, #0xffffff98] };
    r20 = [arg2 retain];
    *(int32_t *)(r31 + 0x8) = "Button";
    *(int32_t *)r31 = "UINavigation";
    r25 = [[NSString stringWithFormat:@"%s%s", r3, STK-2] retain];
    r0 = [r20 class];
    r0 = [r0 description];
    r29 = 0x60;
    r0 = [r0 retain];
    r8 = 0x103950000;
    r23 = [r0 isEqualToString:r25];
    [r0 release];
    if (r23 == 0x0) goto loc_101d0449c;
    goto loc_101d0448c;

loc_101d0449c:
    asm{ stp        xzr, xzr, [sp, #0x68] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    r8 = 0x103950000;
    r0 = [r20 subviews];
    r29 = 0x60;
    r0 = [r0 retain];
    r22 = r0;
    r24 = [r0 countByEnumeratingWithState:0x38 objects:0x78 count:STK-1];
    asm{ stp        x25, x20, [sp, #0x28] };
    if (r24 == 0x0) goto loc_101d045c4;
    goto loc_101d044ec;

loc_101d045c4:
    asm{ movz       x28, #0x0 };

loc_101d045c8:
    [r22 release];
    asm{ ldp        x25, x20, [sp, #0x28] };
    r19 = *(int32_t *)__stack_chk_guard;
    r19 = *(int32_t *)r19;

loc_101d045e0:
    [r25 release];
    r0 = [r20 release];
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (r19 == r8) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            r0 = [r28 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d044ec:
    r19 = 0x103950000;
    r23 = **(int32_t *)(r31 + 0x48);
    *(int32_t *)(r31 + 0x20) = *(int32_t *)(r19 + 0xa18);
    r8 = 0x10399f000;
    r9 = 0x103950000;
    r10 = 0x103950000;
    r20 = 0x1039c3000;
    asm{ fmov       d9, #0x0 };

loc_101d04510:
    asm{ movz       x19, #0x0 };
    r25 = *(int32_t *)(r8 + 0xb00);
    r26 = *(int32_t *)(r9 + 0xb18);
    r27 = *(int32_t *)(r10 + 0x940);

loc_101d04520:
    if (**(int32_t *)(r31 + 0x48) != r23) {
            objc_enumerationMutation(r22);
    }
    r8 = *(int32_t *)(r31 + 0x40);
    r0 = objc_msgSend(r21, r25);
    r29 = r29;
    r28 = [r0 retain];
    if (r28 == 0x0) goto loc_101d04584;
    goto loc_101d0455c;

loc_101d04584:
    [r28 release];
    r19 = r19 + 0x1;
    if (r19 < r24) goto loc_101d04520;
    r24 = objc_msgSend(r22, *(int32_t *)(r31 + 0x20));
    r8 = 0x10399f000;
    r9 = 0x103950000;
    r10 = 0x103950000;
    if (r24 != 0x0) goto loc_101d04510;
    goto loc_101d045c4;

loc_101d0455c:
    r20 = 0x1039c3000;
    objc_msgSend(r28, r26);
    r0 = *(int32_t *)(r20 + 0x3d0);
    objc_msgSend(r0, r27);
    asm{ fmul       d0, d0, d9 };
    asm{ fcmp       d8, d0 };
    if (CPU_FLAGS & G) goto loc_101d045c8;
    goto loc_101d04584;

loc_101d0448c:
    r28 = [r20 retain];
    goto loc_101d045e0;
}

- (void)ScrollToBottomAnimatedAndLoadMoreNode
{
    asm{ stp        d9, d8, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"scroll to bottom";
    asm{ movz       w6, #0x262 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ ldrsw      x8, [x8, #0xd84] };
    *(int8_t *)(self + 0x1039e8000) = 0x1;
    asm{ ldrsw      x8, [x8, #0xd88] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 startAnimating];
    r0 = [UIMenuController sharedMenuController];
    r0 = [r0 retain];
    r20 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setMenuVisible:0x2 animated:0x1];
    [r20 release];
    asm{ movz       x3, #0x0 };
    [self performSelectorOnMainThread:@selector(onLoadMoreMessage) withObject:0x1 waitUntilDone:STK-1];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r20 = *(int32_t *)(self + 0x1039e8000);
    [self getCurContentSizeHeight];
    asm{ ucvtf      d8, x0 };
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(self + 0x1039e8000);
    [self getTableViewVisibleHeightWithOrientation:r2];
    asm{ fsub       d8, d8, d0 };
    [self getContentViewY];
    asm{ fneg       d0, d0 };
    asm{ fcmp       d8, d0 };
    asm{ fcsel      d1, d0, d8, mi };
    asm{ movi.16b   v0, #0x0 };
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x30 };
    r0 = [r20 setContentOffset:0x1 animated:0x1];
    return;
}

- (void)ScrollToBottomAnimated:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x22, [x8, #0xd74] };
    r0 = *(int32_t *)(self + r22);
    [r0 contentSize];
    r0 = *(int32_t *)(self + r22);
    [r0 height];
    asm{ fsub       d8, d8, d0 };
    r0 = *(int32_t *)(self + r22);
    [r0 contentInset];
    asm{ fadd       d8, d8, d2 };
    r0 = *(int32_t *)(self + r22);
    [r0 contentInset];
    asm{ fneg       d0, d0 };
    asm{ fcmp       d8, d0 };
    asm{ fcsel      d1, d8, d0, gt };
    r0 = *(int32_t *)(self + r22);
    asm{ movi.16b   v0, #0x0 };
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    r0 = [r0 setContentOffset:arg2 animated:r3];
    return;
}

- (id)isScrollToBottom
{
    asm{ stp        d9, d8, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x20, [x8, #0xd74] };
    r0 = *(int32_t *)(self + r20);
    [r0 contentOffset];
    r0 = *(int32_t *)(self + r20);
    [r0 contentSize];
    r0 = *(int32_t *)(self + r20);
    [r0 height];
    asm{ fsub       d9, d9, d0 };
    r0 = *(int32_t *)(self + r20);
    r0 = [r0 contentInset];
    asm{ fadd       d0, d9, d2 };
    asm{ fcmp       d8, d0 };
    asm{ cset       w0, eq };
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x30 };
    return r0;
}

- (void)tryScrollToBottomAnimated:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0xe0;
    r20 = arg2;
    r19 = self;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffff98] };
    asm{ ldrsw      x26, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + r26);
    r0 = [r0 tableHeaderView];
    r29 = 0x60;
    r0 = [r0 retain];
    r21 = r0;
    [r0 height];
    [r21 release];
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r0 = [r0 retain];
    r21 = r0;
    r3 = 0x58;
    r23 = [r0 countByEnumeratingWithState:0x18 objects:r3 count:STK-1];
    if (r23 != 0x0) {
            r27 = **(int32_t *)(r31 + 0x28);
            r22 = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x25, #0x0 };
                    r24 = *(int32_t *)(0x10399f000 + 0xaa8);
                    do {
                            if (**(int32_t *)(r31 + 0x28) != r27) {
                                    objc_enumerationMutation(r21);
                            }
                            r0 = *(int32_t *)(*(int32_t *)(r31 + 0x20) + r25 * 0x8);
                            objc_msgSend(r0, r24);
                            asm{ fadd       d8, d8, d0 };
                            r25 = r25 + 0x1;
                    } while (r25 < r23);
                    r3 = 0x58;
                    r23 = objc_msgSend(r21, r22);
            } while (r23 != 0x0);
    }
    [r21 release];
    asm{ ldrsw      x8, [x8, #0xd90] };
    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
            r0 = *(int32_t *)(r19 + r26);
            [r0 contentSize];
            r0 = *(int32_t *)(r19 + r26);
            [r0 bounds];
            asm{ fsub       d0, d8, d3 };
            asm{ fadd       d0, d0, d1 };
            asm{ movi.16b   v1, #0x0 };
            asm{ fmaxnm     d1, d0, d1 };
            r0 = *(int32_t *)(r19 + r26);
            r8 = 0x103959000;
            asm{ movi.16b   v0, #0x0 };
            r0 = [r0 setContentOffset:r20 animated:r3];
    }
    else {
            [r19 getContentViewY];
            asm{ fneg       d9, d0 };
            asm{ ldrsw      x24, [x8, #0xd8c] };
            r2 = *(int32_t *)(r19 + r24);
            [r19 getTableViewVisibleHeightWithOrientation:r2];
            asm{ fsub       d0, d8, d0 };
            asm{ fcmp       d0, d9 };
            asm{ fcsel      d8, d0, d9, gt };
            r0 = *(int32_t *)(r19 + r26);
            r0 = [r0 contentOffset];
            r0 = NSStringFromCGPoint(r0);
            r29 = 0x60;
            r22 = [r0 retain];
            asm{ stp        x8, x22, [sp] };
            asm{ movz       w6, #0x28b };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r22 release];
            r0 = *(int32_t *)(r19 + r26);
            r0 = [r0 contentOffset];
            asm{ fsub       d0, d8, d1 };
            asm{ fneg       d1, d0 };
            asm{ fcmp       d0, #0x0 };
            asm{ fcsel      d0, d1, d0, mi };
            r8 = "yInfo\"";
            asm{ fcmp       d0, d1 };
            if (CPU_FLAGS & P) {
                    r0 = *(int32_t *)(r19 + r26);
                    asm{ movi.16b   v0, #0x0 };
                    [r0 setContentOffset:r20 animated:r3];
                    r8 = 0x103955000;
                    r20 = @selector(isStatusBarLandscape);
                    r0 = [UiUtil isStatusBarLandscape];
                    if (r0 != 0x0) {
                            r8 = *(int32_t *)(r19 + r24);
                            r8 = r8 - 0x3;
                            if (r8 <= 0x1) {
                                    r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                                    r0 = [r0 isStatusBarLandscape];
                                    if ((r0 & 0x1 << 0x0) == 0x0) {
                                            r8 = *(int32_t *)(r19 + r24);
                                            r8 = r8 - 0x1;
                                            if (r8 >= 0x2) {
                                                    r8 = 0x1039e8000;
                                                    asm{ ldrsw      x8, [x8, #0xd94] };
                                                    *(int8_t *)(r19 + r8) = 0x1;
                                            }
                                    }
                            }
                            else {
                                    r8 = 0x1039e8000;
                                    asm{ ldrsw      x8, [x8, #0xd94] };
                                    *(int8_t *)(r19 + r8) = 0x1;
                            }
                    }
                    else {
                            r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                            r0 = [r0 isStatusBarLandscape];
                            if ((r0 & 0x1 << 0x0) == 0x0) {
                                    r8 = *(int32_t *)(r19 + r24);
                                    r8 = r8 - 0x1;
                                    if (r8 >= 0x2) {
                                            r8 = 0x1039e8000;
                                            asm{ ldrsw      x8, [x8, #0xd94] };
                                            *(int8_t *)(r19 + r8) = 0x1;
                                    }
                            }
                    }
            }
    }
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (**(int32_t *)__stack_chk_guard == r8) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)openChatInfo:(id)arg2 
{
    r2 = arg2;
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r0 = [self GetContact];
    r29 = 0x30;
    r0 = [r0 retain];
    r21 = [r0 isWeSportContact];
    r0 = [r0 release];
    if (r21 != 0x0) {
            asm{ movz       w0, #0x3370 };
            asm{ movz       w2, #0x0 };
            asm{ movz       w3, #0x0 };
            loc_1028e2f90(r0, @"2", r2, r3, STK0, STK-1);
            r20 = @selector(getMainSettingExt);
            r0 = [SettingUtil getMainSettingExt];
            r29 = 0x30;
            r0 = [r0 retain];
            r22 = [r0 m_bHasAlreadyEnterWeSportProfile];
            [r0 release];
            if ((r22 & 0x1 << 0x0) == 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd98] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    [r0 setHidden:0x1];
                    r0 = *(int32_t *)(0x1039c3000 + 0x370);
                    r0 = [r0 getMainSettingExt];
                    r0 = [r0 retain];
                    r20 = r0;
                    [r0 setM_bHasAlreadyEnterWeSportProfile:0x1];
                    [r20 release];
                    r20 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [AccountStorageMgr class];
                    r0 = [r20 getService:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 SaveSettingExt];
                    [r21 release];
                    [r20 release];
                    *(int32_t *)r31 = @"the WeSportRedDot disappear!!!";
                    asm{ movz       w6, #0x2a6 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            }
    }
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = r19 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(OpenDetailInfo);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 OpenDetailInfo];
                    0x0 = r29 - 0x30;
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    0x0 = r29 - 0x30;
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            0x0 = r29 - 0x30;
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)deleteNode:(id)arg2 withDB:(id)arg3 animated:(id)arg4 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x40;
    r24 = self;
    r22 = [arg2 retain];
    r0 = [NSMutableArray alloc];
    r27 = [r0 init];
    r21 = [[NSMutableArray alloc] init];
    r20 = [[NSMutableIndexSet alloc] init];
    r19 = @selector(m_uiMesLocalID);
    r2 = [r22 m_uiMesLocalID];
    r0 = [r24 findNodeDataByLocalId:r2];
    r29 = 0x50;
    r23 = [r0 retain];
    if (r23 != 0x0) {
            asm{ stp        w25, w26, [sp, #0x28] };
            r0 = [r23 messageWrap];
            r29 = 0x50;
            r26 = [r0 retain];
            r25 = @selector(addObject:);
            [r27 addObject:r2];
            [r26 release];
            [r21 addObject:r2];
            r2 = [r22 m_uiMesLocalID];
            r28 = [r24 findNodeIndexByLocalId:r2];
            *(int32_t *)(r31 + 0x38) = r27;
            if (r28 != 0x0) {
                    asm{ ldrsw      x27, [x8, #0xd70] };
                    r0 = *(int32_t *)(r24 + r27);
                    r19 = r28 - 0x1;
                    *(int32_t *)(r31 + 0x20) = @selector(objectAtIndexedSubscript:);
                    r0 = [r0 objectAtIndexedSubscript:r19];
                    r29 = r29;
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x30) = r0;
                    r26 = @selector(modelType);
                    if ([r0 modelType] == 0x2) {
                            r0 = *(int32_t *)(r24 + r27);
                            if (r28 + 0x1 < [r0 count]) {
                                    r0 = *(int32_t *)(r24 + r27);
                                    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
                                    asm{ stp        x22, x20, [sp, #0x10] };
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    r20 = [r0 modelType];
                                    [r22 release];
                                    asm{ ldp        x22, x20, [sp, #0x10] };
                                    if (r20 != 0x1) {
                                            [r21 addObject:r2];
                                            [r20 addIndex:r19];
                                    }
                            }
                            else {
                                    [r21 addObject:r2];
                                    [r20 addIndex:r19];
                            }
                    }
                    if ([*(int32_t *)(r31 + 0x30) modelType] == 0x3) {
                            r0 = *(int32_t *)(r24 + r27);
                            if (r28 + 0x1 < [r0 count]) {
                                    r0 = *(int32_t *)(r24 + r27);
                                    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
                                    asm{ stp        x22, x20, [sp, #0x10] };
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    r20 = [r0 modelType];
                                    [r22 release];
                                    asm{ ldp        x22, x20, [sp, #0x10] };
                                    if (r20 != 0x1) {
                                            [r21 addObject:r2];
                                            [r20 addIndex:r19];
                                    }
                            }
                            else {
                                    [r21 addObject:r2];
                                    [r20 addIndex:r19];
                            }
                    }
                    else {
                            r0 = *(int32_t *)(r24 + r27);
                            r19 = @selector(count);
                            r0 = [r0 count];
                            r2 = r28 - 0x2;
                            if (r2 < r0) {
                                    r0 = *(int32_t *)(r24 + r27);
                                    r1 = *(int32_t *)(r31 + 0x20);
                                    *(int32_t *)r31 = r2;
                                    r0 = objc_msgSend(r0, r1);
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    *(int32_t *)(r31 + 0x8) = r0;
                                    if ([r0 modelType] == 0x3) {
                                            if (r28 + 0x1 < [*(int32_t *)(r24 + r27) count]) {
                                                    r0 = *(int32_t *)(r24 + r27);
                                                    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
                                                    *(int32_t *)(r31 + 0x18) = r20;
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r20 = [r0 modelType];
                                                    [r0 release];
                                                    COND = r20 == 0x1;
                                                    r20 = *(int32_t *)(r31 + 0x18);
                                                    if (!COND) {
                                                            [r21 addObject:r2];
                                                            [r20 addIndex:*(int32_t *)r31];
                                                    }
                                            }
                                            else {
                                                    [r21 addObject:r2];
                                                    [r20 addIndex:*(int32_t *)r31];
                                            }
                                    }
                                    r0 = *(int32_t *)(r31 + 0x8);
                                    [r0 release];
                            }
                    }
                    r0 = *(int32_t *)(r31 + 0x30);
                    [r0 release];
            }
            [r20 addIndex:r28];
            [r24 removeObjectsFromMessageNodeDatas:r21];
            [r21 removeAllObjects];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r24 + 0x1039e8000);
            r1 = @selector(deleteSections:withRowAnimation:);
            if (*(int32_t *)(r31 + 0x2c) != 0x0) {
                    asm{ movz       x3, #0x0 };
                    [r0 deleteSections:r2 withRowAnimation:r1];
            }
            else {
                    asm{ movz       w3, #0x5 };
                    [r0 deleteSections:r2 withRowAnimation:r1];
            }
            if (*(int32_t *)(r31 + 0x28) != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r0 = objc_loadWeakRetained(r24 + 0x1039e8000);
                    r19 = r0;
                    asm{ movz       w3, #0x0 };
                    [r0 DelMsgWithMsgList:*(int32_t *)(r31 + 0x38) DelAll:r3];
                    [r19 release];
            }
            asm{ ldrsw      x8, [x8, #0xd70] };
            r0 = *(int32_t *)(r24 + 0x1039e8000);
            if ([r0 count] == 0x0) {
                    [r24 handleAfterDeleteAllMessage];
            }
            r19 = [r24 getCurContentSizeHeight];
            asm{ ldrsw      x8, [x8, #0xd8c] };
            [r24 getTableViewVisibleHeightWithOrientation:*(int32_t *)(r24 + 0x1039e8000)];
            asm{ fcvtzu     w8, d0 };
            if (r19 <= 0x10399f000) {
                    asm{ movz       x3, #0x0 };
                    [r24 safePerformSelector:@selector(ScrollToBottomAnimatedAndLoadMoreNode) withObject:r3 afterDelay:STK-1];
            }
            r27 = *(int32_t *)(r31 + 0x38);
    }
    [r23 release];
    [r20 release];
    [r21 release];
    [r27 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r22 release];
    return;
}

- (id)getParentTableView
{
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = objc_retainAutoreleaseReturnValue(r0);
    return r0;
}

- (void)msgSearchBarCancel
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 ShouldShowSearchBar];
    [r0 release];
    if (r21 != 0x0) {
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r19 = r0;
            [r0 PopViewControllerCount:0x1 animated:0x1];
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r19 release];
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r0 isEditing];
            if (r0 != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd9c] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    asm{ ldp        x29, x30, [sp, #0x20] };
                    asm{ ldp        x20, x19, [sp, #0x10] };
                    asm{ ldp        x22, x21, [sp], #0x30 };
                    r0 = [r0 finishSearch];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x20] };
                    asm{ ldp        x20, x19, [sp, #0x10] };
                    asm{ ldp        x22, x21, [sp], #0x30 };
                    return;
            }
    }
    return;
}

- (void)msgSearchBarDoSearch
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r1 = @selector(isEditing);
    r0 = [r0 isEditing];
    if (r0 != 0x0) {
            r1 = @"2,0,0";
            asm{ movz       w0, #0x2a3b };
            asm{ movz       w2, #0x0 };
            asm{ movz       w3, #0x0 };
            r0 = loc_1028e2f90(r0, r1, r2, r3, STK0, STK-1);
            asm{ movz       w0, #0xc9 };
            asm{ movz       w1, #0x12 };
    }
    else {
            asm{ movz       w0, #0xc9 };
            asm{ movz       w1, #0x13 };
    }
    asm{ movz       w3, #0x0 };
    asm{ ldp        x29, x30, [sp], #0x10 };
    r0 = loc_1029929b8(r0, r1, 0x1, r3, STK-1);
    return;
}

- (void)msgSearchBarSearchByName
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r0 = [RoomContactSelectViewController alloc];
    r19 = [r0 init];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r21 = r0;
    r0 = [r0 GetContact];
    *(int32_t *)(r31 + 0x8) = self;
    r22 = [r0 retain];
    [r19 setM_roomContact:r22];
    [r22 release];
    [r21 release];
    [r19 setM_bShowSelf:0x1];
    asm{ movz       w2, #0xa };
    [r19 setM_commonSearchScene:0x1];
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r27 = [[r0 getStringForCurLanguage:0x103315000 defaultTo:@"Chat_Search_Msg_By_Name_Title"] retain];
    [r19 setTitle:r27];
    [r27 release];
    [r26 release];
    [r21 release];
    r21 = [[r19 navigationItem] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r22 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r23 = r0;
    r24 = [[r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Return"] retain];
    r25 = [[MMUICommonUtil getBarButtonWithTitle:r24 target:r19 action:STK0 style:STK-1] retain];
    [r21 setLeftBarButtonItem:r25];
    [r25 release];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    r0 = *(int32_t *)(r31 + 0x8);
    r0 = [r0 navigationController];
    r0 = [r0 retain];
    r21 = r0;
    [r0 PushViewController:r19 animated:0x1];
    [r21 release];
    0x0 = 0x50 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)msgSearchBarSearchByTime
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [ChatMsgCalendarViewController alloc];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r21 = r0;
    r22 = [[r0 GetContact] retain];
    r19 = [r19 initWithChat:r22];
    [r22 release];
    [r21 release];
    r0 = [self navigationController];
    r0 = [r0 retain];
    r21 = r0;
    [r0 PushViewController:r19 animated:0x1];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (id)QueryMsgText:(id)arg2 FromID:(id)arg3 FromCreateTime:(id)arg4 Limit:(id)arg5 LeftCount:(id)arg6 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xda0] };
    r20 = [arg2 retain];
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    r21 = [r0 QueryMsgText:r20 FromID:arg3 FromCreateTime:STK1 Limit:STK0 LeftCount:STK-1];
    [r20 release];
    r20 = [r21 retain];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 autorelease];
    return r0;
}

- (void)locateToMsg:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x21, [x8, #0xd70] };
    r0 = *(int32_t *)(r20 + r21);
    if ((r0 != 0x0) && ([r0 count] != 0x0)) {
            r0 = *(int32_t *)(r20 + r21);
            [r0 removeAllObjects];
    }
    asm{ ldrsw      x8, [x8, #0xd9c] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 finishSearch];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(resetWithMessageWrap:);
            r25 = [r0 respondsToSelector:r23];
            [r0 release];
            [r22 release];
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r21 = r0;
                    r2 = r19;
                    [r0 resetWithMessageWrap:r2];
                    [r21 release];
            }
    }
    [r20 initHistroyMessageNodeData];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 reloadData];
    r3 = 0x1;
    asm{ movz       w2, #0x0 };
    [r20 scrollTableToBottomAnimated:r2 init:r3];
    asm{ ldrsw      x8, [x8, #0xda4] };
    if (*(int8_t *)(r20 + 0x1039e8000) != 0x0) {
            [r20 adjustTableViewOffset];
    }
    r0 = [r19 m_uiMesLocalID];
    asm{ ldrsw      x8, [x8, #0xda8] };
    *(int32_t *)(r20 + 0x1039e8000) = r0;
    [r20 highLightSelectSearchCell];
    asm{ movz       x3, #0x0 };
    asm{ fmov       d0, #0x0 };
    [r20 safePerformSelector:@selector(unHighLightSelectSearchCell) withObject:r3 afterDelay:STK-1];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)didSelectSearchResultForMessageWrap:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ movz       x3, #0x0 };
    r0 = [self didSelectSearchResultForMessageWrap:arg2 indexPath:r3];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)didSelectSearchResultForMessageWrap:(id)arg2 indexPath:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x70;
    r24 = self;
    r27 = *(int32_t *)__stack_chk_guard;
    r27 = *(int32_t *)r27;
    asm{ stur       x27, [x29, #0xffffffa8] };
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r24 + 0x1039e8000);
    if ([r0 isEditing] != 0x0) {
            r8 = 0x10399f000;
            [r24 locateToMsg:r19];
    }
    else {
            asm{ ldrsw      x26, [x8, #0xd9c] };
            r0 = *(int32_t *)(r24 + r26);
            r25 = @selector(searchBar);
            r0 = [r0 searchBar];
            r0 = [r0 retain];
            r21 = r0;
            [r0 resignFirstResponder];
            [r21 release];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r23 = r24 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r23);
            r22 = r0;
            r0 = [r0 GetContact];
            r29 = 0x50;
            r21 = [r0 retain];
            [r22 release];
            r2 = [CContact class];
            if ([r21 isKindOfClass:r2] != 0x0) {
                    r0 = [r21 retain];
                    *(int32_t *)(r31 + 0x10) = r0;
                    asm{ movz       w8, #0xa };
                    asm{ cinc       w22, w8, eq };
                    *(int32_t *)(r31 + 0x18) = @"query";
                    r0 = *(int32_t *)(r24 + r26);
                    r0 = [r0 searchBar];
                    r0 = [r0 retain];
                    *(int32_t *)(r31 + 0x8) = r0;
                    r0 = [r0 text];
                    r0 = [r0 retain];
                    *(int32_t *)r31 = r0;
                    *(int32_t *)(r31 + 0x40) = r0;
                    *(int32_t *)(r31 + 0x20) = @"searchScene";
                    r26 = [[NSNumber numberWithUnsignedInt:r22] retain];
                    *(int32_t *)(r31 + 0x48) = r26;
                    *(int32_t *)(r31 + 0x28) = @"clickType";
                    asm{ movz       w2, #0x5 };
                    r28 = [[NSNumber numberWithUnsignedInt:r22] retain];
                    *(int32_t *)(r31 + 0x50) = r28;
                    *(int32_t *)(r31 + 0x30) = @"row";
                    r2 = [r20 section] + 0x1;
                    r22 = [[NSNumber numberWithLong:r2] retain];
                    *(int32_t *)(r31 + 0x58) = r22;
                    *(int32_t *)(r31 + 0x38) = @"matchType";
                    asm{ movz       w2, #0x11 };
                    r27 = [[NSNumber numberWithUnsignedInt:r2] retain];
                    *(int32_t *)(r31 + 0x60) = r27;
                    asm{ movz       w4, #0x5 };
                    r0 = [NSDictionary dictionaryWithObjects:0x40 forKeys:0x18 count:STK-1];
                    r29 = r29;
                    r24 = [r0 retain];
                    [FTSUtil commonSearchClickReport:r24];
                    [r24 release];
                    [r27 release];
                    [r22 release];
                    [r28 release];
                    [r26 release];
                    r0 = *(int32_t *)r31;
                    [r0 release];
                    r0 = *(int32_t *)(r31 + 0x8);
                    [r0 release];
                    r0 = *(int32_t *)(r31 + 0x10);
                    [r0 release];
                    r27 = *(int32_t *)__stack_chk_guard;
                    r27 = *(int32_t *)r27;
            }
            r0 = objc_loadWeakRetained(r23);
            r22 = r0;
            r8 = 0x10399f000;
            [r0 didSelectSearchResultForMessageWrap:r19];
            [r22 release];
            [r21 release];
    }
    [r20 release];
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r27 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)highLightSelectSearchCell
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0xf0;
    r26 = self;
    r19 = *(int32_t *)__stack_chk_guard;
    r19 = *(int32_t *)r19;
    asm{ stur       x19, [x29, #0xffffffa8] };
    asm{ ldrsw      x8, [x8, #0xda8] };
    r2 = *(int32_t *)(r26 + 0x1039e8000);
    r0 = [self findNodeIndexByLocalId:r2];
    r21 = r0;
    r8 = 0x7fffffffffffffff;
    if (r21 != r8) {
            asm{ ldrsw      x19, [x8, #0xd74] };
            r0 = *(int32_t *)(r26 + r19);
            r8 = 0x103982000;
            r0 = [r0 indexPathsForVisibleRows];
            r29 = 0x50;
            r0 = [r0 retain];
            asm{ stp        xzr, xzr, [sp, #0x58] };
            asm{ stp        xzr, xzr, [sp, #0x48] };
            asm{ stp        xzr, xzr, [sp, #0x38] };
            asm{ stp        xzr, xzr, [sp, #0x28] };
            r0 = [r0 retain];
            *(int32_t *)(r31 + 0x20) = r0;
            r22 = [r0 countByEnumeratingWithState:0x28 objects:0x68 count:STK-1];
            if (r22 != 0x0) {
                    r20 = **(int32_t *)(r31 + 0x38);
                    *(int32_t *)(r31 + 0x8) = *(int32_t *)(0x103950000 + 0xa18);
                    do {
                            asm{ movz       x25, #0x0 };
                            r24 = @selector(section);
                            *(int32_t *)(r31 + 0x18) = @selector(cellForRowAtIndexPath:);
                            *(int32_t *)(r31 + 0x10) = @selector(setSelectionStyle:);
                            r27 = @selector(selectRowAtIndexPath:animated:scrollPosition:);
                            do {
                                    if (**(int32_t *)(r31 + 0x38) != r20) {
                                            r0 = *(int32_t *)(r31 + 0x20);
                                            objc_enumerationMutation(r0);
                                    }
                                    r8 = *(int32_t *)(r31 + 0x30);
                                    r28 = *(int32_t *)(r8 + r25 * 0x8);
                                    if ([r28 section] == r21) {
                                            r0 = *(int32_t *)(r26 + r19);
                                            r1 = *(int32_t *)(r31 + 0x18);
                                            r0 = objc_msgSend(r0, r1);
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r23 = r0;
                                            objc_msgSend(r0, *(int32_t *)(r31 + 0x10));
                                            [r23 release];
                                            r0 = *(int32_t *)(r26 + r19);
                                            asm{ movz       x4, #0x0 };
                                            [r0 selectRowAtIndexPath:r2 animated:r1 scrollPosition:r8];
                                    }
                                    r25 = r25 + 0x1;
                            } while (r25 < r22);
                            r22 = objc_msgSend(*(int32_t *)(r31 + 0x20), *(int32_t *)(r31 + 0x8));
                    } while (r22 != 0x0);
            }
            r19 = *(int32_t *)(r31 + 0x20);
            [r19 release];
            r0 = [r19 release];
            r19 = *(int32_t *)__stack_chk_guard;
            r19 = *(int32_t *)r19;
    }
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r19 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)unHighLightSelectSearchCell
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0xe0;
    r19 = self;
    r20 = *(int32_t *)__stack_chk_guard;
    r20 = *(int32_t *)r20;
    asm{ stur       x20, [x29, #0xffffffa8] };
    asm{ ldrsw      x22, [x8, #0xda8] };
    r2 = *(int32_t *)(r19 + r22);
    r0 = [self findNodeIndexByLocalId:r2];
    r21 = r0;
    r8 = 0x7fffffffffffffff;
    if (r21 != r8) {
            *(int32_t *)(r31 + 0x8) = r22;
            asm{ ldrsw      x27, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + r27);
            r8 = 0x103982000;
            r0 = [r0 indexPathsForVisibleRows];
            r29 = 0x50;
            r0 = [r0 retain];
            asm{ stp        xzr, xzr, [sp, #0x48] };
            asm{ stp        xzr, xzr, [sp, #0x38] };
            asm{ stp        xzr, xzr, [sp, #0x28] };
            asm{ stp        xzr, xzr, [sp, #0x18] };
            r0 = [r0 retain];
            r20 = r0;
            r22 = [r0 countByEnumeratingWithState:0x18 objects:0x58 count:STK-1];
            if (r22 != 0x0) {
                    r23 = 0x103950000;
                    r28 = **(int32_t *)(r31 + 0x28);
                    *(int32_t *)(r31 + 0x10) = *(int32_t *)(r23 + 0xa18);
                    do {
                            asm{ movz       x23, #0x0 };
                            r24 = @selector(section);
                            r25 = @selector(deselectRowAtIndexPath:animated:);
                            do {
                                    if (**(int32_t *)(r31 + 0x28) != r28) {
                                            objc_enumerationMutation(r20);
                                    }
                                    r8 = *(int32_t *)(r31 + 0x20);
                                    r26 = *(int32_t *)(r8 + r23 * 0x8);
                                    if ([r26 section] == r21) {
                                            r0 = *(int32_t *)(r19 + r27);
                                            [r0 deselectRowAtIndexPath:r2 animated:r1];
                                    }
                                    r23 = r23 + 0x1;
                            } while (r23 < r22);
                            r22 = objc_msgSend(r20, *(int32_t *)(r31 + 0x10));
                    } while (r22 != 0x0);
            }
            [r20 release];
            r0 = [r20 release];
            r20 = *(int32_t *)__stack_chk_guard;
            r20 = *(int32_t *)r20;
            r22 = *(int32_t *)(r31 + 0x8);
    }
    *(int32_t *)(r19 + r22) = 0x0;
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r20 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (id)chatContactForMessageWrap:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    r0 = [self getMessageChatContactByMessageWrap:arg2];
    r0 = [r0 retain];
    asm{ ldp        x29, x30, [sp], #0x10 };
    r0 = [r0 autorelease];
    return r0;
}

- (void)PreviewImage:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ movz       x4, #0x0 };
    r0 = [self PreviewImage:arg2 soundable:0x1 snapshotView:STK-1];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)PreviewImage:(id)arg2 soundable:(id)arg3 snapshotView:(id)arg4 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r23 = arg3;
    r21 = self;
    r19 = [arg2 retain];
    r20 = [r4 retain];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    if (([r0 isEditing] & 0x1 << 0x0) != 0x0) goto loc_101d0681c;
    goto loc_101d06668;

loc_101d0681c:
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;

loc_101d06668:
    if ([r19 m_uiMessageType] != 0x2f) goto loc_101d066e8;
    goto loc_101d06680;

loc_101d066e8:
    r22 = @selector(navigationController);
    r0 = [r21 navigationController];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 topViewController];
    r29 = 0x40;
    r0 = [r0 retain];
    r25 = r0;
    [r0 release];
    [r24 release];
    if (r25 != r21) goto loc_101d0681c;
    r24 = [MsgImgFullScreenViewController alloc];
    r2 = [r19 m_uiMesLocalID];
    [r21 getNodeRectInScreen:r2];
    r23 = [r24 initWithMsgWrap:r19 originFrame:r23 soundable:STK0 snapshotView:STK-1];
    [r23 setM_delegate:r21];
    [r23 setIsFromMsgContentView:0x1];
    asm{ movz       w2, #0x0 };
    [r23 setAutomaticallyAdjustsScrollViewInsets:0x1];
    asm{ movz       w2, #0x0 };
    [r23 setAllowRotate:0x1];
    r0 = [r21 navigationController];
    r0 = [r0 retain];
    r22 = r0;
    [r0 PushViewController:r23 animated:0x1];
    [r22 release];
    r0 = r23;

loc_101d06818:
    [r0 release];
    goto loc_101d0681c;

loc_101d06680:
    r0 = [MMEmotionMsgBrowseViewController alloc];
    r22 = [r0 initWithMsgWrap:r19];
    r0 = [r21 navigationController];
    r0 = [r0 retain];
    r23 = r0;
    [r0 PushViewController:r22 animated:0x1];
    [r23 release];
    r0 = r22;
    goto loc_101d06818;
}

- (void)updateTypingTitle:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = self;
    r19 = [[arg2 retain] retain];
    if (r19 == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r21 = r20 + 0x1039e8000;
            r22 = objc_loadWeakRetained(r21);
            if (r22 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r23 = @selector(GetUsrTitle);
                    r25 = [r0 respondsToSelector:r23];
                    [r0 release];
                    [r22 release];
                    if (r25 != 0x0) {
                            r0 = objc_loadWeakRetained(r21);
                            r22 = r0;
                            r0 = [r0 GetUsrTitle];
                            r21 = [r0 retain];
                            [r19 release];
                            [r22 release];
                    }
                    else {
                            r21 = r19;
                    }
            }
            else {
                    r21 = r19;
            }
    }
    else {
            r21 = r19;
    }
    [r20 updateTitleView:r21];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (id)getViewController
{
    r0 = self;
    return r0;
}

- (void)hasTapReaderNodeView
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = @selector(hasTapReaderNodeView);
    r22 = [r0 respondsToSelector:r20];
    r0 = [r0 release];
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = r0;
            [r0 hasTapReaderNodeView];
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)tapStatus_NodeView:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    if (([r0 isEditing] & 0x1 << 0x0) == 0x0) {
            r20 = [r19 retain];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r21 = r21 + 0x1039e8000;
            r23 = objc_loadWeakRetained(r21);
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r22 = @selector(ResendMessage:);
                    r25 = [r0 respondsToSelector:r22];
                    [r0 release];
                    [r23 release];
                    if (r25 != 0x0) {
                            r21 = objc_loadWeakRetained(r21);
                            r0 = [r20 viewModel];
                            r0 = [r0 retain];
                            r23 = r0;
                            r0 = [r0 messageWrap];
                            r24 = [r0 retain];
                            [r21 ResendMessage:r2];
                            [r24 release];
                            [r23 release];
                            [r21 release];
                    }
            }
            [r20 release];
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)tapVideoStatus_NodeView:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ movz       x3, #0x0 };
    r0 = [self tapVideoStatus_NodeView:arg2 DownloadMode:r3];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)tapVideoStatus_NodeView:(id)arg2 DownloadMode:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r23 = r3;
    r22 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r22 + 0x1039e8000);
    if (([r0 isEditing] & 0x1 << 0x0) != 0x0) goto loc_101d06f00;
    goto loc_101d06c84;

loc_101d06f00:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;

loc_101d06c84:
    r0 = [r19 viewModel];
    r0 = [r0 retain];
    r28 = r0;
    r21 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r29 = 0x50;
    r25 = [r0 retain];
    r24 = [CMessageWrap isSenderFromMsgWrap:r25];
    [r25 release];
    if (r24 == 0x0) goto loc_101d06db4;
    goto loc_101d06ce8;

loc_101d06db4:
    asm{ ldrsw      x20, [x8, #0xd6c] };
    r24 = r22 + r20;
    r26 = objc_loadWeakRetained(r24);
    if (r26 == 0x0) goto loc_101d06e64;
    goto loc_101d06dd0;

loc_101d06e64:
    r22 = r22 + r20;
    r24 = objc_loadWeakRetained(r22);
    if (r24 != 0x0) {
            r0 = objc_loadWeakRetained(r22);
            r23 = @selector(onClickMsg:);
            r26 = [r0 respondsToSelector:r23];
            [r0 release];
            [r24 release];
            if (r26 != 0x0) {
                    r22 = objc_loadWeakRetained(r22);
                    r0 = [r28 messageWrap];
                    r29 = r29;
                    r24 = [r0 retain];
                    [r22 onClickMsg:r2];
                    [r24 release];
                    [r22 release];
            }
    }
    [r28 release];
    goto loc_101d06f00;

loc_101d06dd0:
    *(int32_t *)(r31 + 0x8) = r28;
    r0 = objc_loadWeakRetained(r24);
    r25 = @selector(StartDownloadVideo:DownloadMode:);
    r28 = [r0 respondsToSelector:r25];
    [r0 release];
    [r26 release];
    if (r28 == 0x0) goto loc_101d06e60;
    goto loc_101d06e10;

loc_101d06e60:
    r28 = *(int32_t *)(r31 + 0x8);
    goto loc_101d06e64;

loc_101d06e10:
    r24 = objc_loadWeakRetained(r24);
    r28 = *(int32_t *)(r31 + 0x8);
    r0 = [r28 messageWrap];
    r29 = r29;
    r26 = [r0 retain];
    [r24 StartDownloadVideo:r2 DownloadMode:r1];
    [r26 release];
    r0 = r24;

loc_101d06e58:
    [r0 release];
    goto loc_101d06e64;

loc_101d06ce8:
    r0 = [r28 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    [r0 setM_uiStatus:0x1];
    [r23 release];
    asm{ ldrsw      x20, [x8, #0xd6c] };
    r23 = r22 + r20;
    r25 = objc_loadWeakRetained(r23);
    if (r25 == 0x0) goto loc_101d06e64;
    r0 = objc_loadWeakRetained(r23);
    r24 = @selector(StartUploadVideo:);
    r27 = [r0 respondsToSelector:r24];
    [r0 release];
    [r25 release];
    if (r27 == 0x0) goto loc_101d06e64;
    r23 = objc_loadWeakRetained(r23);
    r0 = [r28 messageWrap];
    r29 = r29;
    r25 = [r0 retain];
    [r23 StartUploadVideo:r2];
    [r25 release];
    r0 = r23;
    goto loc_101d06e58;
}

- (void)tapLocation_NodeView:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = [[arg2 viewModel] retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r22 = objc_loadWeakRetained(r20);
    r21 = @selector(messageWrap);
    r0 = [r19 messageWrap];
    r23 = [r0 retain];
    [r22 ViewLocation:r23];
    [r23 release];
    [r22 release];
    r23 = objc_loadWeakRetained(r20);
    if (r23 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onClickMsg:);
            r25 = [r0 respondsToSelector:r22];
            [r0 release];
            [r23 release];
            if (r25 != 0x0) {
                    r20 = objc_loadWeakRetained(r20);
                    r0 = [r19 messageWrap];
                    r21 = [r0 retain];
                    [r20 onClickMsg:r2];
                    [r21 release];
                    [r20 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)tapImage_NodeView:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r0 = [arg2 viewModel];
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r23 = [r0 m_uiGameType];
    [r0 release];
    if (r23 == 0x0) {
            r0 = [r19 messageWrap];
            r29 = 0x40;
            r22 = [r0 retain];
            [r21 PreviewImage:r22];
            [r22 release];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r21 = r21 + 0x1039e8000;
            r23 = objc_loadWeakRetained(r21);
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r22 = @selector(onClickMsg:);
                    r25 = [r0 respondsToSelector:r22];
                    [r0 release];
                    [r23 release];
                    if (r25 != 0x0) {
                            r21 = objc_loadWeakRetained(r21);
                            r0 = [r19 messageWrap];
                            r23 = [r0 retain];
                            [r21 onClickMsg:r2];
                            [r23 release];
                            [r21 release];
                    }
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)tapWeAppImage_NodeView:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r0 = [arg2 viewModel];
    r0 = [r0 retain];
    r19 = r0;
    r22 = @selector(messageWrap);
    r20 = [[r0 messageWrap] retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r21 = r0;
    asm{ movz       w8, #0x3ef };
    asm{ cinc       x24, x8, ne };
    r27 = [WAImageFakeLoadingViewController alloc];
    r25 = [[r20 m_oWAAppItem] retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 m_nsUsrName];
    *(int32_t *)(r31 + 0x8) = r21;
    r28 = [r0 retain];
    r21 = [[r20 m_nsDesc] retain];
    r2 = [r20 m_uiMesLocalID];
    [self getNodeRectInScreen:r2];
    r24 = [r27 initWithMsgAppItem:r25 fromScene:r24 sceneNote:STK1 title:STK0 originFrame:STK-1];
    [r21 release];
    [r28 release];
    [r26 release];
    [r25 release];
    r21 = [[r19 originThumbImage] retain];
    [r24 setThumbImage:r21];
    [r21 release];
    r0 = [self navigationController];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = r0;
    [r0 PushViewController:r24 animated:0x1];
    [r21 release];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r25 = objc_loadWeakRetained(r21);
    if (r25 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(onClickMsg:);
            r27 = [r0 respondsToSelector:r23];
            [r0 release];
            [r25 release];
            if (r27 != 0x0) {
                    r21 = objc_loadWeakRetained(r21);
                    r0 = [r19 messageWrap];
                    r29 = 0x50;
                    r25 = [r0 retain];
                    [r21 onClickMsg:r2];
                    [r25 release];
                    [r21 release];
            }
    }
    [r24 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    [r20 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)tapPushMail_NodeView:(id)arg2 withPushMailWrap:(id)arg3 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x10;
    r21 = self;
    r19 = [arg2 retain];
    r0 = [arg3 retain];
    r20 = r0;
    r0 = [r0 nsMailID];
    r0 = [r0 retain];
    r22 = r0;
    [r0 release];
    if (r22 != 0x0) {
            r22 = [[r19 viewModel] retain];
            r0 = [MMReadMailViewController alloc];
            r23 = [r0 init];
            [r23 setPushMailWrap:r20];
            r24 = [[r22 messageWrap] retain];
            [r23 setMessageWrap:r24];
            [r24 release];
            [r23 setM_mailDelegate:r21];
            r0 = [r21 navigationController];
            r29 = 0x40;
            r0 = [r0 retain];
            r24 = r0;
            [r0 PushViewController:r23 animated:0x1];
    }
    else {
            r22 = [[NSMutableDictionary dictionary] retain];
            *(int32_t *)r31 = 0x6;
            r23 = [[NSString stringWithFormat:@"%u", r3] retain];
            [r22 setObject:r23 forKey:@"WCPayJSAPIPayChannel"];
            [r23 release];
            r23 = [MMWebViewController alloc];
            r24 = [[r20 nsWapLink] retain];
            r25 = [[NSURL safeUrlWithString:r24] retain];
            asm{ movz       w3, #0x0 };
            r23 = [r23 initWithURL:r25 presentModal:@"WCPayJSAPIPayChannel" extraInfo:STK-1];
            [r25 release];
            [r24 release];
            [r23 setDisableShareMenu:0x1];
            asm{ movz       x2, #0x0 };
            [r23 setM_delegate:0x1];
            r0 = [r21 navigationController];
            r29 = 0x40;
            r0 = [r0 retain];
            r24 = r0;
            [r0 PushViewController:r23 animated:0x1];
    }
    [r24 release];
    [r23 release];
    [r22 release];
    [r20 release];
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)tapFriendCard_NodeView:(id)arg2 WithContact:(id)arg3 WithMsg:(id)arg4 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r23 = self;
    r19 = [arg3 retain];
    r20 = [r4 retain];
    if (([r19 isValid] & 0x1 << 0x0) != 0x0) {
            r0 = [ContactInfoViewController alloc];
            r21 = [r0 init];
            r24 = [[MMServiceCenter defaultCenter] retain];
            r2 = [CContactMgr class];
            r22 = [[r24 getService:r2] retain];
            [r24 release];
            r25 = [[r19 m_nsUsrName] retain];
            r0 = [r22 getContactByName:r25];
            r29 = 0x50;
            r24 = [r0 retain];
            [r25 release];
            r25 = @selector(m_uiFriendScene);
            r26 = [r19 m_uiFriendScene];
            if (r24 != 0x0) {
                    [r19 copyFieldFromContact:r24];
                    if ([r24 isMMContact] != 0x0) {
                            r2 = [r24 m_uiFriendScene];
                            [r19 setM_uiFriendScene:r2];
                    }
                    else {
                            [r19 setM_uiFriendScene:r26];
                    }
            }
            [r21 setM_contact:r19];
            [r21 setSourceMsg:r20];
            [r21 setM_delegate:r23];
            [r21 setHidesBottomBarWhenPushed:0x1];
            r0 = [r23 navigationController];
            r0 = [r0 retain];
            r25 = r0;
            [r0 PushViewController:r21 animated:0x1];
            [r25 release];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r23 = r23 + 0x1039e8000;
            r25 = objc_loadWeakRetained(r23);
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r23);
                    r26 = @selector(onClickMsg:);
                    r28 = [r0 respondsToSelector:r26];
                    [r0 release];
                    [r25 release];
                    if (r28 != 0x0) {
                            r0 = objc_loadWeakRetained(r23);
                            r25 = r0;
                            [r0 onClickMsg:r2];
                            [r25 release];
                    }
            }
            [r24 release];
            [r22 release];
            [r21 release];
    }
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)tapAppNodeView:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x200;
    r21 = self;
    r20 = *(int32_t *)__stack_chk_guard;
    r20 = *(int32_t *)r20;
    asm{ stur       x20, [x29, #0xffffffa8] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    r8 = 0x10395c000;
    if (([r0 isEditing] & 0x1 << 0x0) != 0x0) goto loc_101d09f10;
    goto loc_101d07e24;

loc_101d09f10:
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r20 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;

loc_101d07e24:
    r24 = r21;
    r0 = [r19 retain];
    r22 = r0;
    r0 = [r0 viewModel];
    *(int32_t *)(r31 + 0xb0) = r19;
    r0 = [r0 retain];
    r21 = r0;
    r23 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r29 = 0x50;
    r0 = [r0 retain];
    r8 = 0x103951000;
    r25 = @selector(m_uiAppMsgInnerType);
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 == 0x1) goto loc_101d09ef0;
    goto loc_101d07e90;

loc_101d09ef0:
    [r21 release];
    [r22 release];
    r19 = *(int32_t *)(r31 + 0xb0);
    r20 = *(int32_t *)__stack_chk_guard;
    r20 = *(int32_t *)r20;
    goto loc_101d09f10;

loc_101d07e90:
    *(int32_t *)(r31 + 0xa8) = r22;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r26 = r24 + 0x1039e8000;
    r19 = objc_loadWeakRetained(r26);
    if (r19 != 0x0) {
            *(int32_t *)(r31 + 0xb8) = r21;
            r0 = objc_loadWeakRetained(r26);
            r20 = @selector(onClickMsg:);
            r22 = [r0 respondsToSelector:r20];
            [r0 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            if (r22 != 0x0) {
                    r19 = objc_loadWeakRetained(r26);
                    r0 = [r21 messageWrap];
                    r29 = r29;
                    r21 = [r0 retain];
                    r2 = r21;
                    [r19 onClickMsg:r2];
                    [r21 release];
                    [r19 release];
                    r21 = *(int32_t *)(r31 + 0xb8);
            }
    }
    *(int32_t *)(r31 + 0xa0) = r24;
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0xa) goto loc_101d08050;
    goto loc_101d07f78;

loc_101d08050:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x7d0) goto loc_101d082c4;
    goto loc_101d08084;

loc_101d082c4:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x7d1) goto loc_101d089b0;
    goto loc_101d082f8;

loc_101d089b0:
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0xd) goto loc_101d08adc;
    goto loc_101d089e8;

loc_101d08adc:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x10) goto loc_101d08bc0;
    goto loc_101d08b10;

loc_101d08bc0:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x22) goto loc_101d08f18;
    goto loc_101d08bf4;

loc_101d08f18:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x14) goto loc_101d094ec;
    goto loc_101d08f4c;

loc_101d094ec:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x15) goto loc_101d0a5c4;
    goto loc_101d09520;

loc_101d0a5c4:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x11) goto loc_101d0a610;
    goto loc_101d0a5f8;

loc_101d0a610:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0xf) goto loc_101d0a7d0;
    goto loc_101d0a644;

loc_101d0a7d0:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x19) goto loc_101d0aa5c;
    goto loc_101d0a804;

loc_101d0aa5c:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x1a) goto loc_101d0ab6c;
    goto loc_101d0aa90;

loc_101d0ab6c:
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x1b) goto loc_101d0ac84;
    goto loc_101d0aba0;

loc_101d0ac84:
    r0 = [r21 messageWrap];
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x98) = [[r0 GetChatName] retain];
    [r0 release];
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    if ([r0 m_uiAppDataSize] == 0x0) goto loc_101d0aee0;
    goto loc_101d0ace4;

loc_101d0aee0:
    *(int32_t *)(r31 + 0xb8) = r21;
    [r19 release];

loc_101d0aeec:
    r0 = [*(int32_t *)(r31 + 0xb8) messageWrap];
    *(int32_t *)(r31 + 0xa8) = r22;
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    if ([r0 m_uiAppMsgInnerType] != 0x13) goto loc_101d0b064;
    goto loc_101d0af1c;

loc_101d0b064:
    [r19 release];

loc_101d0b06c:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x17) goto loc_101d0b32c;
    goto loc_101d0b0a8;

loc_101d0b32c:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [r21 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    if ([r0 m_uiAppMsgInnerType] != 0x18) goto loc_101d0b5ec;
    goto loc_101d0b35c;

loc_101d0b5ec:
    [r20 release];

loc_101d0b5f4:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    if ([r0 bIsAppUrlTypeWithCanvas] == 0x0) goto loc_101d0b8c8;
    goto loc_101d0b61c;

loc_101d0b8c8:
    [r19 release];

loc_101d0b8d0:
    *(int32_t *)(r31 + 0x88) = 0x0;

loc_101d0ba50:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 != 0x21) goto loc_101d0bb88;
    goto loc_101d0ba84;

loc_101d0bb88:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    asm{ movz       w8, #0x5 };
    asm{ cinc       w28, w8, ne };
    [r0 release];
    *(int32_t *)(r31 + 0x90) = 0x0;
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r24 = @selector(m_nsAppMediaUrl);
    r0 = [r0 m_nsAppMediaUrl];
    r29 = r29;
    r20 = [r0 retain];
    if (r20 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 m_nsAppMediaUrl];
            r29 = r29;
            r0 = [r0 retain];
            r26 = [r0 length];
            [r0 release];
            [r21 release];
            [r20 release];
            [r19 release];
            if (r26 != 0x0) {
                    *(int32_t *)(r31 + 0x90) = 0x0;
                    r0 = *(int32_t *)(r31 + 0xa0);
                    r0 = [r0 navigationController];
                    r0 = [r0 retain];
                    r19 = r0;
                    asm{ movz       w2, #0x0 };
                    [r0 setNavigationBarHidden:r2];
                    [r19 release];
                    *(int32_t *)(r31 + 0x90) = 0x0;
                    r0 = *(int32_t *)(r31 + 0xb8);
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r20 = r0;
                    r19 = [[r0 m_nsAppMediaUrl] retain];
                    r0 = *(int32_t *)(r31 + 0xb8);
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r24 = r0;
                    r26 = [[r0 m_nsAppID] retain];
                    [WeChatApiUtil isAppInstalledWithCatchException:r26];
                    r3 = r28;
                    r0 = [CAppUtil getSecureUrl:r19 from:r3 isAppInstalled:STK-1];
                    r29 = r29;
                    *(int32_t *)(r31 + 0x90) = [r0 retain];
                    [r26 release];
                    [r24 release];
                    [r19 release];
                    [r20 release];
            }
            else {
                    *(int32_t *)(r31 + 0x90) = 0x0;
            }
    }
    else {
            [r20 release];
            [r19 release];
            *(int32_t *)(r31 + 0x90) = 0x0;
    }
    *(int32_t *)(r31 + 0x70) = @selector(defaultCenter);
    r19 = [[MMServiceCenter defaultCenter] retain];
    *(int32_t *)(r31 + 0x68) = @selector(class);
    r2 = [CNetworkStatus class];
    *(int32_t *)(r31 + 0x60) = @selector(getService:);
    r0 = [r19 getService:r2];
    r29 = r29;
    r20 = [r0 retain];
    [r19 release];
    *(int32_t *)(r31 + 0x80) = r20;
    if ((r20 != 0x0) && ([*(int32_t *)(r31 + 0x80) isOnWWan] != 0x0)) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r20 = @selector(m_nsAppMediaLowUrl);
            r0 = [r0 m_nsAppMediaLowUrl];
            r29 = r29;
            r21 = [r0 retain];
            if (r21 != 0x0) {
                    r0 = *(int32_t *)(r31 + 0xb8);
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r24 = r0;
                    r0 = [r0 m_nsAppMediaLowUrl];
                    r29 = r29;
                    r0 = [r0 retain];
                    r27 = [r0 length];
                    [r0 release];
                    [r24 release];
                    [r21 release];
                    [r19 release];
                    if (r27 != 0x0) {
                            r0 = *(int32_t *)(r31 + 0xb8);
                            r0 = [r0 messageWrap];
                            r0 = [r0 retain];
                            r22 = r0;
                            r19 = [[r0 m_nsAppMediaLowUrl] retain];
                            r0 = *(int32_t *)(r31 + 0xb8);
                            r0 = [r0 messageWrap];
                            r0 = [r0 retain];
                            r20 = r0;
                            r24 = [[r0 m_nsAppID] retain];
                            [WeChatApiUtil isAppInstalledWithCatchException:r24];
                            r2 = r19;
                            r3 = r28;
                            r0 = [CAppUtil getSecureUrl:r2 from:r3 isAppInstalled:STK-1];
                            r29 = r29;
                            r21 = [r0 retain];
                            r0 = *(int32_t *)(r31 + 0x90);
                            [r0 release];
                            [r24 release];
                            [r20 release];
                            [r19 release];
                            [r22 release];
                            *(int32_t *)(r31 + 0x90) = r21;
                    }
            }
            else {
                    [r21 release];
                    [r19 release];
            }
    }
    r28 = @selector(length);
    if (([*(int32_t *)(r31 + 0x90) length] != 0x0) && (((*(int32_t *)(r31 + 0x88) ^ 0x1) & 0x1 << 0x0) == 0x0)) {
            asm{ movz       w3, #0x5 };
            r2 = *(int32_t *)(r31 + 0x90);
            r0 = [WCCanvasCommonUtil addGameShareExpFieldToUrlString:r2 fromScene:r3];
            r29 = r29;
            r19 = [r0 retain];
            r0 = *(int32_t *)(r31 + 0x90);
            [r0 release];
            *(int32_t *)(r31 + 0x90) = r19;
    }
    if ((*(int32_t *)(r31 + 0x90) != 0x0) && ([*(int32_t *)(r31 + 0x90) length] != 0x0)) goto loc_101d0bfec;
    goto loc_101d0c084;

loc_101d0bfec:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    if ([r0 m_uiAppMsgInnerType] != 0x4) goto loc_101d0c0bc;
    goto loc_101d0c014;

loc_101d0c0bc:
    [r19 release];

loc_101d0c0c4:
    r22 = @selector(dictionary);
    *(int32_t *)(r31 + 0x88) = [[NSMutableDictionary dictionary] retain];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 getViewController];
    r0 = [r0 retain];
    r20 = r0;
    r2 = [r0 m_uiVcType];
    *(int32_t *)(r31 + 0x38) = @selector(numberWithUnsignedInt:);
    r21 = [[NSNumber numberWithUnsignedInt:r2] retain];
    r27 = @selector(setObject:forKey:);
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r21 release];
    [r20 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 getViewController];
    r0 = [r0 retain];
    r19 = r0;
    r20 = [[r0 getAttachedObjectForKey:@"usrdata_usrname"] retain];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r20 release];
    [r19 release];
    *(int32_t *)(r31 + 0x58) = @"";
    [@"" retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    *(int32_t *)(r31 + 0x50) = @selector(m_nsFromUsr);
    r0 = [r0 m_nsFromUsr];
    r29 = r29;
    r21 = [r0 retain];
    r20 = [CUtility CheckUsrNameType:r21];
    [r21 release];
    [r19 release];
    r8 = @"";
    if (r20 == 0x2) {
            *(int32_t *)(r31 + 0x58) = r8;
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_nsRealChatUsr];
            r29 = r29;
    }
    else {
            *(int32_t *)(r31 + 0x58) = r8;
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x50));
            r29 = r29;
    }
    *(int32_t *)(r31 + 0x58) = [r0 retain];
    [@"" release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r24 = @selector(m_n64MesSvrID);
    r2 = [r0 m_n64MesSvrID];
    r20 = [[NSNumber numberWithLongLong:r2] retain];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r20 release];
    [r19 release];
    r19 = [objc_msgSend(NSNumber, *(int32_t *)(r31 + 0x38)) retain];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r19 release];
    *(int32_t *)(r31 + 0x48) = [[NSMutableDictionary dictionary] retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(m_nsSourceUsername);
    r0 = [r0 m_nsSourceUsername];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    [r0 release];
    [r19 release];
    if (r21 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_nsSourceUsername];
            r29 = r29;
            r20 = [r0 retain];
            r0 = *(int32_t *)(r31 + 0x48);
            [r0 setObject:r2 forKey:r1];
            [r20 release];
            [r19 release];
    }
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(m_nsSourceDisplayname);
    r0 = [r0 m_nsSourceDisplayname];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    [r0 release];
    [r19 release];
    if (r21 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_nsSourceDisplayname];
            r29 = r29;
            r20 = [r0 retain];
            r0 = *(int32_t *)(r31 + 0x48);
            [r0 setObject:r2 forKey:r1];
            [r20 release];
            [r19 release];
    }
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r20 = [[r0 m_nsStatExtStr] retain];
    r3 = @"statisticsExtStr";
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r20 release];
    [r19 release];
    *(int32_t *)(r31 + 0x78) = [[NSMutableDictionary dictionary] retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r20 = [r0 retain];
    r19 = [CMessageWrap isSenderFromMsgWrap:r20];
    [r20 release];
    if (r19 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_nsToUsr];
            r29 = r29;
    }
    else {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x50));
            r29 = r29;
    }
    *(int32_t *)(r31 + 0x30) = [r0 retain];
    [r19 release];
    [@"" retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_n64MesSvrID];
    [r0 release];
    r19 = NSString;
    if (r20 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r20 = r0;
            [r0 m_n64MesSvrID];
            *(int32_t *)(r31 + 0x20) = @selector(stringWithFormat:);
            asm{ stp        x8, x0, [sp] };
            r0 = [r19 stringWithFormat:@"%@#%lld", r3, STK-2];
            r29 = r29;
    }
    else {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r20 = r0;
            [r0 m_uiMesLocalID];
            *(int32_t *)(r31 + 0x20) = @selector(stringWithFormat:);
            asm{ stp        x8, x0, [sp] };
            r0 = [r19 stringWithFormat:@"#%@#%u", r3, STK-2];
            r29 = r29;
    }
    *(int32_t *)(r31 + 0x28) = [r0 retain];
    [@"" release];
    [r20 release];
    [@"Chat" retain];
    r0 = *(int32_t *)(r31 + 0x78);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0x78);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0x78);
    [r0 setObject:r2 forKey:r1];
    [@"" retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(m_nsRealChatUsr);
    r0 = [r0 m_nsRealChatUsr];
    r29 = r29;
    r21 = [r0 retain];
    if (r21 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 m_nsRealChatUsr];
            r29 = r29;
            r0 = [r0 retain];
            r26 = [r0 length];
            [r0 release];
            [r24 release];
            [r21 release];
            [r19 release];
            if (r26 != 0x0) {
                    r0 = *(int32_t *)(r31 + 0xb8);
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 m_nsRealChatUsr];
                    r29 = r29;
            }
            else {
                    r0 = *(int32_t *)(r31 + 0xb8);
                    r0 = [r0 messageWrap];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x50));
                    r29 = r29;
            }
    }
    else {
            [r21 release];
            [r19 release];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x50));
            r29 = r29;
    }
    *(int32_t *)(r31 + 0x40) = [r0 retain];
    [@"" release];
    [r19 release];
    *(int32_t *)(r31 + 0x50) = @"";
    [@"" retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r24 = @selector(m_uiMessageType);
    r20 = [r0 m_uiMessageType];
    [r0 release];
    r8 = @"";
    if (r20 == 0x31) {
            *(int32_t *)(r31 + 0x50) = r8;
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_nsAppID];
            r29 = r29;
            *(int32_t *)(r31 + 0x50) = [r0 retain];
            [@"" release];
            [r19 release];
    }
    else {
            *(int32_t *)(r31 + 0x50) = r8;
    }
    r0 = *(int32_t *)(r31 + 0x78);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0x78);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    *(int32_t *)r31 = 0x6;
    r19 = [objc_msgSend(NSString, *(int32_t *)(r31 + 0x20)) retain];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    [r0 m_uiMessageType];
    r20 = [objc_msgSend(NSNumber, *(int32_t *)(r31 + 0x38)) retain];
    r3 = @"LastMessageWrapDataType";
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 setObject:r2 forKey:r1];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(m_oMsgExpItem);
    r0 = [r0 m_oMsgExpItem];
    r0 = [r0 retain];
    r24 = r0;
    r21 = @selector(nsExpIdStr);
    r0 = [r0 nsExpIdStr];
    r29 = r29;
    r0 = [r0 retain];
    r26 = [r0 length];
    [r0 release];
    [r24 release];
    [r19 release];
    if (r26 != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oMsgExpItem];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 nsExpIdStr];
            r29 = r29;
            r21 = [r0 retain];
            r3 = @"LastMessageWrapExpIdStr";
            r0 = *(int32_t *)(r31 + 0x88);
            [r0 setObject:r2 forKey:r1];
            [r21 release];
            [r20 release];
            [r19 release];
    }
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_uiAppMsgInnerType];
    [r0 release];
    if (r20 == 0x3) {
            r28 = @selector(alloc);
            r0 = [NSMutableDictionary alloc];
            r25 = [r0 init];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            [r0 m_uiMesLocalID];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r21 = r0;
            [r0 m_uiCreateTime];
            asm{ stp        x24, x0, [sp] };
            r22 = [objc_msgSend(NSString, *(int32_t *)(r31 + 0x20)) retain];
            [r21 release];
            [r19 release];
            [r25 setObject:r2 forKey:r1];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r20 = [[r0 m_nsTitle] retain];
            [r25 setObject:r2 forKey:r1];
            [r20 release];
            [r19 release];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r20 = [[r0 m_nsDesc] retain];
            [r25 setObject:r2 forKey:r1];
            [r20 release];
            [r19 release];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_nsAppID];
            r29 = r29;
            r20 = [r0 retain];
            [r25 setObject:r2 forKey:r1];
            [r20 release];
            [r19 release];
            [r25 setObject:r2 forKey:r1];
            r3 = @"LogMusicDic";
            r0 = *(int32_t *)(r31 + 0x88);
            [r0 setObject:r2 forKey:r1];
            [r22 release];
            [r25 release];
    }
    else {
            r28 = @selector(alloc);
    }
    r19 = [MMWebViewController length];
    r20 = [[NSURL safeUrlWithString:*(int32_t *)(r31 + 0x90)] retain];
    asm{ movz       w3, #0x0 };
    r25 = [r19 initWithURL:r20 presentModal:r3 extraInfo:STK-1];
    [r20 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r0 = [r0 retain];
    r19 = r0;
    [r0 PushViewController:r25 animated:0x1];
    [r19 release];
    r19 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x70)) retain];
    objc_msgSend(AppDataMgr, *(int32_t *)(r31 + 0x68));
    r20 = [objc_msgSend(r19, *(int32_t *)(r31 + 0x60)) retain];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_nsAppID];
    r29 = r29;
    r23 = [r0 retain];
    r8 = 0x103951000;
    r22 = [r20 isGame:r23];
    [r23 release];
    [r21 release];
    [r20 release];
    [r19 release];
    if (r22 != 0x0) {
            r19 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x70)) retain];
            objc_msgSend(GameStatMgr, *(int32_t *)(r31 + 0x68));
            r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x60));
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            r8 = 0x103955000;
            [r0 setOpTypeForClickInConversation:0x1];
            [r20 release];
            [r19 release];
    }
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x40);
    [r0 release];
    [@"Chat" release];
    r0 = *(int32_t *)(r31 + 0x28);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x30);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x78);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x48);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x58);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x88);

loc_101d0cf78:
    [r0 release];

loc_101d0cf7c:
    r0 = *(int32_t *)(r31 + 0x80);

loc_101d0cf80:
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x90);

loc_101d0cf88:
    [r0 release];
    r21 = *(int32_t *)(r31 + 0xb8);

loc_101d0cf90:
    r0 = *(int32_t *)(r31 + 0x98);
    [r0 release];
    r22 = *(int32_t *)(r31 + 0xa8);
    goto loc_101d09ef0;

loc_101d0c014:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsStreamVideoUrl];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 length];
    [r0 release];
    [r20 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d0c0c4;
    r8 = 0x103994000;
    r0 = *(int32_t *)(r31 + 0xa0);
    [r0 JumpToViewStreamVideo:*(int32_t *)(r31 + 0xb8)];
    goto loc_101d0cf7c;

loc_101d0c084:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x10399f000;
    asm{ movz       w4, #0x0 };
    asm{ ldp        x2, x0, [sp, #0x98] };
    [r0 PreviewAppNode:r2 MsgWrap:r19 Pop:STK-1];
    r0 = r19;
    goto loc_101d0cf78;

loc_101d0ba84:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oWAAppItem];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 username];
    r29 = r29;
    r0 = [r0 retain];
    r8 = 0x103950000;
    r22 = [r0 length];
    [r0 release];
    [r20 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d0bb88;
    r19 = objc_loadWeakRetained(r26);
    r21 = *(int32_t *)(r31 + 0xb8);
    if (r19 == 0x0) goto loc_101d0cf90;
    r0 = objc_loadWeakRetained(r26);
    r20 = @selector(openWaApp:);
    r8 = 0x103950000;
    r22 = [r0 respondsToSelector:r20];
    [r0 release];
    [r19 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    if (r22 == 0x0) goto loc_101d0cf90;
    r19 = objc_loadWeakRetained(r26);
    r0 = objc_msgSend(r21, r23);
    r29 = r29;
    r21 = [r0 retain];
    [r19 openWaApp:r2];
    r0 = r21;

loc_101d0b058:
    [r0 release];
    r0 = r19;
    goto loc_101d0cf88;

loc_101d0b61c:
    r20 = [DeviceInfo isiPad];
    [r19 release];
    if ((r20 & 0x1 << 0x0) != 0x0) goto loc_101d0b8d0;
    r28 = @selector(alloc);
    r0 = [WCAdvertiseInfo alloc];
    r27 = [r0 init];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCanvasPageItem];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 canvasPageXml];
    r29 = r29;
    r24 = [r0 retain];
    r2 = r27;
    r3 = r24;
    r20 = [WCXmlParser SetAdvertiseXml:r2 ByAdXml:r3];
    [r24 release];
    [r21 release];
    [r19 release];
    if (((r20 & 0x1 << 0x0) != 0x0) && ([r27 isCanvasAd] != 0x0)) goto loc_101d0b704;
    goto loc_101d0ba44;

loc_101d0b704:
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCFacade class];
    r21 = [[r19 getService:r2] retain];
    r20 = @selector(adCanvasInfo);
    r0 = [r27 adCanvasInfo];
    r29 = r29;
    r24 = [r0 retain];
    r2 = r24;
    r22 = [r21 isCanvasTypesAllValid:r2];
    [r24 release];
    [r21 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d0ba44;
    goto loc_101d0b7ac;

loc_101d0ba44:
    *(int32_t *)(r31 + 0x88) = 0x0;

loc_101d0ba48:
    [r27 release];
    goto loc_101d0ba50;

loc_101d0b7ac:
    *(int32_t *)(r31 + 0x88) = [WCCanvasCommonUtil isInGameShareJumpWayExp];
    r0 = [r27 adCanvasInfo];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    if ([r0 bizId] != 0x1) goto loc_101d0cfd4;
    goto loc_101d0b7f0;

loc_101d0cfd4:
    [r19 release];

loc_101d0cfdc:
    r25 = [[*(int32_t *)(r31 + 0xa8) displayViewForImageBrowser] retain];
    r19 = [WCCanvasPageViewController alloc];
    r20 = [objc_msgSend(*(int32_t *)(r31 + 0xb8), r23) retain];
    r24 = [r19 initWithMsgWrap:r20 advertiseInfo:r27 originView:STK-1];
    [r20 release];
    asm{ movz       w2, #0x5 };
    [r24 setM_canvasPageScene:r20];
    [r24 setM_delegate:*(int32_t *)(r31 + 0xa0)];
    r19 = [objc_msgSend(*(int32_t *)(r31 + 0xb8), r23) retain];
    [r24 setM_msgWrap:r19];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r20 = [[r0 m_nsThumbUrl] retain];
    [r24 setM_thumbUrl:r20];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r24 animated:0x1];
    [r19 release];
    [r24 release];
    [r25 release];
    r0 = r27;
    goto loc_101d0cf88;

loc_101d0b7f0:
    r0 = *(int32_t *)(0x1039c3000 + 0xbf0);
    r20 = [r0 shouldGameShareCanvasJumpToCanvasView];
    [r19 release];
    if ((r20 & 0x1 << 0x0) == 0x0) goto loc_101d0ba48;
    goto loc_101d0cfdc;

loc_101d0b35c:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r21 = r0;
    r19 = @selector(m_oRecordItem);
    r0 = [r0 m_oRecordItem];
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    [r0 release];
    [r21 release];
    [r20 release];
    if (r22 == 0x0) goto loc_101d0b5f4;
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [WNNoteViewController alloc];
    r24 = [r0 init];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r19 = [[r0 m_oRecordItem] retain];
    [r24 setFavItem:r19];
    [r19 release];
    [r20 release];
    r19 = [objc_msgSend(*(int32_t *)(r31 + 0xb8), r23) retain];
    [r24 setRecordMsg:r19];
    [r19 release];
    [r24 setNoteState:0x2];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r24 animated:0x1];

loc_101d0b49c:
    [r19 release];
    r0 = r24;
    goto loc_101d0cf88;

loc_101d0b0a8:
    r25 = @selector(alloc);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [WCCommentDetailViewControllerFB alloc];
    r24 = @selector(init);
    *(int32_t *)(r31 + 0x90) = [r0 init];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r27 = @selector(m_oiWatchMsgItem);
    r0 = [r0 m_oiWatchMsgItem];
    r0 = [r0 retain];
    r20 = r0;
    r28 = @selector(snsObj);
    r0 = [r0 snsObj];
    r0 = [r0 retain];
    r26 = [[r0 tid] retain];
    [r0 release];
    [r20 release];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCFacade class];
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 getDataItemByID:r26];
    r29 = r29;
    r21 = [r0 retain];
    [r20 release];
    [r19 release];
    r20 = r21;
    if (r21 == 0x0) {
            asm{ movz       x20, #0x0 };
            r0 = [WCDataItem alloc];
            asm{ movz       x20, #0x0 };
            r24 = [r0 init];
            [r21 release];
            [r24 setTid:r26];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r0, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oiWatchMsgItem];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 snsObj];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 userName];
            r29 = r29;
            r25 = [r0 retain];
            [r24 setUsername:r25];
            r20 = r24;
            [r25 release];
            [r23 release];
            [r21 release];
            [r19 release];
            [r24 setIsBidirectionalFan:0x1];
    }
    r0 = *(int32_t *)(r31 + 0x90);
    [r0 setDataItem:r20];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:*(int32_t *)(r31 + 0x90) animated:0x1];
    [r19 release];
    [r20 release];
    r0 = r26;
    goto loc_101d0cf80;

loc_101d0af1c:
    r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_oRecordItem];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    [r0 release];
    [r20 release];
    [r19 release];
    if (r21 == 0x0) goto loc_101d0b06c;
    r21 = *(int32_t *)(r31 + 0xb8);
    r19 = [MsgRecordDetailViewController alloc];
    r20 = [objc_msgSend(r21, r23) retain];
    r19 = [r19 initWithMsgWrap:r20];
    [r20 release];
    r20 = [[*(int32_t *)(r31 + 0xa0) getAttachedObjectForKey:@"chatname"] retain];
    [r19 setChatName:r20];
    [r20 release];
    r2 = [*(int32_t *)(r31 + 0xa0) m_uiVcType];
    [r19 setVcType:r2];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r19 animated:0x1];
    r0 = r20;
    goto loc_101d0b058;

loc_101d0ace4:
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 alloc];
    [r0 release];
    [r19 release];
    if (r21 == 0x5) goto loc_101d0aeec;
    r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
    *(int32_t *)(r31 + 0xa8) = r22;
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 alloc];
    [r0 release];
    if (r20 != 0x8) goto loc_101d0b4ac;
    goto loc_101d0ad60;

loc_101d0b4ac:
    asm{ movz       x25, #0x0 };
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [ClassMethodDispatchCenter class];
    r26 = [[r19 getService:r2] retain];
    [r19 release];
    r0 = [r26 getClsMethodObservers:@protocol(IAppMsgPathMgr) selector:@selector(GetPathOfAppDataByUserName:andMessageWrap:retStrPath:)];
    r29 = r29;
    r0 = [r0 retain];
    asm{ stp        xzr, xzr, [sp, #0xf8] };
    asm{ stp        xzr, xzr, [sp, #0xe8] };
    asm{ stp        xzr, xzr, [sp, #0xd8] };
    asm{ stp        xzr, xzr, [sp, #0xc8] };
    r0 = [r0 retain];
    r27 = r0;
    r20 = [r0 countByEnumeratingWithState:0xc8 objects:r29 - 0xd8 count:STK-1];
    if (r20 == 0x0) goto loc_101d0b5e4;
    goto loc_101d0b56c;

loc_101d0b5e4:
    asm{ movz       x25, #0x0 };

loc_101d0b85c:
    [r27 release];
    [r27 release];
    [r26 release];
    r2 = r25;
    if ([CBaseFile FileExist:r2] != 0x0) {
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r0, r23);
            r29 = r29;
            r0 = [r0 retain];
            r19 = r0;
            r8 = 0x10399f000;
            asm{ movz       w4, #0x0 };
            asm{ ldp        x2, x0, [sp, #0x98] };
            [r0 PreviewAppNode:r2 MsgWrap:r19 Pop:STK-1];
            r0 = r19;
    }
    else {
            r0 = [UIScreen mainScreen];
            r0 = [r0 retain];
            r19 = r0;
            asm{ movz       w2, #0x0 };
            r0 = [r0 snapshotViewAfterScreenUpdates:r2];
            r0 = [r0 retain];
            asm{ ldrsw      x9, [x8, #0xdac] };
            r10 = *(int32_t *)(r31 + 0xa0);
            r8 = *(int32_t *)(r10 + r9);
            *(int32_t *)(r10 + r9) = r0;
            [r8 release];
            [r19 release];
            r0 = [AppDetailViewController alloc];
            r24 = [r0 init];
            r19 = [objc_msgSend(*(int32_t *)(r31 + 0xb8), r23) retain];
            [r24 setM_wrapMsg:r19];
            [r19 release];
            r0 = [r10 GetContact];
            r0 = [r0 retain];
            r19 = r0;
            r20 = [[r0 m_nsUsrName] retain];
            [r24 setM_nsUsrName:r20];
            [r20 release];
            [r19 release];
            [r24 setM_delegate:r10];
            r0 = [r10 navigationController];
            r29 = r29;
            r0 = [r0 retain];
            r19 = r0;
            r8 = 0x103950000;
            [r0 PushViewController:r24 animated:0x1];
            [r19 release];
            r0 = r24;
    }
    [r0 release];
    r0 = r25;
    goto loc_101d0cf88;

loc_101d0b56c:
    r25 = **(int32_t *)(r31 + 0xd8);
    r19 = *(int32_t *)(0x103950000 + 0xa18);

loc_101d0b578:
    asm{ movz       x28, #0x0 };
    r21 = *(int32_t *)(0x103957000 + 0xdc8);

loc_101d0b580:
    if (**(int32_t *)(r31 + 0xd8) != r25) {
            objc_enumerationMutation(r27);
    }
    r24 = NSClassFromString(*(int32_t *)(*(int32_t *)(r31 + 0xd0) + r28 * 0x8));
    if (class_getClassMethod(r24, r21) != 0x0) goto loc_101d0b814;
    goto loc_101d0b5b8;

loc_101d0b814:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r29 = r29;
    r19 = [r0 retain];
    *(int32_t *)(r31 + 0xc0) = 0x0;
    objc_msgSend(r24, r21);
    r25 = [*(int32_t *)(r31 + 0xc0) retain];
    [r19 release];
    goto loc_101d0b85c;

loc_101d0b5b8:
    r28 = r28 + 0x1;
    if (r28 < r20) goto loc_101d0b580;
    r20 = objc_msgSend(r27, r19);
    if (r20 != 0x0) goto loc_101d0b578;
    goto loc_101d0b5e4;

loc_101d0ad60:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [AppEmoticonPreviewViewController alloc];
    r24 = [r0 init];
    r19 = [objc_msgSend(r21, r23) retain];
    [r24 setMsgWrap:r19];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    r19 = r0;
    r20 = [[r0 m_nsUsrName] retain];
    [r24 setUsername:r20];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r24 animated:0x1];
    goto loc_101d0b49c;

loc_101d0aba0:
    r0 = [WebviewJSEventHandler_openDesignerEmojiView alloc];
    r24 = [r0 init];
    *(int32_t *)(r31 + 0xa8) = r22;
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oEmotionPageSharedItem];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 params] retain];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r27 = [r0 retain];
    r8 = 0x103975000;
    r2 = r21;
    r3 = r27;
    r28 = [r24 handleWithParams:r2 AndNavigationController:r3 isHandleImmediately:STK-1];
    [r27 release];
    [r21 release];
    [r20 release];
    [r19 release];
    [r24 release];
    r22 = *(int32_t *)(r31 + 0xa8);
    r21 = *(int32_t *)(r31 + 0xb8);
    if ((r28 & 0x1 << 0x0) != 0x0) goto loc_101d09ef0;
    goto loc_101d0ac84;

loc_101d0aa90:
    r0 = [WebviewJSEventHandler_openEmoticonTopicList alloc];
    r24 = [r0 init];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oEmotionPageSharedItem];
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 params] retain];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r27 = [r0 retain];
    r8 = 0x103976000;
    asm{ movz       w4, #0x16 };
    r2 = r21;
    r3 = r27;
    r28 = [r24 handleWithParams:r2 AndNavigationController:r3 extrance:STK-1];
    [r27 release];
    [r21 release];
    [r20 release];
    [r19 release];
    [r24 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    if ((r28 & 0x1 << 0x0) != 0x0) goto loc_101d09ef0;
    goto loc_101d0ab6c;

loc_101d0a804:
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    [r0 ChangeForDisplay];
    [r19 release];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r24 = @selector(m_oEmotionDesignerSharedItem);
    r0 = [r0 m_oEmotionDesignerSharedItem];
    r29 = r29;
    r0 = [r0 retain];
    r8 = 0x103959000;
    r27 = [r0 designerUin];
    [r0 release];
    [r19 release];
    if (r27 == 0x0) goto loc_101d09ef0;
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = [[r0 m_extendInfoWithMsgType] retain];
    [r0 release];
    r0 = [StoreEmotionDesignerProfileViewController alloc];
    asm{ movz       w2, #0x16 };
    r25 = [r0 initWithExtrance:r2];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0x90) = @selector(alloc);
    r0 = [r0 retain];
    r28 = r0;
    r0 = [r0 m_oEmotionDesignerSharedItem];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 oldRedirectUrl];
    *(int32_t *)(r31 + 0x98) = r20;
    r19 = [r0 retain];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_oEmotionDesignerSharedItem];
    r0 = [r0 retain];
    r21 = r0;
    r23 = [[r0 designerName] retain];
    [r25 setDesignerUin:r27 andOldRedirectUrl:r19 andDesignerName:STK-1];
    [r23 release];
    [r21 release];
    [r20 release];
    [r19 release];
    [r26 release];
    [r28 release];
    r20 = *(int32_t *)(r31 + 0x98);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [r20 m_nsThumbUrl];
    r23 = *(int32_t *)(r31 + 0x90);
    r29 = r29;
    r19 = [r0 retain];
    [r25 setPreviewUrl:r19];
    [r19 release];
    r0 = objc_msgSend(MMUINavigationController, r23);
    r19 = [r0 initWithRootViewController:r25];
    r8 = 0x103955000;
    r0 = *(int32_t *)(r31 + 0xa0);
    [r0 PresentModalViewController:r19 animated:0x1];
    [r19 release];
    r0 = r25;

loc_101d08acc:
    [r0 release];
    [r20 release];
    goto loc_101d09ef0;

loc_101d0a644:
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    [r0 ChangeForDisplay];
    [r19 release];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r21 = @selector(m_oEmoticonSharedItem);
    r0 = [r0 m_oEmoticonSharedItem];
    r0 = [r0 retain];
    r20 = r0;
    r25 = @selector(m_productId);
    r0 = [r0 m_productId];
    r29 = r29;
    r24 = [r0 retain];
    [r20 release];
    [r19 release];
    r8 = 0x103950000;
    if ([r24 length] != 0x0) {
            r26 = [MMStoreEmotionDetailViewController alloc];
            r0 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r0, r23);
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 m_oEmoticonSharedItem];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 m_productId];
            r29 = r29;
            r25 = [r0 retain];
            asm{ movz       w4, #0x16 };
            r21 = [r26 initWithPid:r25 Scence:0x3 extrance:STK-1];
            [r25 release];
            [r23 release];
            [r20 release];
            r0 = [MMUINavigationController alloc];
            r19 = [r0 initWithRootViewController:r21];
            r8 = 0x103955000;
            r0 = *(int32_t *)(r31 + 0xa0);
            [r0 PresentModalViewController:r19 animated:0x1];
            [r19 release];
            [r21 release];
    }
    r0 = r24;

loc_101d08f0c:
    [r0 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    goto loc_101d09ef0;

loc_101d0a5f8:
    r8 = 0x103992000;
    r0 = *(int32_t *)(r31 + 0xa0);
    [r0 onOpenTrackRoom:0x4];
    goto loc_101d09ef0;

loc_101d09520:
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r24 = @selector(m_oHardWareItem);
    r0 = [r0 m_oHardWareItem];
    r29 = r29;
    r0 = [r0 retain];
    r8 = 0x103968000;
    r27 = @selector(uiHardWareShowType);
    r21 = [r0 uiHardWareShowType];
    [r0 release];
    [r19 release];
    if (r21 != 0x1) goto loc_101d09f44;
    goto loc_101d09584;

loc_101d09f44:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oHardWareItem];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    if ([r0 uiHardWareShowType] != 0x2) goto loc_101d09f98;
    goto loc_101d09f84;

loc_101d09f98:
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_oHardWareItem];
    r29 = r29;
    r0 = [r0 retain];
    r28 = r0;
    r22 = [r0 uiHardWareShowType];
    [r28 release];
    [r21 release];
    [r20 release];
    [r19 release];
    COND = r22 != 0x4;
    r22 = *(int32_t *)(r31 + 0xa8);
    r21 = *(int32_t *)(r31 + 0xb8);
    if (COND) goto loc_101d0a570;
    goto loc_101d0a000;

loc_101d0a570:
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oHardWareItem];
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 uiHardWareShowType];
    [r0 release];
    [r19 release];
    COND = r21 == 0x3;
    r21 = *(int32_t *)(r31 + 0xb8);
    if (COND) goto loc_101d09ef0;
    goto loc_101d0a5c4;

loc_101d0a000:
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    *(int32_t *)(r31 + 0xa8) = r22;
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(m_nsAppMediaUrl);
    r0 = [r0 m_nsAppMediaUrl];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 length];
    [r0 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d0a3d4;
    goto loc_101d0a060;

loc_101d0a3d4:
    r21 = *(int32_t *)(r31 + 0xb8);
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r21 = [[r0 m_nsContent] retain];
    r2 = r21;
    r25 = [[WCDeviceUtil parseDeviceLikeMessageXML:r2] retain];
    [r21 release];
    [r19 release];
    r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oHardWareItem];
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 uiHardWareShowType];
    [r0 release];
    r0 = [r19 release];
    if (r21 != 0x4) goto loc_101d0ae50;
    goto loc_101d0a498;

loc_101d0ae50:
    asm{ movz       w0, #0x3370 };
    asm{ movz       w2, #0x0 };
    asm{ movz       w3, #0x0 };
    r21 = *(int32_t *)(r31 + 0xb8);
    loc_1028e2f90(r0, @"30", r2, r3, STK0, STK-1);
    r0 = [BraceletRankViewController alloc];
    r19 = [r0 initWithLikeUserInfoDictionary:r25];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r19 animated:0x1];
    [r20 release];
    r0 = r19;

loc_101d0aed0:
    [r0 release];

loc_101d0aed4:
    [r25 release];
    goto loc_101d09ef0;

loc_101d0a498:
    asm{ movz       w0, #0x3370 };
    asm{ movz       w2, #0x0 };
    asm{ movz       w3, #0x0 };
    loc_1028e2f90(r0, @"29", r2, r3, STK0, STK-1);
    asm{ movz       x19, #0x0 };
    r20 = [BraceletRankProfileViewController alloc];
    asm{ movz       x19, #0x0 };
    r21 = [[r25 objectForKey:@"likeuserName"] retain];
    asm{ movz       x4, #0x0 };
    r19 = [r20 initWithUserName:r21 withBrandUserName:@"" AffectedUserList:STK-1];
    r20 = *(int32_t *)(r31 + 0xa0);
    [r21 release];
    r0 = [r20 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r19 animated:0x1];
    [r20 release];
    [r19 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    goto loc_101d0aed4;

loc_101d0a060:
    r22 = *(int32_t *)(r31 + 0xa8);
    r24 = [[NSMutableDictionary dictionary] retain];
    *(int32_t *)r31 = 0x6;
    r19 = [[NSString stringWithFormat:@"%u", r3] retain];
    [r24 setObject:r19 forKey:@"WCPayJSAPIPayChannel"];
    [r19 release];
    r21 = [MMWebViewController alloc];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r23 = [objc_msgSend(r0, r20) retain];
    r25 = [[NSURL safeUrlWithString:r23] retain];
    asm{ movz       w3, #0x0 };
    r20 = [r21 initWithURL:r25 presentModal:@"WCPayJSAPIPayChannel" extraInfo:STK-1];
    [r25 release];
    [r23 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r20 animated:0x1];

loc_101d0a1b4:
    [r19 release];
    r0 = r20;

loc_101d09ee4:
    [r0 release];

loc_101d09ee8:
    [r24 release];
    goto loc_101d09ef0;

loc_101d09f84:
    [r20 release];
    [r19 release];
    goto loc_101d0a000;

loc_101d09584:
    r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
    r0 = [r0 retain];
    r19 = r0;
    r20 = @selector(m_nsAppMediaUrl);
    r0 = [r0 m_nsAppMediaUrl];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 length];
    [r0 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d0a1c4;
    goto loc_101d095e0;

loc_101d0a1c4:
    *(int32_t *)r31 = @"enter 22:00 rank";
    asm{ movz       w6, #0x55f };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    r22 = *(int32_t *)(r31 + 0xa8);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [iConsole logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ movz       w0, #0x3370 };
    asm{ movz       w2, #0x0 };
    asm{ movz       w3, #0x0 };
    loc_1028e2f90(r0, @"28", 0x2, r3, STK0, STK-1);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r21 = [[r0 m_nsContent] retain];
    r25 = [[WCDeviceUtil parseDeviceRankMessageXML:r21] retain];
    [r21 release];
    [r19 release];
    r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = objc_msgSend(r0, r24);
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 nsRankID] retain];
    [r25 setValue:r21 forKey:@"rankid"];
    [r21 release];
    [r20 release];
    [r19 release];
    r19 = *(int32_t *)(r31 + 0xb8);
    r20 = [BraceletRankViewController alloc];
    r0 = objc_msgSend(r19, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = objc_msgSend(r0, r24);
    r0 = [r0 retain];
    r3 = [r0 IsExpired];
    r23 = *(int32_t *)(r31 + 0xa0);
    r20 = [r20 initWithRankInfoDictionary:r25 bExpire:r3];
    [r0 release];
    [r19 release];
    r0 = [r23 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    r21 = *(int32_t *)(r31 + 0xb8);
    [r0 PushViewController:r20 animated:0x1];
    [r19 release];
    r0 = r20;
    goto loc_101d0aed0;

loc_101d095e0:
    r22 = *(int32_t *)(r31 + 0xa8);
    r24 = [[NSMutableDictionary dictionary] retain];
    *(int32_t *)r31 = 0x6;
    r19 = [[NSString stringWithFormat:@"%u", r3] retain];
    [r24 setObject:r19 forKey:@"WCPayJSAPIPayChannel"];
    [r19 release];
    r21 = [MMWebViewController alloc];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r23 = [objc_msgSend(r0, r20) retain];
    r25 = [[NSURL safeUrlWithString:r23] retain];
    asm{ movz       w3, #0x0 };
    r20 = [r21 initWithURL:r25 presentModal:@"WCPayJSAPIPayChannel" extraInfo:STK-1];
    [r25 release];
    [r23 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r20 animated:0x1];
    goto loc_101d0a1b4;

loc_101d08f4c:
    r20 = [ShakeTvViewController alloc];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oAppTVItem];
    r0 = [r0 retain];
    r21 = r0;
    r23 = [[r0 tvInfo] retain];
    r20 = [r20 initWithExtContent:r23 Scence:0x1];
    r24 = *(int32_t *)(r31 + 0xa0);
    [r23 release];
    [r21 release];
    [r19 release];
    r0 = [r24 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    r21 = *(int32_t *)(r31 + 0xb8);
    [r0 PushViewController:r20 animated:0x1];

loc_101d08ac8:
    r0 = r19;
    goto loc_101d08acc;

loc_101d08bf4:
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r22 = [[r0 m_oGiftCardItem] retain];
    [r0 release];
    r19 = *(int32_t *)(r31 + 0xa0);
    [r19 startLoadingNonBlock];
    objc_initWeak(r29 - 0xe0, r19);
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x80c] };
    objc_initWeak(r29 - 0xe8, *(int32_t *)(r19 + 0x1039ef000));
    r0 = [MMServiceCenter defaultCenter];
    *(int32_t *)(r31 + 0xb8) = r21;
    r19 = [r0 retain];
    r2 = [WCGiftCardMgr class];
    r0 = [r19 getService:r2];
    asm{ stp        x8, x9, [sp, #0x88] };
    *(int32_t *)(r31 + 0x80) = 0x128;
    asm{ stp        x19, x8, [sp, #0x70] };
    r19 = [r0 retain];
    r21 = [r22 bizUin];
    r0 = [r22 orderId];
    *(int32_t *)(r31 + 0x98) = r22;
    r23 = [r0 retain];
    r22 = *(int32_t *)_NSConcreteStackBlock;
    *(int32_t *)(r31 + 0x138) = r22;
    asm{ movz       w28, #0xc200, lsl #16 };
    *(int32_t *)(r31 + 0x140) = r28;
    *(int32_t *)(r31 + 0x144) = 0x0;
    asm{ nop         };
    *(int32_t *)(r31 + 0x148) = 0x101d0e0dc;
    *(int32_t *)(r31 + 0x150) = 0x1032186f0;
    r0 = *(int32_t *)(r31 + 0x90);
    objc_copyWeak(r0, r29 - 0xe8);
    r0 = *(int32_t *)(r31 + 0x88);
    objc_copyWeak(r0, r29 - 0xe0);
    *(int32_t *)(r31 + 0x108) = r22;
    *(int32_t *)(r31 + 0x110) = r28;
    *(int32_t *)(r31 + 0x114) = 0x0;
    asm{ nop         };
    *(int32_t *)(r31 + 0x118) = 0x101d0e800;
    *(int32_t *)(r31 + 0x120) = 0x103218720;
    r0 = *(int32_t *)(r31 + 0x80);
    objc_copyWeak(r0, r29 - 0xe0);
    r0 = *(int32_t *)(r31 + 0x78);
    objc_copyWeak(r0, r29 - 0xe8);
    [r19 preAcceptGiftCardWithBizUin:r21 orderId:r23 success:STK0 failure:STK-1];
    [r23 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x70);
    [r0 release];
    r22 = *(int32_t *)(r31 + 0xa8);
    r28 = [[MMServiceCenter defaultCenter] retain];
    r21 = *(int32_t *)(r31 + 0x98);
    r19 = [[r28 getService:[WCGiftCardMgr class]] retain];
    r20 = [[r21 orderId] retain];
    r23 = [r21 bizUin];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = r29;
    r24 = [r0 retain];
    r8 = 0x10396d000;
    [r19 uploadKVByType:0x1 orderId:r20 BizUin:STK0 giftUserName:STK-1];
    [r24 release];
    [r21 release];
    [r20 release];
    [r19 release];
    [r28 release];
    r0 = *(int32_t *)(r31 + 0x78);
    objc_destroyWeak(r0);
    r0 = *(int32_t *)(r31 + 0x80);
    objc_destroyWeak(r0);
    r0 = *(int32_t *)(r31 + 0x88);
    objc_destroyWeak(r0);
    r0 = *(int32_t *)(r31 + 0x90);
    objc_destroyWeak(r0);
    objc_destroyWeak(r29 - 0xe8);
    objc_destroyWeak(r29 - 0xe0);
    r0 = *(int32_t *)(r31 + 0x98);
    goto loc_101d08f0c;

loc_101d08b10:
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r24 = [[r0 m_nsAppMediaUrl] retain];
    [r0 release];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r26 = @selector(m_oCardTicketItem);
    r0 = [r0 m_oCardTicketItem];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    r2 = [r0 cardType];
    if (([WCCardPkgUtil isKnownCardType:r2] & 0x1 << 0x0) == 0x0) goto loc_101d09024;
    goto loc_101d08bac;

loc_101d09024:
    r20 = [r24 length];
    [r21 release];
    [r19 release];
    if (r20 == 0x0) goto loc_101d09170;
    goto loc_101d0904c;

loc_101d09170:
    r27 = @selector(alloc);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [WCCardEnterInfo alloc];
    r25 = [r0 init];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCardTicketItem];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 cardId] retain];
    [r25 setCardIdOrTpId:r21];
    [r21 release];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCardTicketItem];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 cardExt] retain];
    [r25 setCardExt:r21];
    [r21 release];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCardTicketItem];
    r0 = [r0 retain];
    r20 = r0;
    r21 = *(int32_t *)(r31 + 0xb8);
    [r0 fromScene];
    r28 = @selector(setFromScene:);
    [r25 setFromScene:r2];
    [r20 release];
    [r19 release];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCardTicketItem];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 fromUserName] retain];
    [r25 setFromUserName:r21];
    [r21 release];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r20 = [[r0 GetChatName] retain];
    r21 = *(int32_t *)(r31 + 0xb8);
    [r25 setChatName:r20];
    [r20 release];
    [r19 release];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCardTicketItem];
    r0 = [r0 retain];
    r20 = r0;
    r21 = [[r0 recommendCardId] retain];
    [r25 setRecommendCardId:r21];
    [r21 release];
    [r20 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oCardTicketItem];
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 isRecommend];
    [r0 release];
    [r19 release];
    if (r21 != 0x0) {
            asm{ movz       w2, #0x17 };
            [r25 setFromScene:r2];
    }
    r0 = [WCNewCardDetailViewController alloc];
    r19 = [r0 initWithCardEnterInfo:r25];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r19 animated:0x1];
    [r20 release];
    [r19 release];
    [r25 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    goto loc_101d09ee8;

loc_101d0904c:
    r21 = *(int32_t *)(r31 + 0xb8);
    r23 = [[NSMutableDictionary dictionary] retain];
    *(int32_t *)r31 = 0x6;
    r19 = [[NSString stringWithFormat:@"%u", r3] retain];
    [r23 setObject:r19 forKey:@"WCPayJSAPIPayChannel"];
    [r19 release];
    r19 = [MMWebViewController alloc];
    r20 = [[NSURL safeUrlWithString:r24] retain];
    asm{ movz       w3, #0x0 };
    r19 = [r19 initWithURL:r20 presentModal:@"WCPayJSAPIPayChannel" extraInfo:STK-1];
    [r20 release];
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x103950000;
    [r0 PushViewController:r19 animated:0x1];
    [r20 release];
    [r19 release];
    r0 = r23;
    goto loc_101d09ee4;

loc_101d08bac:
    [r21 release];
    [r19 release];
    goto loc_101d09170;

loc_101d089e8:
    r20 = [WCProductDetailViewController alloc];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oMallProductItem];
    r0 = [r0 retain];
    r21 = r0;
    r23 = [[r0 mallProductInfo] retain];
    r20 = [r20 initWithExtString:r23];
    r24 = *(int32_t *)(r31 + 0xa0);
    [r23 release];
    [r21 release];
    [r19 release];
    [r20 setScene:0x1];
    r0 = [r24 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    r21 = *(int32_t *)(r31 + 0xb8);
    [r0 PushViewController:r20 animated:0x1];
    goto loc_101d08ac8;

loc_101d082f8:
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r20 = r0;
    r24 = @selector(m_oWCPayInfoItem);
    r0 = [r0 m_oWCPayInfoItem];
    r29 = r29;
    r0 = [r0 retain];
    r19 = @selector(m_sceneId);
    r22 = [r0 m_sceneId];
    [r0 release];
    [r20 release];
    if (r22 != 0x3ea) goto loc_101d084b4;
    goto loc_101d08360;

loc_101d084b4:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_oWCPayInfoItem];
    r29 = r29;
    r0 = [r0 retain];
    r19 = [r0 m_sceneId];
    [r0 release];
    [r20 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    if (r19 != 0x3e9) goto loc_101d089b0;
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oWCPayInfoItem];
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 m_aaNewAAType];
    [r0 release];
    [r19 release];
    r8 = r21 - 0x1;
    r21 = *(int32_t *)(r31 + 0xb8);
    if (r8 > 0x2) goto loc_101d089b0;
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oWCPayInfoItem];
    r0 = [r0 retain];
    r20 = r0;
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = [r0 m_aaOrderBillNum];
    r24 = *(int32_t *)(r31 + 0xa0);
    r23 = [r0 retain];
    [r20 release];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCPayControlMgr class];
    r20 = [[r19 getService:r2] retain];
    r0 = [r24 GetContact];
    r29 = r29;
    r21 = [r0 retain];
    r8 = 0x10397a000;
    [r20 startOpenGroupPayOrderDetailLogic:r24 billNum:r23 fromScene:STK0 chatRoomContact:STK-1];
    [r21 release];
    [r20 release];
    [r19 release];
    r0 = r23;
    goto loc_101d08f0c;

loc_101d08360:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = objc_msgSend(r0, r24);
    r0 = [r0 retain];
    r20 = r0;
    r27 = @selector(m_c2cNativeUrl);
    r0 = [r0 m_c2cNativeUrl];
    r29 = r29;
    r0 = [r0 retain];
    r2 = @"weixin://openNativeUrl/weixinHB/startreceivebizhbrequest?";
    r22 = [r0 containsSubstring:r2];
    [r0 release];
    [r20 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d0867c;
    goto loc_101d083e4;

loc_101d0867c:
    r21 = *(int32_t *)(r31 + 0xb8);
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r0 = objc_msgSend(r0, r24);
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_c2cNativeUrl];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    r28 = @selector(length);
    if ([r0 length] == 0x0) goto loc_101d08848;
    goto loc_101d086d8;

loc_101d08848:
    *(int32_t *)(r31 + 0x98) = r28;
    [r21 release];
    [r19 release];
    [r20 release];

loc_101d08864:
    r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
    r0 = [r0 retain];
    r19 = r0;
    r0 = objc_msgSend(r0, r24);
    r24 = *(int32_t *)(r31 + 0x98);
    *(int32_t *)(r31 + 0xa8) = r22;
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_c2cNativeUrl];
    r29 = r29;
    r0 = [r0 retain];
    r22 = objc_msgSend(r0, r24);
    [r0 release];
    [r21 release];
    [r19 release];
    r21 = *(int32_t *)(r31 + 0xb8);
    if (r22 == 0x0) goto loc_101d089b0;
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = [WCRedEnvelopesControlData alloc];
    r24 = [r0 init];
    r19 = [objc_msgSend(r21, r23) retain];
    [r24 setM_oSelectedMessageWrap:r19];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCRedEnvelopesControlMgr class];
    r0 = [r19 getService:r2];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x10399f000;
    [r0 startReceiveRedEnvelopesLogic:*(int32_t *)(r31 + 0xa0) Data:r24];

loc_101d089a0:
    [r20 release];
    r0 = r19;
    goto loc_101d09ee4;

loc_101d086d8:
    r0 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r0, r23);
    asm{ stp        x20, x28, [sp, #0x90] };
    r0 = [r0 retain];
    r28 = r0;
    r0 = objc_msgSend(r0, r24);
    r29 = r29;
    r0 = [r0 retain];
    r20 = [r0 m_c2c_msg_subtype];
    [r0 release];
    [r28 release];
    [r21 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x90);
    [r0 release];
    r22 = *(int32_t *)(r31 + 0xa8);
    if (r20 != 0x1) goto loc_101d08864;
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [WCRedEnvelopesControlData alloc];
    r24 = [r0 init];
    r19 = [objc_msgSend(r21, r23) retain];
    [r24 setM_oSelectedMessageWrap:r19];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCRedEnvelopesControlMgr class];
    r0 = [r19 getService:r2];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x10399f000;
    [r0 startReceiveGreetingRedEnvelopesLogic:*(int32_t *)(r31 + 0xa0) Data:r24];
    goto loc_101d089a0;

loc_101d083e4:
    r22 = *(int32_t *)(r31 + 0xa8);
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = [WCRedEnvelopesControlData alloc];
    r24 = [r0 init];
    r19 = [objc_msgSend(r21, r23) retain];
    [r24 setM_oSelectedMessageWrap:r19];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCRedEnvelopesControlMgr class];
    r0 = [r19 getService:r2];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x10399f000;
    [r0 startReceiveRedEnvelopesLogicByC2C:*(int32_t *)(r31 + 0xa0) Data:r24];
    goto loc_101d089a0;

loc_101d08084:
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r28 = @selector(m_oWCPayInfoItem);
    r0 = [r0 m_oWCPayInfoItem];
    r29 = r29;
    r0 = [r0 retain];
    r27 = @selector(m_uiPaySubType);
    r21 = [r0 m_uiPaySubType];
    [r0 release];
    [r19 release];
    r8 = r21 - 0x1;
    r21 = *(int32_t *)(r31 + 0xb8);
    if (r8 >= 0x7) goto loc_101d082c4;
    r0 = *(int32_t *)(r31 + 0xa0);
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r19 = @selector(m_nsUsrName);
    r0 = [r0 m_nsUsrName];
    r29 = r29;
    r24 = [r0 retain];
    [r20 release];
    r26 = @selector(isEqualToString:);
    if ([r24 isEqualToString:r2] == 0x0) goto loc_101d0978c;
    goto loc_101d08150;

loc_101d0978c:
    r0 = objc_msgSend(r21, r23);
    r29 = r29;
    r19 = [r0 retain];
    r20 = [CMessageWrap isSenderFromMsgWrap:r19];
    [r19 release];
    r0 = WCPayControlData;
    r1 = @selector(alloc);
    if (r20 != 0x0) {
            r0 = [r0 alloc];
            r25 = [r0 init];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            *(int32_t *)(r31 + 0xb8) = r21;
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_nsTranscationID] retain];
            [r25 setM_nsControlTransationID:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_nsTransferID] retain];
            [r25 setM_nsTransferID:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            [r25 setM_nsCurrentUserName:r24];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_nsFeeDesc] retain];
            [r25 setM_nsTranferMoneyString:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r2 = [r0 m_uiInvalidTime];
            [r25 setM_uiTransferInvalidTime:r2];
            [r20 release];
            [r19 release];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r2 = [r0 m_uiEffectiveDate];
            [r25 setM_uiEffectiveDate:r2];
            [r20 release];
            [r19 release];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_total_fee] retain];
            [r25 setNsTransferMoney:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r2 = [r0 m_uiPaySubType];
            [r25 setM_pay_msg_type:r2];
            [r20 release];
            [r19 release];
            r19 = [[MMServiceCenter defaultCenter] retain];
            r2 = [WCPayControlMgr class];
            r0 = [r19 getService:r2];
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            r8 = 0x10399f000;
            [r0 startSenderTransferMoneyLogic:*(int32_t *)(r31 + 0xa0) Data:r25];
    }
    else {
            r0 = [r0 alloc];
            r25 = [r0 init];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            *(int32_t *)(r31 + 0xb8) = r21;
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_nsTranscationID] retain];
            [r25 setM_nsControlTransationID:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r0 = objc_msgSend(*(int32_t *)(r31 + 0xb8), r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_nsTransferID] retain];
            [r25 setM_nsTransferID:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            [r25 setM_nsCurrentUserName:r24];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_nsFeeDesc] retain];
            [r25 setM_nsTranferMoneyString:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r2 = [r0 m_uiInvalidTime];
            [r25 setM_uiTransferInvalidTime:r2];
            [r20 release];
            [r19 release];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r2 = [r0 m_uiEffectiveDate];
            [r25 setM_uiEffectiveDate:r2];
            [r20 release];
            [r19 release];
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r21 = [[r0 m_total_fee] retain];
            [r25 setNsTransferMoney:r21];
            [r21 release];
            [r20 release];
            [r19 release];
            r21 = *(int32_t *)(r31 + 0xb8);
            r0 = objc_msgSend(r21, r23);
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 m_oWCPayInfoItem];
            r0 = [r0 retain];
            r20 = r0;
            r2 = [r0 m_uiPaySubType];
            [r25 setM_pay_msg_type:r2];
            [r20 release];
            [r19 release];
            r19 = [[MMServiceCenter defaultCenter] retain];
            r2 = [WCPayControlMgr class];
            r0 = [r19 getService:r2];
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            r8 = 0x10399f000;
            [r0 startReceiverConfirmTransferMoneyLogic:*(int32_t *)(r31 + 0xa0) Data:r25];
    }
    [r20 release];
    [r19 release];
    r0 = r25;
    goto loc_101d09ee4;

loc_101d08150:
    r0 = [SettingUtil getMainSetting];
    r0 = [r0 retain];
    r25 = [objc_msgSend(r0, r19) retain];
    [r0 release];
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r19 = @selector(m_nsToUsr);
    r0 = [r0 m_nsToUsr];
    r29 = r29;
    r21 = [r0 retain];
    r22 = [r25 isEqualToString:r2];
    [r21 release];
    [r20 release];
    if ((r22 & 0x1 << 0x0) == 0x0) goto loc_101d08818;
    goto loc_101d081e8;

loc_101d08818:
    r21 = *(int32_t *)(r31 + 0xb8);
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsToUsr];
    r29 = r29;

loc_101d09768:
    r19 = [r0 retain];
    [r24 release];
    [r20 release];
    r24 = r19;

loc_101d09784:
    [r25 release];
    goto loc_101d0978c;

loc_101d081e8:
    r21 = *(int32_t *)(r31 + 0xb8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r19 = @selector(m_nsMsgSource);
    r0 = [r0 m_nsMsgSource];
    r29 = r29;
    r21 = [r0 retain];
    r22 = [r25 isEqualToString:r2];
    [r21 release];
    [r20 release];
    if ((r22 & 0x1 << 0x0) == 0x0) goto loc_101d0973c;
    goto loc_101d0824c;

loc_101d0973c:
    r21 = *(int32_t *)(r31 + 0xb8);
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = objc_msgSend(r21, r23);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsMsgSource];
    r29 = r29;
    goto loc_101d09768;

loc_101d0824c:
    r21 = *(int32_t *)(r31 + 0xb8);
    r22 = *(int32_t *)(r31 + 0xa8);
    r0 = objc_msgSend(r21, r23);
    r29 = r29;
    r20 = [r0 retain];
    asm{ stp        x8, x20, [sp] };
    asm{ movz       w6, #0x49e };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x3 module:"WcPay" errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    [r20 release];
    goto loc_101d09784;

loc_101d07f78:
    r20 = [ProductDetailViewController alloc];
    r0 = objc_msgSend(r21, r23);
    *(int32_t *)(r31 + 0xb8) = r21;
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_oAppProductItem];
    r0 = [r0 retain];
    r21 = r0;
    r23 = [[r0 productInfo] retain];
    r20 = [r20 initWithExtContent:r23 Scence:0x1];
    r24 = *(int32_t *)(r31 + 0xa0);
    [r23 release];
    [r21 release];
    [r19 release];
    r0 = [r24 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r8 = 0x103950000;
    r21 = *(int32_t *)(r31 + 0xb8);
    [r0 PushViewController:r20 animated:0x1];
    goto loc_101d08ac8;
}

- (void)PlayVideo:(id)arg2 soundable:(id)arg3 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ movz       x4, #0x0 };
    r0 = [self PreviewImage:arg2 soundable:arg3 snapshotView:STK-1];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)PlayShortVideo:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    [self PreviewImage:r19];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onClickMsg:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onClickMsg:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)headerImageClicked:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = [arg2 retain];
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    [r0 OpenContactInfo:r20];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)headerImageClickedWithMsg:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(headerImageClickedWithMsg:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 headerImageClickedWithMsg:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)readerViewClickedWithMsg:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(openWaApp:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 openWaApp:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)showEarModeTips
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    r0 = [SettingUtil getMainSettingExt];
    r0 = [r0 retain];
    r21 = [r0 m_isForceEarpieceMode];
    [r0 release];
    r0 = TipsView;
    if (r21 != 0x0) {
            r1 = @selector(showEarModeTips:);
    }
    else {
            r1 = @selector(showLoudModeTips:);
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = objc_msgSend(r0, r1);
    return;
}

- (void)onTipsViewClick:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r21 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xdb0] };
    if (*(int32_t *)(r21 + 0x1039e8000) == r19) {
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [BannerToastMgr class];
            r27 = [[r20 getService:r2] retain];
            r0 = [r21 GetContact];
            *(int32_t *)r31 = @selector(class);
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 m_nsUsrName] retain];
            [r27 deleteRecommandFriendMsg:r25];
            [r25 release];
            [r24 release];
            [r27 release];
            [r20 release];
            *(int32_t *)(r31 + 0x8) = [[NSMutableDictionary dictionary] retain];
            r27 = [[r21 GetContact] retain];
            r0 = [r21 GetContact];
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 m_nsUsrName] retain];
            r0 = *(int32_t *)(r31 + 0x8);
            [r0 setObject:r27 forKey:r25];
            [r25 release];
            [r24 release];
            [r27 release];
            r0 = [MultiSelectContactsViewController alloc];
            r27 = [r0 init];
            [r27 setM_delegate:r21];
            [r27 setM_dicExistContact:*(int32_t *)(r31 + 0x8)];
            r0 = [MMUINavigationController alloc];
            r28 = [r0 initWithRootViewController:r27];
            r0 = [r28 navigationBar];
            r0 = [r0 retain];
            r25 = r0;
            [r0 setBarStyle:0x1];
            [r25 release];
            r24 = [[r28 navigationBar] retain];
            r25 = [[CShareResourceProvider GetNavigationBarTintColor] retain];
            [r24 setTintColor:r25];
            [r25 release];
            [r24 release];
            [r21 PresentModalViewController:r28 animated:0x1];
            [r19 hideTipsView];
            r24 = [[MMServiceCenter defaultCenter] retain];
            r25 = [[r24 getService:objc_msgSend(BannerToastMgr, *(int32_t *)r31)] retain];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r0 = objc_loadWeakRetained(r21 + 0x1039e8000);
            r26 = r0;
            r0 = [r0 GetContact];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 m_nsUsrName];
            r29 = 0x50;
            r23 = [r0 retain];
            asm{ movz       w4, #0x0 };
            [r25 logRecommandFriendBanner:r23 opType:0x2 recCount:STK-1];
            [r23 release];
            [r22 release];
            [r26 release];
            [r25 release];
            [r24 release];
            [r28 release];
            [r27 release];
            r0 = *(int32_t *)(r31 + 0x8);
            [r0 release];
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)onTipsViewClose:(id)arg2 
{
    r0 = self;
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = r0;
    asm{ ldrsw      x24, [x8, #0xdb4] };
    if (*(int32_t *)(r19 + r24) == arg2) {
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [BannerToastMgr class];
            r21 = [[r20 getService:r2] retain];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 m_nsUsrName];
            r23 = [r0 retain];
            [r21 deleteSecurityBannerMsg:r23];
            [r23 release];
            [r22 release];
            [r21 release];
            [r20 release];
            r0 = *(int32_t *)(r19 + r24);
            [r0 setHidden:0x1];
            r0 = *(int32_t *)(r19 + r24);
            [r0 removeFromSuperview];
            asm{ ldrsw      x8, [x8, #0xd8c] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ movi.16b   v0, #0x0 };
            r0 = [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)onPerformAction:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onPerformAction:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 performSelector:r22 withObject:r19];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)showExposeViewController
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    if (([MMExposeH5VersionLogic isH5VersionExposeActive] & 0x1 << 0x0) != 0x0) {
            r20 = [[NSMutableDictionary dictionary] retain];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r22 = r0;
            r23 = [[r0 m_nsUsrName] retain];
            [r20 setObject:r23 forKey:@"sender"];
            [r23 release];
            [r22 release];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r22 = [r0 isChatroom];
            [r0 release];
            r21 = *(int32_t *)(0x1039c4000 + 0x510);
            [r19 navigationController];
            asm{ movz       w8, #0x27 };
            asm{ movz       w9, #0x24 };
            asm{ csel       w2, w9, w8, ne };
            [r21 enterExposeH5InScene:r23 withExtraData:r20 usingNavigationController:STK-1];
    }
    else {
            r0 = [MMExposeViewController alloc];
            r20 = [r0 init];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r22 = r0;
            r23 = [[r0 m_nsUsrName] retain];
            [r20 setM_userName:r23];
            [r23 release];
            [r22 release];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r21 = r0;
            asm{ movz       w8, #0x27 };
            asm{ movz       w9, #0x24 };
            asm{ csel       w2, w9, w8, ne };
            [r20 setM_exposeScene:r23];
            [r21 release];
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r21 = r0;
            [r0 PushViewController:r20 animated:0x1];
            [r21 release];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 release];
    return;
}

- (void)onPerformExposeAction:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    r0 = [self showExposeViewController];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)onPerformIconAction:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r0 = [arg2 retain];
    r19 = r0;
    r0 = [r0 usrData];
    r29 = 0x40;
    r20 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xdb8] };
    if (*(int32_t *)(r21 + 0x1039e8000) != r19) {
            r23 = @selector(m_nsUsrName);
    }
    else {
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [BannerToastMgr class];
            r24 = [[r22 getService:r2] retain];
            r23 = @selector(m_nsUsrName);
            r0 = [r20 m_nsUsrName];
            r29 = 0x40;
            r25 = [r0 retain];
            [r24 logUniDirectionFriendBanner:r25 opType:0x2];
            [r25 release];
            [r24 release];
            [r22 release];
    }
    asm{ ldrsw      x8, [x8, #0xdb0] };
    asm{ movz       w8, #0x26 };
    asm{ csel       w24, w8, wzr, eq };
    r22 = [objc_msgSend(r20, r23) retain];
    r0 = [r20 getContactDisplayName];
    r23 = [r0 retain];
    [r21 jumpToUserProfile:r22 Displayname:r23 Scence:STK0 fromBanner:STK-1];
    [r23 release];
    [r22 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onExposeTemplateMsg:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onExposeTemplateMsg:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onExposeTemplateMsg:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)clickLinkToExpose
{
    r0 = [self showExposeViewController];
    return;
}

- (void)clickShieldBrandMsg
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = @selector(onClickShieldBrandMsg);
    r22 = [r0 respondsToSelector:r20];
    r0 = [r0 release];
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = r0;
            [r0 onClickShieldBrandMsg];
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)clickReceiveBrandMsg
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = @selector(onClickReceiveBrandMsg);
    r22 = [r0 respondsToSelector:r20];
    r0 = [r0 release];
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = r0;
            [r0 onClickReceiveBrandMsg];
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)clickWeAppReceiveSessionMsg
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = @selector(onClickWeAppReceiveSessionMsg);
    asm{ nop         };
    r22 = [r0 respondsToSelector:r20];
    r0 = [r0 release];
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = r0;
            [r0 onClickWeAppReceiveSessionMsg];
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)clickLinkToDealWithSysXml:(id)arg2 fromScene:(id)arg3 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x20;
    r21 = self;
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r23 = r21 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r23);
    r22 = r0;
    r0 = [r0 GetContact];
    r29 = 0x40;
    r0 = [r0 retain];
    r25 = [r0 isChatroom];
    [r0 release];
    [r22 release];
    if (r25 != 0x0) {
            r0 = objc_loadWeakRetained(r23);
            r22 = r0;
            [r0 clickLinkToDealWithSysXml:r19 fromScene:r20];
            [r22 release];
    }
    else {
            r22 = @selector(isEqualToString:);
            if ([r20 isEqualToString:r2] != 0x0) {
                    r22 = [[r19 m_nsFromUsr] retain];
                    r0 = [r19 m_nsToUsr];
                    r29 = 0x40;
                    r24 = [r0 retain];
                    asm{ stp        x22, x24, [sp, #0x8] };
                    *(int32_t *)r31 = @"jemmytest redial_voice fromuser[%@] touser[%@]";
                    asm{ movz       w6, #0x74c };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                    [r24 release];
                    [r22 release];
                    [r21 openVoiceCall];
            }
            else {
                    if ([r20 isEqualToString:r2] != 0x0) {
                            r22 = [[r19 m_nsFromUsr] retain];
                            r0 = [r19 m_nsToUsr];
                            r29 = 0x40;
                            r24 = [r0 retain];
                            asm{ stp        x22, x24, [sp, #0x8] };
                            *(int32_t *)r31 = @"jemmytest redial_video fromuser[%@] touser[%@]";
                            asm{ movz       w6, #0x750 };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                            [r24 release];
                            [r22 release];
                            [r21 openVideoCall];
                    }
            }
    }
    [r20 release];
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)clickNewAASysMsg:(id)arg2 withMsgLocalID:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WCPayControlMgr class];
    r23 = [[r20 getService:r2] retain];
    r0 = [self GetContact];
    r24 = [r0 retain];
    [r23 startGroupPayLogic:self sysMsgUrl:r19 chatRoomContact:STK0 msgLocalID:STK-1];
    [r24 release];
    [r23 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (id)contactShareMsgFromUser:(id)arg2 toUser:(id)arg3 sharedContact:(id)arg4 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    r21 = [[r4 xmlForMessageWrapContent] retain];
    asm{ stp        x8, x21, [sp] };
    asm{ movz       w6, #0x75f };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r0 = [CMessageWrap alloc];
    asm{ movz       w2, #0x2a };
    r22 = [r0 initWithMsgType:0x1];
    [r22 setM_nsFromUsr:r19];
    [r22 setM_nsContent:r21];
    [r22 setM_nsToUsr:r20];
    r23 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMNewSessionMgr class];
    r0 = [r23 getService:r2];
    r0 = [r0 retain];
    r24 = r0;
    r2 = [r0 GenSendMsgTime];
    [r22 setM_uiCreateTime:r2];
    [r24 release];
    [r23 release];
    [r22 setM_uiStatus:0x1];
    [r21 release];
    [r20 release];
    [r19 release];
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r22 autorelease];
    return r0;
}

- (void)onMultiSelectContactReturn:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x120;
    r20 = self;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffffa8] };
    r26 = [arg2 retain];
    [r20 DismissModalViewControllerAnimated:0x1];
    r8 = 0x103950000;
    r22 = @selector(count);
    if ([r26 count] != 0x0) {
            r19 = [[MMServiceCenter defaultCenter] retain];
            r2 = [BannerToastMgr class];
            r21 = [[r19 getService:r2] retain];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
            r23 = r0;
            r0 = [r0 GetContact];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 m_nsUsrName];
            r29 = 0x50;
            r25 = [r0 retain];
            [r26 count];
            r8 = 0x10399f000;
            [r21 logRecommandFriendBanner:r25 opType:0x3 recCount:STK-1];
            [r25 release];
            [r24 release];
            [r23 release];
            [r21 release];
            [r19 release];
    }
    asm{ stp        xzr, xzr, [sp, #0x88] };
    asm{ stp        xzr, xzr, [sp, #0x78] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    *(int32_t *)(r31 + 0x8) = r26;
    r0 = [r26 retain];
    *(int32_t *)(r31 + 0x18) = r0;
    r21 = [r0 countByEnumeratingWithState:0x58 objects:0x98 count:STK-1];
    if (r21 != 0x0) {
            *(int32_t *)(r31 + 0x20) = **(int32_t *)(r31 + 0x68);
            *(int32_t *)(r31 + 0x10) = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x23, #0x0 };
                    *(int32_t *)(r31 + 0x50) = @selector(getMainSetting);
                    r25 = @selector(m_nsUsrName);
                    r26 = @selector(GetContact);
                    *(int32_t *)(r31 + 0x48) = @selector(contactShareMsgFromUser:toUser:sharedContact:);
                    *(int32_t *)(r31 + 0x40) = @selector(defaultCenter);
                    *(int32_t *)(r31 + 0x38) = @selector(class);
                    *(int32_t *)(r31 + 0x30) = @selector(getService:);
                    *(int32_t *)(r31 + 0x28) = @selector(AddMsg:MsgWrap:);
                    do {
                            if (**(int32_t *)(r31 + 0x68) != *(int32_t *)(r31 + 0x20)) {
                                    r0 = *(int32_t *)(r31 + 0x18);
                                    objc_enumerationMutation(r0);
                            }
                            r22 = *(int32_t *)(*(int32_t *)(r31 + 0x60) + r23 * 0x8);
                            r0 = objc_msgSend(SettingUtil, *(int32_t *)(r31 + 0x50));
                            r0 = [r0 retain];
                            r24 = r0;
                            r27 = [[r0 m_nsUsrName] retain];
                            r0 = [r20 GetContact];
                            r0 = [r0 retain];
                            r28 = r0;
                            r19 = [[r0 m_nsUsrName] retain];
                            r1 = *(int32_t *)(r31 + 0x48);
                            r22 = [objc_msgSend(r20, r1) retain];
                            [r19 release];
                            [r28 release];
                            [r27 release];
                            [r24 release];
                            r24 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x40)) retain];
                            r8 = 0x1039c3000;
                            objc_msgSend(CMessageMgr, *(int32_t *)(r31 + 0x38));
                            r27 = [objc_msgSend(r24, *(int32_t *)(r31 + 0x30)) retain];
                            r0 = [r20 GetContact];
                            r0 = [r0 retain];
                            r28 = r0;
                            r0 = [r0 m_nsUsrName];
                            r29 = r29;
                            r19 = [r0 retain];
                            r1 = *(int32_t *)(r31 + 0x28);
                            objc_msgSend(r27, r1);
                            [r19 release];
                            [r28 release];
                            [r27 release];
                            [r24 release];
                            r0 = [r22 release];
                            r23 = r23 + 0x1;
                    } while (r23 < r21);
                    asm{ ldp        x1, x0, [sp, #0x10] };
                    r21 = objc_msgSend(r0, r1);
            } while (r21 != 0x0);
    }
    r19 = *(int32_t *)(r31 + 0x18);
    [r19 release];
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (**(int32_t *)__stack_chk_guard == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)JumpToViewStreamVideo:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    0x0 = 0x0 - 0x30;
    r23 = self;
    r21 = [arg2 retain];
    if (r21 != 0x0) {
            r22 = @selector(messageWrap);
            r0 = [r21 messageWrap];
            r29 = 0x60;
            r0 = [r0 retain];
            r20 = r0;
            [r0 release];
            if (r20 != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xdbc] };
                    r25 = r23 + 0x1039e8000;
                    r0 = *(int32_t *)r25;
                    if (r0 == 0x0) {
                            r8 = [DeviceInfo isiOS9plus];
                            r0 = MMUIWindow;
                            r1 = @selector(alloc);
                            if ((r8 & 0x1 << 0x0) != 0x0) {
                                    r0 = [r0 alloc];
                                    r0 = [r0 init];
                            }
                            else {
                                    r20 = [r0 alloc];
                                    [UiUtil screenWidthCurOri];
                                    [UiUtil screenHeightCurOri];
                                    asm{ movi.16b   v0, #0x0 };
                                    asm{ movi.16b   v1, #0x0 };
                                    r0 = [r20 initWithFrame:r2];
                            }
                            r8 = *(int32_t *)r25;
                            *(int32_t *)r25 = r0;
                            [r8 release];
                            r0 = *(int32_t *)r25;
                            r2 = 0x1;
                            [r0 setUserInteractionEnabled:r2];
                            r0 = *(int32_t *)r25;
                    }
                    r19 = 0x1039c3000;
                    asm{ movz       w2, #0x5 };
                    [r0 setMmWindowLevel:r2];
                    asm{ ldrsw      x19, [x8, #0xdc0] };
                    r24 = [r21 retain];
                    r0 = *(int32_t *)(r23 + r19);
                    *(int32_t *)(r23 + r19) = r24;
                    [r0 release];
                    *(int32_t *)(r31 + 0x20) = @selector(alloc);
                    r0 = [WCNetworkMediaStreamVideoInfo alloc];
                    r20 = [r0 init];
                    asm{ stp        x25, x23, [sp, #0x10] };
                    *(int32_t *)(r31 + 0x28) = r21;
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r25 = r0;
                    r23 = @selector(m_nsStreamVideoUrl);
                    r0 = [r0 m_nsStreamVideoUrl];
                    r29 = r29;
                    r0 = [r0 retain];
                    r26 = r0;
                    if ([r0 length] != 0x0) {
                            r0 = [r24 messageWrap];
                            r0 = [r0 retain];
                            r27 = r0;
                            r0 = [r0 m_nsStreamVideoUrl];
                            r29 = r29;
                            r28 = [r0 retain];
                            asm{ movz       w19, #0x0 };
                            r21 = 0x1;
                    }
                    else {
                            r0 = [r24 messageWrap];
                            r0 = [r0 retain];
                            r23 = r0;
                            r0 = [r0 m_nsAppMediaUrl];
                            r29 = r29;
                            r28 = [r0 retain];
                            asm{ movz       w21, #0x0 };
                            r19 = 0x1;
                    }
                    [r20 setM_nsStreamVideoUrl:r28];
                    if (r19 != 0x0) {
                            [r28 release];
                            [r23 release];
                    }
                    if (r21 != 0x0) {
                            [r28 release];
                            [r27 release];
                    }
                    [r26 release];
                    [r25 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r25 = [[r0 m_nsStreamVideoTitle] retain];
                    [r20 setM_nsStreamVideoTitle:r25];
                    [r25 release];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r25 = [[r0 m_nsStreamVideoWording] retain];
                    [r20 setM_nsStreamVideoWording:r25];
                    [r25 release];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r25 = [[r0 m_nsStreamVideoWebUrl] retain];
                    [r20 setM_nsStreamVideoWebUrl:r25];
                    [r25 release];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r2 = [r0 m_uiStreamVideoTime];
                    [r20 setM_uiStreamVideoTime:r2];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r25 = [[r0 m_nsStreamVideoThumbUrl] retain];
                    [r20 setM_nsStreamVideoThumbUrl:r25];
                    [r25 release];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r25 = [[r0 m_nsStreamVideoPublishId] retain];
                    [r20 setM_nsStreamVideoPublishId:r25];
                    [r25 release];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r23 = r0;
                    r25 = [[r0 m_nsStreamVideoAdUxInfo] retain];
                    [r20 setM_nsStreamVideoAdUxInfo:r25];
                    [r25 release];
                    [r23 release];
                    r0 = [r24 messageWrap];
                    r0 = [r0 retain];
                    r22 = r0;
                    r0 = [r0 m_nsStatExtStr];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r20 setM_nsStatExtStr:r23];
                    [r23 release];
                    [r22 release];
                    r0 = objc_msgSend(WCNetworkMediaPlayer, *(int32_t *)(r31 + 0x20));
                    r22 = [r0 initWithTimeLineAdVideo:r20];
                    [r22 setM_delegate:*(int32_t *)(r31 + 0x18)];
                    r19 = *(int32_t *)(r31 + 0x10);
                    r0 = *(int32_t *)r19;
                    [r0 setRootViewController:r22];
                    r0 = *(int32_t *)r19;
                    [r0 makeKeyAndVisible];
                    [r22 release];
                    [r20 release];
                    r21 = *(int32_t *)(r31 + 0x28);
            }
            else {
                    *(int32_t *)r31 = @"JumpToViewStreamVideo failed. empty oNodeData or msgWrap";
                    asm{ movz       w6, #0x77d };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            }
    }
    else {
            *(int32_t *)r31 = @"JumpToViewStreamVideo failed. empty oNodeData or msgWrap";
            asm{ movz       w6, #0x77d };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [r21 release];
    return;
}

- (id)stopAtLastVideoFrameWhenPlayEnd
{
    return 0x1;
}

- (void)onClosePlayer
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x20, [x8, #0xdbc] };
    r0 = *(int32_t *)(r19 + r20);
    asm{ movz       w2, #0x0 };
    [r0 setMmWindowLevel:r2];
    r0 = *(int32_t *)(r19 + r20);
    asm{ movz       x2, #0x0 };
    [r0 setRootViewController:r2];
    r0 = *(int32_t *)(r19 + r20);
    [r0 setHidden:0x1];
    asm{ ldrsw      x24, [x8, #0xdc0] };
    r0 = *(int32_t *)(r19 + r24);
    r20 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r29 = 0x40;
    r0 = [r0 retain];
    r21 = r0;
    r22 = @selector(m_uiAppMsgInnerType);
    r0 = [r0 m_uiAppMsgInnerType];
    if (r0 != 0x4) {
            r0 = *(int32_t *)(r19 + r24);
            r0 = [r0 messageWrap];
            r29 = 0x40;
            r0 = [r0 retain];
            asm{ cset       w26, eq };
            [r0 release];
    }
    [r21 release];
    asm{ cinc       w21, w25, ne };
    asm{ movz       w8, #0x5 };
    asm{ cinc       w22, w8, ne };
    r20 = [[*(int32_t *)(r19 + r24) messageWrap] retain];
    asm{ ldrsw      x8, [x8, #0xdc4] };
    asm{ csel       w24, w8, w25, ne };
    r0 = [r19 GetContact];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_nsUsrName];
    r25 = [r0 retain];
    asm{ movz       w3, #0x0 };
    [LinkSpreadUtil adVideoClickFromMessage:r20 videoStatus:r3 sourceType:STK2 actionType:STK1 destination:STK0 chatUserName:STK-1];
    [r25 release];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r20 release];
    return;
}

- (void)jumpToDetail:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r19 = [arg2 retain];
    asm{ stp        x8, x19, [sp] };
    asm{ movz       w6, #0x7bd };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:"WC" errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r21 = [MMWebViewController alloc];
    r22 = [[NSURL URLWithString:r19] retain];
    asm{ movz       w3, #0x0 };
    asm{ movz       x4, #0x0 };
    r21 = [r21 initWithURL:r22 presentModal:"WC" extraInfo:STK-1];
    [r22 release];
    r0 = [self navigationController];
    r0 = [r0 retain];
    r22 = r0;
    [r0 PushViewController:r21 animated:0x1];
    [r22 release];
    [r21 release];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)onClosePlayerForViewDetail:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xdc4] };
    *(int8_t *)(r20 + 0x1039e8000) = 0x1;
    [r20 onClosePlayer];
    [r20 safePerformSelector:@selector(jumpToDetail:) withObject:r19 afterDelay:STK-1];
    asm{ ldrsw      x25, [x8, #0xdc0] };
    r0 = *(int32_t *)(r20 + r25);
    r21 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 m_nsStreamVideoUrl];
    r0 = [r0 retain];
    r24 = [r0 length];
    [r0 release];
    [r22 release];
    if (r24 != 0x0) {
            r0 = *(int32_t *)(r20 + r25);
            r0 = [r0 messageWrap];
            r29 = 0x40;
            r0 = [r0 retain];
            r22 = r0;
            r23 = @selector(m_uiAppMsgInnerType);
            if ([r0 m_uiAppMsgInnerType] == 0x4) {
                    [r22 release];
                    r22 = 0x2;
            }
            else {
                    r0 = *(int32_t *)(r20 + r25);
                    r0 = [r0 messageWrap];
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = [r0 m_uiAppMsgInnerType];
                    [r0 release];
                    [r22 release];
                    if (r23 == 0x6) {
                            r22 = 0x2;
                    }
                    else {
                            r22 = 0x1;
                    }
            }
            r21 = [[*(int32_t *)(r20 + r25) messageWrap] retain];
            r0 = [r20 GetContact];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 m_nsUsrName];
            r24 = [r0 retain];
            [LinkSpreadUtil adVideoClickFromMessage:r21 videoStatus:0x3 sourceType:STK2 actionType:STK1 destination:STK0 chatUserName:STK-1];
            [r24 release];
            r0 = r20;
    }
    else {
            r21 = [[*(int32_t *)(r20 + r25) messageWrap] retain];
            r0 = [r20 GetContact];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 m_nsUsrName];
            r20 = [r0 retain];
            [LinkSpreadUtil adVideoClickFromMessage:r21 videoStatus:0x3 sourceType:STK2 actionType:STK1 destination:STK0 chatUserName:STK-1];
            [r20 release];
            r0 = r23;
    }
    [r0 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onClickFavVideoMenu
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r23 = self;
    asm{ ldrsw      x27, [x8, #0xdc0] };
    r0 = *(int32_t *)(r23 + r27);
    r24 = @selector(messageWrap);
    r0 = [r0 messageWrap];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 release];
    if (r19 != 0x0) {
            r0 = *(int32_t *)(r23 + r27);
            r0 = [r0 messageWrap];
            r0 = [r0 retain];
            r19 = r0;
            [r0 ChangeForDisplay];
            r0 = [FavoritesUtil ConvertVideoMsg2FavItem:r19];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 dataList];
            r0 = [r0 retain];
            r21 = [[r0 lastObject] retain];
            [r0 release];
            r22 = [[r19 m_nsThumbUrl] retain];
            [r21 setCdnThumbUrl:r22];
            [r22 release];
            r0 = [FavStreamVideoItem alloc];
            r22 = [r0 init];
            r26 = @selector(m_nsStreamVideoUrl);
            r0 = [r19 m_nsStreamVideoUrl];
            r29 = 0x50;
            r0 = [r0 retain];
            r25 = r0;
            if ([r0 length] != 0x0) {
                    r0 = [r19 m_nsStreamVideoUrl];
                    *(int32_t *)(r31 + 0x8) = r20;
                    r29 = r29;
                    r26 = [r0 retain];
                    asm{ movz       w20, #0x0 };
            }
            else {
                    *(int32_t *)(r31 + 0x8) = r20;
                    r0 = [r19 m_nsAppMediaUrl];
                    r29 = r29;
                    r26 = [r0 retain];
                    asm{ movz       w28, #0x0 };
                    r20 = 0x1;
            }
            [r22 setStreamVideoUrl:r26];
            if (r20 != 0x0) {
                    [r26 release];
            }
            if (0x1 != 0x0) {
                    [r26 release];
            }
            [r25 release];
            r20 = *(int32_t *)(r31 + 0x8);
            r25 = [[r19 m_nsStreamVideoTitle] retain];
            [r22 setStreamVideoTitle:r25];
            [r25 release];
            r25 = [[r19 m_nsStreamVideoWording] retain];
            [r22 setStreamVideoWording:r25];
            [r25 release];
            r25 = [[r19 m_nsStreamVideoWebUrl] retain];
            [r22 setStreamVideoWebUrl:r25];
            [r25 release];
            r2 = [r19 m_uiStreamVideoTime];
            [r22 setUiStreamVideoTime:r2];
            r25 = [[r19 m_nsStreamVideoThumbUrl] retain];
            [r22 setStreamVideoThumbUrl:r25];
            [r25 release];
            r25 = [[r19 m_nsStreamVideoPublishId] retain];
            [r22 setStreamVideoPublishId:r25];
            [r25 release];
            r25 = [[r19 m_nsStreamVideoAdUxInfo] retain];
            [r22 setStreamVideoAdUxInfo:r25];
            [r25 release];
            [r21 setStreamVideoItem:r22];
            r25 = [[r19 m_nsStatExtStr] retain];
            [r21 setStatExtStr:r25];
            [r25 release];
            r0 = [FavAddItemHelper getFavAddHelper];
            r0 = [r0 retain];
            r25 = r0;
            [r0 addFavItem:r20];
            [r25 release];
            r24 = [[*(int32_t *)(r23 + r27) messageWrap] retain];
            r0 = [r23 GetContact];
            r0 = [r0 retain];
            r26 = r0;
            r23 = [[r0 m_nsUsrName] retain];
            asm{ movz       x7, #0x0 };
            [LinkSpreadUtil adVideoSpreadFromMessage:r24 videoStatus:0x3 sourceType:STK2 actionType:STK1 chatUserName:STK0 shareToChatUserName:STK-1];
            [r23 release];
            [r26 release];
            [r24 release];
            [r22 release];
            [r21 release];
            [r20 release];
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r19 release];
    }
    else {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    return;
}

- (void)onShareVideoToFriend:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r0 = [arg2 retain];
    r19 = r0;
    r24 = [[r0 m_nsUsrName] retain];
    r22 = [LinkSpreadUtil getActionTypeWithShareToUserName:r24];
    [r24 release];
    asm{ ldrsw      x8, [x8, #0xdc0] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r20 = [[r0 messageWrap] retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r23 = r0;
    r25 = [[r0 m_nsUsrName] retain];
    r0 = [r19 m_nsUsrName];
    r21 = [r0 retain];
    [LinkSpreadUtil adVideoSpreadFromMessage:r20 videoStatus:0x3 sourceType:STK2 actionType:STK1 chatUserName:STK0 shareToChatUserName:STK-1];
    [r21 release];
    [r25 release];
    [r23 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onShareVideoToTimeline:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xdc0] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r19 = [[r0 messageWrap] retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_nsUsrName];
    r22 = [r0 retain];
    asm{ movz       x7, #0x0 };
    [LinkSpreadUtil adVideoSpreadFromMessage:r19 videoStatus:0x3 sourceType:STK2 actionType:STK1 chatUserName:STK0 shareToChatUserName:STK-1];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)onReceiveSecurityBannerMsg:(id)arg2 withWording:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [arg2 retain];
    r0 = [r20 GetContact];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_nsUsrName];
    r0 = [r0 retain];
    r23 = [r0 isEqualToString:r19];
    [r0 release];
    [r21 release];
    if ((r23 & 0x1 << 0x0) != 0x0) {
            [r20 setSecurityTipShow:0x1];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)checkTips:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = arg2;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r22 = [r0 ShouldShowSearchBar];
    r0 = [r0 release];
    if ((r22 & 0x1 << 0x0) != 0x0) goto loc_101d11ef4;
    goto loc_101d11e8c;

loc_101d11ef4:
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;

loc_101d11e8c:
    if ((r20 & 0x1 << 0x0) == 0x0) goto loc_101d11f04;
    goto loc_101d11e90;

loc_101d11f04:
    asm{ movz       w2, #0x0 };
    [r19 checkShowSecurityBannerTip:r2];
    asm{ movz       w2, #0x0 };
    [r19 showAddFriendTip:r2];
    r1 = @selector(checkShowRecommandFriendTip:);
    asm{ movz       w2, #0x0 };

loc_101d11f7c:
    [r19 checkShowRecommandFriendTip:r2];

loc_101d11f84:
    asm{ ldrsw      x8, [x8, #0xdc8] };

loc_101d11f90:
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 updateFirstUnReadButtonOnShowBanner:r2];

loc_101d11e90:
    asm{ ldrsw      x8, [x8, #0xdcc] };
    r2 = *(int8_t *)(r19 + 0x1039e8000);
    [r19 checkShowSecurityBannerTip:r2];
    asm{ ldrsw      x20, [x8, #0xdd0] };
    if (*(int8_t *)(r19 + r20) == 0x0) goto loc_101d11f3c;
    goto loc_101d11ebc;

loc_101d11f3c:
    asm{ movz       w2, #0x0 };
    [r19 showAddFriendTip:r2];
    asm{ ldrsw      x8, [x8, #0xdb8] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    if ((r0 != 0x0) && ([r0 isHidden] == 0x0)) goto loc_101d11f84;
    r1 = @selector(checkShowRecommandFriendTip:);
    r2 = 0x1;
    goto loc_101d11f7c;

loc_101d11ebc:
    asm{ ldrsw      x8, [x8, #0xdb4] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    if (r0 == 0x0) goto loc_101d11edc;
    goto loc_101d11ecc;

loc_101d11edc:
    asm{ ldrsw      x8, [x8, #0xd90] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) goto loc_101d11fac;
    goto loc_101d11eec;

loc_101d11fac:
    r2 = 0x1;
    [r19 showAddFriendTip:r2];
    asm{ ldrsw      x20, [x8, #0xdb8] };
    r0 = *(int32_t *)(r19 + r20);
    if ((r0 == 0x0) || ([r0 isHidden] != 0x0)) {
            r2 = 0x1;
            [r19 checkShowRecommandFriendTip:r2];
    }
    r0 = *(int32_t *)(r19 + r20);
    [r0 height];
    goto loc_101d11f90;

loc_101d11eec:
    if (*(int8_t *)(r19 + r20) == 0x0) goto loc_101d11f3c;
    goto loc_101d11ef4;

loc_101d11ecc:
    r0 = [r0 isHidden];
    if (r0 == 0x0) goto loc_101d11eec;
    goto loc_101d11edc;
}

- (void)checkShowRecommandFriendTip:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r19 = self;
    if ((arg2 & 0x1 << 0x0) != 0x0) {
            r25 = [[MMServiceCenter defaultCenter] retain];
            r23 = @selector(class);
            [BannerToastMgr class];
            r24 = @selector(getService:);
            r26 = [[r25 getService:r2] retain];
            r20 = @selector(GetContact);
            r0 = [r19 GetContact];
            *(int32_t *)(r31 + 0x8) = @selector(defaultCenter);
            r0 = [r0 retain];
            r27 = r0;
            r21 = @selector(m_nsUsrName);
            r0 = [r0 m_nsUsrName];
            r29 = 0x50;
            r22 = [r0 retain];
            r2 = r22;
            r28 = [r26 shouldRecommandFriendToUser:r2];
            [r22 release];
            [r27 release];
            [r26 release];
            [r25 release];
            asm{ ldrsw      x25, [x8, #0xdb0] };
            r22 = r19 + r25;
            r0 = *(int32_t *)r22;
            if (r28 != 0x0) {
                    if (r0 == 0x0) {
                            r0 = [r19 GetContact];
                            r0 = [r0 retain];
                            *(int32_t *)r31 = r0;
                            r26 = [[r0 m_nsUsrName] retain];
                            r0 = [r19 GetContact];
                            r0 = [r0 retain];
                            r27 = r0;
                            r25 = [[r0 getContactDisplayName] retain];
                            r2 = r19;
                            r0 = [TipsView showChatRecommandFriendTipWithDelegate:r2 user:r26 displayName:STK-1];
                            r29 = r29;
                            r0 = [r0 retain];
                            r8 = *(int32_t *)r22;
                            *(int32_t *)r22 = r0;
                            [r8 release];
                            [r25 release];
                            [r27 release];
                            [r26 release];
                            r0 = *(int32_t *)r31;
                            [r0 release];
                            r0 = *(int32_t *)r22;
                            asm{ movz       w2, #0x2713 };
                            [r0 setTag:r2];
                            r0 = *(int32_t *)r22;
                    }
                    asm{ movz       w2, #0x0 };
                    [r0 setHidden:r2];
                    r0 = [r19 view];
                    r0 = [r0 retain];
                    r25 = r0;
                    r2 = *(int32_t *)r22;
                    [r0 addSubview:r2];
                    [r25 release];
                    r22 = *(int32_t *)r22;
                    [r19 getContentViewY];
                    [r22 setY:r2];
                    r22 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x8)) retain];
                    [BannerToastMgr class];
                    r23 = [[r22 getService:r2] retain];
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
                    r24 = r0;
                    r0 = [r0 GetContact];
                    r0 = [r0 retain];
                    r20 = r0;
                    r21 = [[r0 m_nsUsrName] retain];
                    asm{ movz       w4, #0x0 };
                    [r23 logRecommandFriendBanner:r21 opType:0x1 recCount:STK-1];
                    [r21 release];
                    [r20 release];
                    [r24 release];
                    [r23 release];
                    0x0 = r29 - 0x50;
                    asm{ ldp        x29, x30, [sp, #0x50] };
                    asm{ ldp        x20, x19, [sp, #0x40] };
                    asm{ ldp        x22, x21, [sp, #0x30] };
                    asm{ ldp        x24, x23, [sp, #0x20] };
                    asm{ ldp        x26, x25, [sp, #0x10] };
                    asm{ ldp        x28, x27, [sp], #0x60 };
                    r0 = [r22 release];
            }
            else {
                    if (r0 != 0x0) {
                            r0 = [r0 isHidden];
                            if ((r0 & 0x1 << 0x0) != 0x0) {
                                    0x0 = r29 - 0x50;
                                    asm{ ldp        x29, x30, [sp, #0x50] };
                                    asm{ ldp        x20, x19, [sp, #0x40] };
                                    asm{ ldp        x22, x21, [sp, #0x30] };
                                    asm{ ldp        x24, x23, [sp, #0x20] };
                                    asm{ ldp        x26, x25, [sp, #0x10] };
                                    asm{ ldp        x28, x27, [sp], #0x60 };
                                    return;
                            }
                            else {
                                    r0 = *(int32_t *)(r19 + r25);
                                    0x0 = r29 - 0x50;
                                    asm{ ldp        x29, x30, [sp, #0x50] };
                                    asm{ ldp        x20, x19, [sp, #0x40] };
                                    asm{ ldp        x22, x21, [sp, #0x30] };
                                    asm{ ldp        x24, x23, [sp, #0x20] };
                                    asm{ ldp        x26, x25, [sp, #0x10] };
                                    asm{ ldp        x28, x27, [sp], #0x60 };
                                    r0 = [r0 setHidden:0x1];
                            }
                    }
                    else {
                            0x0 = r29 - 0x50;
                            asm{ ldp        x29, x30, [sp, #0x50] };
                            asm{ ldp        x20, x19, [sp, #0x40] };
                            asm{ ldp        x22, x21, [sp, #0x30] };
                            asm{ ldp        x24, x23, [sp, #0x20] };
                            asm{ ldp        x26, x25, [sp, #0x10] };
                            asm{ ldp        x28, x27, [sp], #0x60 };
                            return;
                    }
            }
    }
    else {
            asm{ ldrsw      x25, [x8, #0xdb0] };
            r0 = *(int32_t *)(r19 + r25);
            if (r0 != 0x0) {
                    r0 = [r0 isHidden];
                    if ((r0 & 0x1 << 0x0) != 0x0) {
                            0x0 = r29 - 0x50;
                            asm{ ldp        x29, x30, [sp, #0x50] };
                            asm{ ldp        x20, x19, [sp, #0x40] };
                            asm{ ldp        x22, x21, [sp, #0x30] };
                            asm{ ldp        x24, x23, [sp, #0x20] };
                            asm{ ldp        x26, x25, [sp, #0x10] };
                            asm{ ldp        x28, x27, [sp], #0x60 };
                            return;
                    }
                    else {
                            r0 = *(int32_t *)(r19 + r25);
                            0x0 = r29 - 0x50;
                            asm{ ldp        x29, x30, [sp, #0x50] };
                            asm{ ldp        x20, x19, [sp, #0x40] };
                            asm{ ldp        x22, x21, [sp, #0x30] };
                            asm{ ldp        x24, x23, [sp, #0x20] };
                            asm{ ldp        x26, x25, [sp, #0x10] };
                            asm{ ldp        x28, x27, [sp], #0x60 };
                            r0 = [r0 setHidden:0x1];
                    }
            }
            else {
                    0x0 = r29 - 0x50;
                    asm{ ldp        x29, x30, [sp, #0x50] };
                    asm{ ldp        x20, x19, [sp, #0x40] };
                    asm{ ldp        x22, x21, [sp, #0x30] };
                    asm{ ldp        x24, x23, [sp, #0x20] };
                    asm{ ldp        x26, x25, [sp, #0x10] };
                    asm{ ldp        x28, x27, [sp], #0x60 };
                    return;
            }
    }
    return;
}

- (void)checkShowSecurityBannerTip:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    r19 = self;
    if (arg2 != 0x0) {
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [BannerToastMgr class];
            r21 = [[r20 getService:r2] retain];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 m_nsUsrName];
            r29 = 0x30;
            r24 = [r0 retain];
            r2 = r24;
            r22 = [r21 shouldShowSecurityBannerToUser:r2];
            [r24 release];
            [r23 release];
            [r21 release];
            [r20 release];
    }
    else {
            asm{ movz       w22, #0x0 };
    }
    r0 = [UIApplication sharedApplication];
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 statusBarOrientation] - 0x3;
    [r0 release];
    if (r21 <= 0x1) {
            r8 = r22 & [DeviceInfo isiPadUniversal];
            asm{ ldrsw      x21, [x9, #0xdb4] };
            r0 = *(int32_t *)(r19 + r21);
            if ((r8 & 0x1 << 0x0) == 0x0) {
                    if (r0 != 0x0) {
                            [r0 setHidden:0x1];
                            r0 = *(int32_t *)(r19 + r21);
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r0 removeFromSuperview];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ movz       w2, #0x0 };
                    [r0 setHidden:r2];
                    r0 = [r19 view];
                    r0 = [r0 retain];
                    r20 = r0;
                    r2 = *(int32_t *)(r19 + r21);
                    [r0 addSubview:r2];
                    asm{ sxtw       x21, w21 };
                    [r20 release];
                    r20 = *(int32_t *)(r19 + r21);
                    [r19 getContentViewY];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 setY:r2];
            }
    }
    else {
            asm{ ldrsw      x21, [x8, #0xdb4] };
            r0 = *(int32_t *)(r19 + r21);
            if (r22 != 0x0) {
                    asm{ movz       w2, #0x0 };
                    [r0 setHidden:r2];
                    r0 = [r19 view];
                    r0 = [r0 retain];
                    r20 = r0;
                    r2 = *(int32_t *)(r19 + r21);
                    [r0 addSubview:r2];
                    asm{ sxtw       x21, w21 };
                    [r20 release];
                    r20 = *(int32_t *)(r19 + r21);
                    [r19 getContentViewY];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 setY:r2];
            }
            else {
                    if (r0 != 0x0) {
                            [r0 setHidden:0x1];
                            r0 = *(int32_t *)(r19 + r21);
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r0 removeFromSuperview];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
    }
    return;
}

- (id)getTipsHeight
{
    asm{ stp        d9, d8, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    [self getAddFriendTipHeight];
    r0 = [self getSecurityBannerTipHeight];
    asm{ fcmp       d8, d0 };
    asm{ fcsel      d0, d8, d0, ge };
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x30 };
    return r0;
}

- (id)getAddFriendTipHeight
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    asm{ ldrsw      x20, [x8, #0xdb8] };
    r0 = *(int32_t *)(r19 + r20);
    if (r0 != 0x0) {
            r0 = [r0 isHidden];
            if ((r0 & 0x1 << 0x0) == 0x0) {
                    asm{ ldrsw      x8, [x8, #0xdd0] };
                    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
                            r0 = *(int32_t *)(r19 + r20);
                            asm{ ldp        x29, x30, [sp, #0x10] };
                            asm{ ldp        x20, x19, [sp], #0x20 };
                            r0 = [r0 height];
                    }
                    else {
                            asm{ movi.16b   v0, #0x0 };
                            asm{ ldp        x29, x30, [sp, #0x10] };
                            asm{ ldp        x20, x19, [sp], #0x20 };
                            return r0;
                    }
            }
            else {
                    asm{ movi.16b   v0, #0x0 };
                    asm{ ldp        x29, x30, [sp, #0x10] };
                    asm{ ldp        x20, x19, [sp], #0x20 };
                    return r0;
            }
    }
    else {
            asm{ movi.16b   v0, #0x0 };
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            return r0;
    }
    return r0;
}

- (id)getSecurityBannerTipHeight
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    asm{ ldrsw      x20, [x8, #0xdb4] };
    r0 = *(int32_t *)(r19 + r20);
    if (r0 != 0x0) {
            r0 = [r0 isHidden];
            if ((r0 & 0x1 << 0x0) == 0x0) {
                    asm{ ldrsw      x8, [x8, #0xdcc] };
                    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
                            r0 = *(int32_t *)(r19 + r20);
                            asm{ ldp        x29, x30, [sp, #0x10] };
                            asm{ ldp        x20, x19, [sp], #0x20 };
                            r0 = [r0 height];
                    }
                    else {
                            asm{ movi.16b   v0, #0x0 };
                            asm{ ldp        x29, x30, [sp, #0x10] };
                            asm{ ldp        x20, x19, [sp], #0x20 };
                            return r0;
                    }
            }
            else {
                    asm{ movi.16b   v0, #0x0 };
                    asm{ ldp        x29, x30, [sp, #0x10] };
                    asm{ ldp        x20, x19, [sp], #0x20 };
                    return r0;
            }
    }
    else {
            asm{ movi.16b   v0, #0x0 };
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            return r0;
    }
    return r0;
}

- (void)showAddFriendTip:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = arg2;
    r20 = self;
    r0 = [UIApplication sharedApplication];
    r0 = [r0 retain];
    r21 = r0;
    r22 = [r0 statusBarOrientation] - 0x3;
    [r21 release];
    if (r22 <= 0x1) {
            r0 = [DeviceInfo isiPadUniversal];
            asm{ ldrsw      x21, [x8, #0xdb8] };
            r8 = r20 + r21;
            if ((r0 == 0x0) || ((r19 & 0x1 << 0x0) == 0x0)) {
                    r0 = *(int32_t *)r8;
                    if (r0 != 0x0) {
                            [r0 setHidden:0x1];
                            r0 = *(int32_t *)(r20 + r21);
                            0x0 = 0x30 - 0x30;
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r0 removeFromSuperview];
                    }
                    else {
                            0x0 = 0x30 - 0x30;
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    r0 = *(int32_t *)r8;
                    r19 = [[r0 usrData] retain];
                    r0 = *(int32_t *)(r20 + r21);
                    asm{ movz       w2, #0x0 };
                    [r0 setHidden:r2];
                    r0 = [r20 view];
                    asm{ sxtw       x22, w21 };
                    r0 = [r0 retain];
                    r21 = r0;
                    r2 = *(int32_t *)(r20 + r22);
                    [r0 addSubview:r2];
                    [r21 release];
                    r21 = *(int32_t *)(r20 + r22);
                    [r20 getContentViewY];
                    [r21 setY:r2];
                    r21 = *(int32_t *)(r20 + r22);
                    r22 = [[r19 getContactDisplayName] retain];
                    [r21 setFriendName:r22];
                    [r22 release];
                    r21 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [BannerToastMgr class];
                    r22 = [[r21 getService:r2] retain];
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                    r20 = r0;
                    r0 = [r0 GetContact];
                    r0 = [r0 retain];
                    r23 = r0;
                    r24 = [[r0 m_nsUsrName] retain];
                    [r22 logUniDirectionFriendBanner:r24 opType:0x1];
                    [r24 release];
                    [r23 release];
                    [r20 release];
                    [r22 release];
                    [r21 release];
                    0x0 = 0x30 - 0x30;
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r19 release];
            }
    }
    else {
            asm{ ldrsw      x21, [x8, #0xdb8] };
            r8 = r20 + r21;
            if (r19 != 0x0) {
                    r0 = *(int32_t *)r8;
                    r19 = [[r0 usrData] retain];
                    r0 = *(int32_t *)(r20 + r21);
                    asm{ movz       w2, #0x0 };
                    [r0 setHidden:r2];
                    r0 = [r20 view];
                    asm{ sxtw       x22, w21 };
                    r0 = [r0 retain];
                    r21 = r0;
                    r2 = *(int32_t *)(r20 + r22);
                    [r0 addSubview:r2];
                    [r21 release];
                    r21 = *(int32_t *)(r20 + r22);
                    [r20 getContentViewY];
                    [r21 setY:r2];
                    r21 = *(int32_t *)(r20 + r22);
                    r22 = [[r19 getContactDisplayName] retain];
                    [r21 setFriendName:r22];
                    [r22 release];
                    r21 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [BannerToastMgr class];
                    r22 = [[r21 getService:r2] retain];
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                    r20 = r0;
                    r0 = [r0 GetContact];
                    r0 = [r0 retain];
                    r23 = r0;
                    r24 = [[r0 m_nsUsrName] retain];
                    [r22 logUniDirectionFriendBanner:r24 opType:0x1];
                    [r24 release];
                    [r23 release];
                    [r20 release];
                    [r22 release];
                    [r21 release];
                    0x0 = 0x30 - 0x30;
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r19 release];
            }
            else {
                    r0 = *(int32_t *)r8;
                    if (r0 != 0x0) {
                            [r0 setHidden:0x1];
                            r0 = *(int32_t *)(r20 + r21);
                            0x0 = 0x30 - 0x30;
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r0 removeFromSuperview];
                    }
                    else {
                            0x0 = 0x30 - 0x30;
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
    }
    return;
}

- (void)setAddFriendTipShow:(id)arg2 contact:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [arg3 retain];
    asm{ ldrsw      x8, [x8, #0xdd0] };
    *(int8_t *)(r20 + 0x1039e8000) = arg2;
    if (arg2 != 0x0) {
            asm{ ldrsw      x23, [x8, #0xdb8] };
            r0 = *(int32_t *)(r20 + r23);
            [r0 removeFromSuperview];
            r21 = [[r19 m_nsUsrName] retain];
            r3 = r21;
            r0 = [TipsView showChatAddFriendTipWithDelegate:r20 user:r3];
            r0 = [r0 retain];
            r8 = *(int32_t *)(r20 + r23);
            *(int32_t *)(r20 + r23) = r0;
            [r8 release];
            [r21 release];
            r0 = *(int32_t *)(r20 + r23);
            asm{ movz       w2, #0x2711 };
            [r0 setTag:r20];
            r0 = *(int32_t *)(r20 + r23);
            [r0 setUsrData:r19];
            r0 = *(int32_t *)(r20 + r23);
            [r0 setAutoresizingMask:0x2];
    }
    [r20 checkTips:0x1];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r20 + 0x1039e8000);
    asm{ movi.16b   v0, #0x0 };
    [r20 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)setSecurityTipShow:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xdcc] };
    *(int8_t *)(r19 + 0x1039e8000) = arg2;
    if (arg2 != 0x0) {
            asm{ ldrsw      x25, [x8, #0xdb4] };
            r0 = *(int32_t *)(r19 + r25);
            [r0 removeFromSuperview];
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [BannerToastMgr class];
            r21 = [[r20 getService:r2] retain];
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r23 = r0;
            r24 = [[r0 m_nsUsrName] retain];
            r22 = [[r21 getSecurityBannerWording:r24] retain];
            [r24 release];
            [r23 release];
            [r21 release];
            [r20 release];
            r3 = r22;
            r0 = [TipsView showSecurityBannerTipWithDelegate:r19 displayWord:r3];
            r0 = [r0 retain];
            r8 = *(int32_t *)(r19 + r25);
            *(int32_t *)(r19 + r25) = r0;
            [r8 release];
            r0 = *(int32_t *)(r19 + r25);
            asm{ movz       w2, #0x2714 };
            [r0 setTag:r19];
            r0 = *(int32_t *)(r19 + r25);
            [r0 setAutoresizingMask:0x2];
            [r22 release];
    }
    [r19 checkTips:0x1];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r19 + 0x1039e8000);
    asm{ movi.16b   v0, #0x0 };
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    return;
}

- (void)SetMsgPlayed:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(SetMsgPlayed:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 SetMsgPlayed:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)BeginPlaying:(id)arg2 FromTouch:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r22 = r3;
    r21 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r21 + 0x1039e8000;
    r23 = objc_loadWeakRetained(r20);
    if (r23 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r24 = @selector(StartPlaying:FromTouch:);
            r26 = [r0 respondsToSelector:r24];
            [r0 release];
            [r23 release];
            if (r26 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r23 = r0;
                    [r0 StartPlaying:r2 FromTouch:r1];
                    [r23 release];
            }
    }
    [r21 showPlayVoiceTipsIfNeed];
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onClickMsg:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onClickMsg:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)showPlayVoiceTipsIfNeed
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r0 = [VolumeCheckHelper getVolumeCheckHelper];
    r0 = [r0 retain];
    r21 = r0;
    [r0 checkVolume];
    [r21 release];
    r20 = @selector(getMainSettingExt);
    r0 = [SettingUtil getMainSettingExt];
    r0 = [r0 retain];
    r22 = [r0 m_isForceEarpieceMode];
    [r0 release];
    if (r22 != 0x0) {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            r0 = [TipsView showEarModeTips:r19];
    }
    else {
            r0 = *(int32_t *)(0x1039c3000 + 0x370);
            r0 = [r0 getMainSettingExt];
            r29 = 0x30;
            r0 = [r0 retain];
            r21 = @selector(m_iPlayTipsCounter);
            r23 = [r0 m_iPlayTipsCounter];
            r0 = [r0 release];
            if (r23 <= 0x2) {
                    [r19 ShowEarTips];
                    r0 = *(int32_t *)(0x1039c3000 + 0x370);
                    r0 = [r0 getMainSettingExt];
                    r0 = [r0 retain];
                    r19 = r0;
                    r2 = [r0 m_iPlayTipsCounter] + 0x1;
                    [r19 setM_iPlayTipsCounter:r2];
                    [r19 release];
                    r19 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [AccountStorageMgr class];
                    r0 = [r19 getService:r2];
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 SaveSettingExt];
                    [r21 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r19 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    return;
}

- (void)OnEndPlaying:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(OnVideoPlayEnd:isForceStop:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    asm{ movz       w3, #0x0 };
                    [r0 OnVideoPlayEnd:r2 isForceStop:r1];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)EndPlaying:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(StopPlaying:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 StopPlaying:r2];
                    [r21 release];
            }
    }
    r0 = [VolumeCheckHelper getVolumeCheckHelper];
    r0 = [r0 retain];
    r21 = r0;
    [r0 stopShowVolumeTipNeedDelay:0x1];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)StartPlayingNodeView:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r20 = arg2;
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [LazyExtensionAgent class];
    r25 = [[r19 getService:r2] retain];
    asm{ nop         };
    r21 = @selector(numberWithUnsignedInt:);
    r0 = [NSNumber numberWithUnsignedInt:r2];
    r27 = [r0 retain];
    [r25 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:@selector(onMessageStartPlaying) forKey:STK-1];
    [r27 release];
    [r25 release];
    [r19 release];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r22 getService:[MMExtensionCenter class]];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
    r29 = 0x50;
    r23 = [r0 retain];
    [r19 release];
    [r22 release];
    if (r23 != 0x0) {
            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
            r8 = 0x103953000;
            *(int32_t *)(r31 + 0x8) = r23;
            r0 = [r23 getKeyExtensionList:r19];
            r29 = 0x50;
            r20 = [r0 retain];
            [r19 release];
            asm{ movz       w8, #0x0 };
            r21 = @selector(count);
            asm{ nop         };
            r22 = @selector(objectAtIndex:);
            r23 = @selector(m_deleteMark);
            asm{ nop         };
            r24 = @selector(getObject);
            r25 = @selector(onMessageStartPlaying);
            r26 = @selector(respondsToSelector:);
            do {
                    r27 = r8;
                    if (r27 >= [r20 count]) {
                        break;
                    }
                    r0 = [r20 objectAtIndex:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r28 = r0;
                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                            r0 = [r28 getObject];
                            r29 = r29;
                            r0 = [r0 retain];
                            r19 = r0;
                            if ([r0 respondsToSelector:r2] != 0x0) {
                                    [r19 onMessageStartPlaying];
                            }
                            [r19 release];
                    }
                    [r28 release];
                    r8 = r27 + 0x1;
            } while (true);
            [r20 release];
            r23 = *(int32_t *)(r31 + 0x8);
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r23 release];
    return;
}

- (void)StopPlayingNodeView:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r21 = arg2;
    *(int32_t *)(r31 + 0x8) = self;
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [LazyExtensionAgent class];
    r19 = [[r20 getService:r2] retain];
    asm{ nop         };
    r22 = @selector(numberWithUnsignedInt:);
    r0 = [NSNumber numberWithUnsignedInt:r2];
    r27 = [r0 retain];
    [r19 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:@selector(onMessageStopPlaying) forKey:STK-1];
    [r27 release];
    [r19 release];
    [r20 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r19 getService:[MMExtensionCenter class]];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
    r29 = 0x50;
    r23 = [r0 retain];
    [r20 release];
    [r19 release];
    if (r23 != 0x0) {
            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
            r8 = 0x103953000;
            *(int32_t *)r31 = r23;
            r0 = [r23 getKeyExtensionList:r19];
            r29 = 0x50;
            r21 = [r0 retain];
            [r19 release];
            asm{ movz       w8, #0x0 };
            r22 = @selector(count);
            asm{ nop         };
            r23 = @selector(objectAtIndex:);
            r24 = @selector(m_deleteMark);
            asm{ nop         };
            r25 = @selector(getObject);
            r26 = @selector(onMessageStopPlaying);
            r27 = @selector(respondsToSelector:);
            do {
                    r28 = r8;
                    if (r28 >= [r21 count]) {
                        break;
                    }
                    r0 = [r21 objectAtIndex:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r19 = r0;
                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                            r0 = [r19 getObject];
                            r29 = r29;
                            r0 = [r0 retain];
                            r20 = r0;
                            if ([r0 respondsToSelector:r2] != 0x0) {
                                    [r20 onMessageStopPlaying];
                            }
                            [r20 release];
                    }
                    [r19 release];
                    r8 = r28 + 0x1;
            } while (true);
            [r21 release];
            r23 = *(int32_t *)r31;
    }
    [r23 release];
    r0 = *(int32_t *)(r31 + 0x8);
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r0 beginLockerTimer];
    return;
}

- (void)ShowEarBackTips
{
    r0 = [TipsView showEarBackTips:self];
    return;
}

- (void)ShowEarTips
{
    r0 = [TipsView showEarTips:self];
    return;
}

- (void)ShowVolumeTips
{
    r0 = [TipsView showVolumeTips:self];
    return;
}

- (id)GetMessagesWrapArray
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0xd0;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffffa8] };
    r0 = [NSMutableArray alloc];
    r19 = [r0 init];
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ stp        xzr, xzr, [sp, #0x8] };
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + r8);
    r0 = [r0 retain];
    r20 = r0;
    r22 = [r0 countByEnumeratingWithState:0x8 objects:0x48 count:STK-1];
    if (r22 != 0x0) {
            r28 = **(int32_t *)(r31 + 0x18);
            r21 = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x27, #0x0 };
                    r23 = @selector(modelType);
                    r24 = @selector(messageWrap);
                    r25 = @selector(addObject:);
                    do {
                            if (**(int32_t *)(r31 + 0x18) != r28) {
                                    objc_enumerationMutation(r20);
                            }
                            r8 = *(int32_t *)(r31 + 0x10);
                            r26 = *(int32_t *)(r8 + r27 * 0x8);
                            if ([r26 modelType] == 0x1) {
                                    r0 = [r26 messageWrap];
                                    r29 = r29;
                                    r26 = [r0 retain];
                                    [r19 addObject:r2];
                                    [r26 release];
                            }
                            r27 = r27 + 0x1;
                    } while (r27 < r22);
                    r22 = objc_msgSend(r20, r21);
            } while (r22 != 0x0);
    }
    [r20 release];
    r20 = objc_retainAutoreleaseReturnValue(r19);
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (**(int32_t *)__stack_chk_guard == r8) {
            r0 = r20;
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;
}

- (id)GetMessageNodeDataArray
{
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = objc_retainAutoreleaseReturnValue(r0);
    return r0;
}

- (id)getNodeRectInScreen:(id)arg2 
{
    asm{ stp        d11, d10, [sp, #0xffffffb0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r0 = [self findNodeViewByLocalId:arg2];
    r0 = [r0 retain];
    r19 = r0;
    [r0 layoutIfNeeded];
    r0 = [r19 displayViewForImageBrowser];
    r20 = [r0 retain];
    if (r20 != 0x0) {
            [r21 getVisibleRectInScreen:r20];
    }
    else {
            asm{ ldp        d8, d9, [x8] };
            asm{ ldp        d10, d11, [x8, #0x10] };
    }
    [r20 release];
    r0 = [r19 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x50 };
    return r0;
}

- (void)StopUploadVideo:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(StopUploadVideo:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 StopUploadVideo:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)StopDownloadVideo:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(StopDownloadVideo:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 StopDownloadVideo:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)StartUploadVideo:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(StartUploadVideo:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 StartUploadVideo:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)StartDownloadVideo:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(StartDownloadVideo:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 StartDownloadVideo:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)StartDownloadVideo:(id)arg2 DownloadMode:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = r3;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(StartDownloadVideo:DownloadMode:);
            r25 = [r0 respondsToSelector:r23];
            [r0 release];
            [r22 release];
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r21 = r0;
                    [r0 StartDownloadVideo:r2 DownloadMode:r1];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)StartDownloadShortVideo:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(StartDownloadShortVideo:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 StartDownloadShortVideo:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)revokeMsgByNodeView:(id)arg2 
{
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(RevokeMsg:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 RevokeMsg:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)onClickTranslateMsg:(id)arg2 translateInfo:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = [arg2 retain];
    r20 = [r3 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(onClickTranslateMsg:translateInfo:);
            r25 = [r0 respondsToSelector:r23];
            [r0 release];
            [r22 release];
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r22 = r0;
                    [r0 onClickTranslateMsg:r2 translateInfo:r1];
                    [r22 release];
            }
    }
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onClickVoiceTranslate:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onClickVoiceTranslate:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onClickVoiceTranslate:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)onClickFavMenu:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onClickFavMenu:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onClickFavMenu:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)onClickPlayMusicBtn:(id)arg2 isPlay:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = r3;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(onClickPlayMusicBtn:isPlay:);
            r25 = [r0 respondsToSelector:r23];
            [r0 release];
            [r22 release];
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r21 = r0;
                    [r0 onClickPlayMusicBtn:r2 isPlay:r1];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)shareMsgToOpenSDKByNodeView:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(shareDataToOpenSDK:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 shareDataToOpenSDK:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (id)isChatStatusNotifyOpen
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r19 = objc_loadWeakRetained(r21);
    if (r19 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r20 = r0;
            r22 = @selector(isChatStatusNotifyOpen);
            if ([r0 respondsToSelector:r22] != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r21 = [r0 isChatStatusNotifyOpen];
                    [r0 release];
            }
            else {
                    r21 = 0x1;
            }
            [r20 release];
    }
    else {
            r21 = 0x1;
    }
    [r19 release];
    r0 = r21;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return r0;
}

- (id)getLastSentMsg
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x30;
    r25 = self;
    r19 = 0x1039e8000;
    asm{ ldrsw      x8, [x19, #0xd70] };
    r0 = *(int32_t *)(r25 + r8);
    r20 = [r0 count] - 0x1;
    if ((r20 & 0x1 << 0x3f) != 0x0) goto loc_101d14c84;
    goto loc_101d14b1c;

loc_101d14c84:
    asm{ movz       x27, #0x0 };

loc_101d14c88:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r27 autorelease];
    return r0;

loc_101d14b1c:
    asm{ ldrsw      x19, [x19, #0xd70] };
    r21 = @selector(objectAtIndexedSubscript:);
    r22 = @selector(messageWrap);
    r23 = @selector(m_uiMessageType);
    *(int32_t *)(r31 + 0x20) = @selector(getMainSetting);
    *(int32_t *)(r31 + 0x18) = @selector(m_nsUsrName);
    *(int32_t *)(r31 + 0x10) = @selector(m_nsFromUsr);
    asm{ movz       w26, #0x2710 };
    r8 = @selector(isEqualToString:);
    *(int32_t *)(r31 + 0x8) = r8;

loc_101d14b6c:
    r0 = *(int32_t *)(r25 + r19);
    r0 = [r0 objectAtIndexedSubscript:r2];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 messageWrap];
    r29 = r29;
    r27 = [r0 retain];
    [r24 release];
    if ([r27 m_uiMessageType] == r26) goto loc_101d14c74;
    goto loc_101d14bb8;

loc_101d14c74:
    [r27 release];
    r20 = r20 - 0x1;
    if ((r20 & 0x1 << 0x3f) == 0x0) goto loc_101d14b6c;
    goto loc_101d14c84;

loc_101d14bb8:
    r0 = [r27 m_uiMessageType];
    asm{ movz       w8, #0x2712 };
    if (r0 == r8) goto loc_101d14c74;
    r8 = 0x1039c3000;
    r0 = objc_msgSend(SettingUtil, *(int32_t *)(r31 + 0x20));
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x28) = r0;
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
    r24 = r23;
    r23 = r22;
    r22 = r21;
    r21 = r19;
    r19 = r25;
    r25 = [r0 retain];
    r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0x10));
    r29 = r29;
    r26 = [r0 retain];
    r1 = *(int32_t *)(r31 + 0x8);
    r28 = objc_msgSend(r25, r1);
    [r26 release];
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x28);
    [r0 release];
    r25 = r19;
    r19 = r21;
    r21 = r22;
    r22 = r23;
    r23 = r24;
    asm{ movz       w26, #0x2710 };
    if ((r28 & 0x1 << 0x0) != 0x0) goto loc_101d14c88;
    goto loc_101d14c74;
}

- (id)isMsgLastSend:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    r0 = [self getLastSentMsg];
    r20 = [r0 retain];
    r21 = [r19 IsSameMsg:r20];
    [r20 release];
    [r19 release];
    r0 = r21;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (id)isMsgCanRevoke:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r19 = r0;
    r21 = @selector(GetContact);
    r0 = [r0 GetContact];
    r22 = [r0 retain];
    r2 = [CContact class];
    r23 = [r22 isKindOfClass:r2];
    [r22 release];
    [r19 release];
    if ((r23 & 0x1 << 0x0) == 0x0) goto loc_101d14ef0;
    goto loc_101d14e30;

loc_101d14ef0:
    asm{ movz       w20, #0x0 };

loc_101d14f4c:
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return r0;

loc_101d14e30:
    r0 = objc_loadWeakRetained(r20);
    r22 = r0;
    r0 = [r0 GetContact];
    r29 = 0x30;
    r19 = [r0 retain];
    [r22 release];
    r20 = @selector(isEqualToName:);
    if ((([r19 isEqualToName:r2] & 0x1 << 0x0) == 0x0) && (([r19 isBrandContact] & 0x1 << 0x0) == 0x0)) goto loc_101d14e8c;
    goto loc_101d14f40;

loc_101d14e8c:
    if (([r19 isEqualToName:r2] & 0x1 << 0x0) != 0x0) goto loc_101d14f40;
    goto loc_101d14ea4;

loc_101d14f40:
    asm{ movz       w20, #0x0 };

loc_101d14f44:
    [r19 release];
    goto loc_101d14f4c;

loc_101d14ea4:
    r20 = @selector(m_nsUsrName);
    r0 = [r19 m_nsUsrName];
    r29 = r29;
    r21 = [r0 retain];
    if ([PluginUtil isPluginUserName:r21] == 0x0) goto loc_101d14ef8;
    goto loc_101d14ee4;

loc_101d14ef8:
    r22 = *(int32_t *)(0x1039c3000 + 0x810);
    r0 = [r19 m_nsUsrName];
    r29 = r29;
    r23 = [r0 retain];
    r22 = [r22 isOfficialUserName:r23];
    [r23 release];
    [r21 release];
    if ((r22 & 0x1 << 0x0) != 0x0) {
            asm{ movz       w20, #0x0 };
    }
    else {
            r0 = [r19 m_nsUsrName];
            r22 = [r0 retain];
            r20 = [MMKernelUtil IsBottleContact:r22];
            [r22 release];
            r20 = r20 ^ 0x1;
    }
    goto loc_101d14f44;

loc_101d14ee4:
    [r21 release];
    goto loc_101d14f40;
}

- (void)deleteNode:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    if ([r0 m_uiAppMsgInnerType] == 0x3) {
            r21 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMMusicPlayerMgr class];
            r22 = [[r21 getService:r2] retain];
            r0 = [r19 m_uiMesLocalID];
            *(int32_t *)r31 = r0;
            r0 = [NSString stringWithFormat:@"msg_%tu", r3];
            r29 = 0x30;
            r23 = [r0 retain];
            [r22 stopWithMusicKey:r23];
            [r23 release];
            [r22 release];
            [r21 release];
    }
    if ([r19 m_uiMessageType] == 0x2f) {
            r21 = [[MMServiceCenter defaultCenter] retain];
            r2 = [CMessageMgr class];
            r22 = [[r21 getService:r2] retain];
            r0 = [r19 GetChatName];
            r29 = r29;
            r23 = [r0 retain];
            r3 = [r19 m_n64MesSvrID];
            [r22 StopDownloadEmoticonMsgWrapByChatName:r23 n64SvrID:r3];
            [r23 release];
            [r22 release];
            [r21 release];
    }
    [r20 deleteNode:r19 withDB:0x1 animated:STK-1];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r20 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onDeleteMsg:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onDeleteMsg:r2];
                    [r21 release];
            }
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)longPressOnHeadImage:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    r22 = @selector(toolView);
    r0 = [r20 toolView];
    r29 = 0x40;
    r21 = [r0 retain];
    if (r21 == 0x0) goto loc_101d15608;
    goto loc_101d15334;

loc_101d15608:
    r0 = r21;

loc_101d1560c:
    [r0 release];

loc_101d15610:
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;

loc_101d15334:
    r0 = [r20 toolView];
    r29 = 0x40;
    r0 = [r0 retain];
    r23 = [r0 isHidden];
    [r0 release];
    [r21 release];
    if ((r23 & 0x1 << 0x0) != 0x0) goto loc_101d15610;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r23 = r0;
    r24 = @selector(CanLongPressHeadImage);
    r22 = @selector(respondsToSelector:);
    if (([r0 respondsToSelector:r2] & 0x1 << 0x0) == 0x0) goto loc_101d155ec;
    goto loc_101d153a8;

loc_101d155ec:
    r0 = r23;
    goto loc_101d1560c;

loc_101d153a8:
    r0 = objc_loadWeakRetained(r21);
    r24 = [r0 CanLongPressHeadImage];
    [r0 release];
    [r23 release];
    if (((r24 & 0x1 << 0x0) != 0x0) && (([r19 isSelf] & 0x1 << 0x0) == 0x0)) goto loc_101d153e8;
    goto loc_101d15610;

loc_101d153e8:
    r24 = objc_loadWeakRetained(r21);
    if (r24 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(AddAtUser:);
            r22 = [r0 respondsToSelector:r23];
            [r0 release];
            [r24 release];
            if (r22 != 0x0) {
                    r22 = objc_loadWeakRetained(r21);
                    r0 = [r19 m_nsUsrName];
                    r29 = r29;
                    r24 = [r0 retain];
                    [r22 AddAtUser:r2];
                    [r24 release];
                    [r22 release];
            }
    }
    r0 = objc_loadWeakRetained(r21);
    r21 = [[r0 nameForHeadImageLongPressed:r19] retain];
    [r0 release];
    *(int32_t *)r31 = r21;
    r22 = [[NSString stringWithFormat:cfstring__, r3] retain];
    asm{ ldrsw      x26, [x8, #0xdd4] };
    r0 = *(int32_t *)(r20 + r26);
    r0 = [r0 text];
    r29 = r29;
    r0 = [r0 retain];
    r25 = [r0 rangeOfString:r22];
    r24 = @selector(rangeOfString:);
    [r0 release];
    if ((r25 == 0x7fffffffffffffff) || (r24 == 0x0)) {
            r0 = *(int32_t *)(r20 + r26);
            [r0 insertString:r22];
    }
    r0 = *(int32_t *)(r20 + r26);
    [r0 becomeFirstResponder];
    r0 = *(int32_t *)(r20 + r26);
    [r0 setPoisitionMode:0x2 animated:0x1];
    r0 = *(int32_t *)(r20 + r26);
    [r0 setContentMode:0x1 animated:0x1];
    r0 = [r20 GetContact];
    r29 = r29;
    r23 = [r0 retain];
    r2 = [CEnterpriseContact class];
    r24 = [r23 isKindOfClass:r2];
    [r23 release];
    r0 = *(int32_t *)(r20 + r26);
    r1 = @selector(setInputMode:animated:);
    if (r24 != 0x0) {
            [r0 setInputMode:r2 animated:r1];
    }
    else {
            [r0 setInputMode:r2 animated:r1];
    }
    [r22 release];
    goto loc_101d15608;
}

- (void)longPressOnHeadImageForDebug:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    r0 = [AppMessageDebugXMLViewController alloc];
    r20 = [r0 initWithMessageWrap:r19];
    r0 = [self navigationController];
    r0 = [r0 retain];
    r21 = r0;
    [r0 PushViewController:r20 animated:0x1];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)deleteMail:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ movz       w4, #0x0 };
    r0 = [self deleteNode:arg2 withDB:0x1 animated:STK-1];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)tagLink:(id)arg2 messageWrap:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r19 = [arg2 retain];
    r0 = [r3 retain];
    r20 = r0;
    if (([r0 m_uiMessageType] == 0x31) && ([r20 m_uiAppMsgInnerType] == 0x7d1)) goto loc_101d15838;
    goto loc_101d158d8;

loc_101d15838:
    r23 = @selector(m_oWCPayInfoItem);
    r0 = [r20 m_oWCPayInfoItem];
    r29 = 0x40;
    r0 = [r0 retain];
    r22 = r0;
    if ([r0 m_sceneId] != 0x3e9) goto loc_101d158d0;
    goto loc_101d1586c;

loc_101d158d0:
    [r22 release];

loc_101d158d8:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r21 + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(OnTagLink:messageWrap:);
            r25 = [r0 respondsToSelector:r23];
            [r0 release];
            [r22 release];
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r22 = r0;
                    [r0 OnTagLink:r2 messageWrap:r1];
                    [r22 release];
            }
    }

loc_101d15954:
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;

loc_101d1586c:
    r0 = [r20 m_oWCPayInfoItem];
    r0 = [r0 retain];
    r24 = [r0 m_aaNewAAType];
    [r0 release];
    [r22 release];
    if (r24 == 0x4) {
            asm{ movz       w3, #0x0 };
            [r21 clickNewAASysMsg:r19 withMsgLocalID:r3];
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r21 = r21 + 0x1039e8000;
            r22 = objc_loadWeakRetained(r21);
            if (r22 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r23 = @selector(OnTagLink:messageWrap:);
                    r25 = [r0 respondsToSelector:r23];
                    [r0 release];
                    [r22 release];
                    if (r25 != 0x0) {
                            r0 = objc_loadWeakRetained(r21);
                            r22 = r0;
                            [r0 OnTagLink:r2 messageWrap:r1];
                            [r22 release];
                    }
            }
    }
    goto loc_101d15954;
}

- (void)onScrollToBottom
{
    r0 = [self ScrollToBottomAnimated:0x1];
    return;
}

- (void)onHideKeyboard
{
    asm{ movz       w2, #0x0 };
    r0 = [self hideToolViewAnimated:r2];
    return;
}

- (void)onForwardMessageOK
{
    r0 = [self loadingAfterForwardMessageOK];
    return;
}

- (void)onMassSendSendAgain:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onMassSendSendAgain:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onMassSendSendAgain:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)jumpToUserProfile:(id)arg2 Displayname:(id)arg3 Scence:(id)arg4 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    asm{ movz       w5, #0x0 };
    [self jumpToUserProfile:r19 Displayname:arg3 Scence:STK0 fromBanner:STK-1];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)jumpToUserProfile:(id)arg2 Displayname:(id)arg3 Scence:(id)arg4 fromBanner:(id)arg5 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x30;
    r28 = r5;
    r22 = r4;
    r23 = self;
    r19 = [arg2 retain];
    r26 = [arg3 retain];
    if ((r19 != 0x0) && ([r19 length] != 0x0)) {
            r0 = [ContactInfoViewController alloc];
            r21 = [r0 init];
            asm{ stp        x20, x24, [sp] };
            *(int32_t *)(r31 + 0x18) = r23;
            r23 = r22;
            r22 = @selector(defaultCenter);
            r20 = [[MMServiceCenter defaultCenter] retain];
            r27 = @selector(class);
            [CContactMgr class];
            r24 = @selector(getService:);
            r0 = [r20 getService:r2];
            *(int32_t *)(r31 + 0x14) = r28;
            *(int32_t *)(r31 + 0x28) = r26;
            r26 = [r0 retain];
            *(int32_t *)(r31 + 0x20) = r26;
            [r20 release];
            r20 = @selector(getContactByName:);
            r0 = [r26 getContactByName:r2];
            r29 = 0x50;
            r28 = [r0 retain];
            r26 = r28;
            if (r28 == 0x0) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x310);
                    asm{ movz       x26, #0x0 };
                    r22 = [[r0 defaultCenter] retain];
                    [StrangerContactMgr class];
                    r24 = [[r22 getService:r2] retain];
                    [r22 release];
                    asm{ movz       x22, #0x0 };
                    r0 = [r24 getContactByName:r2];
                    r29 = r29;
                    r26 = [r0 retain];
                    [r28 release];
                    if (r26 == 0x0) {
                            asm{ movz       x22, #0x0 };
                            r0 = objc_msgSend(CContact, *(int32_t *)(r31 + 0x8));
                            asm{ movz       x22, #0x0 };
                            r20 = objc_msgSend(r0, *(int32_t *)r31);
                            [r26 release];
                            [r20 setM_nsUsrName:r19];
                            [r20 setM_nsNickName:*(int32_t *)(r31 + 0x28)];
                            r0 = [r20 m_uiCertificationFlag];
                            [r20 setM_uiCertificationFlag:r0 | 0x8];
                            r26 = r20;
                    }
                    [r24 release];
            }
            r1 = @selector(setM_uiFromScene:);
            r22 = r23;
            if (*(int32_t *)(r31 + 0x14) != 0x0) {
                    asm{ movz       w2, #0xb };
                    [r21 setM_uiFromScene:r2];
                    r23 = *(int32_t *)(r31 + 0x18);
            }
            else {
                    [r21 setM_uiFromScene:r2];
                    r23 = *(int32_t *)(r31 + 0x18);
            }
            [r21 setM_contact:r26];
            if (r22 != 0x0) {
                    r0 = [r21 m_contact];
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = r0;
                    [r0 setM_uiFriendScene:r22];
                    [r20 release];
            }
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r0 = objc_loadWeakRetained(r23 + 0x1039e8000);
            r20 = r0;
            r22 = [[r0 GetContact] retain];
            [r21 setM_chatContact:r22];
            [r22 release];
            [r20 release];
            [r21 setM_delegate:r23];
            [r21 setHidesBottomBarWhenPushed:0x1];
            r0 = [r23 navigationController];
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            [r0 PushViewController:r21 animated:0x1];
            [r20 release];
            [r26 release];
            r0 = *(int32_t *)(r31 + 0x20);
            [r0 release];
            [r21 release];
            r26 = *(int32_t *)(r31 + 0x28);
    }
    [r26 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)switchEarMode
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = [[SettingUtil getMainSettingExt] retain];
    r0 = [SettingUtil getMainSettingExt];
    r0 = [r0 retain];
    r21 = r0;
    r2 = [r0 m_isForceEarpieceMode] ^ 0x1;
    [r20 setM_isForceEarpieceMode:r2];
    [r21 release];
    [r20 release];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [AccountStorageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    [r0 SaveSettingExt];
    [r21 release];
    [r20 release];
    asm{ movz       x2, #0x0 };
    [self updateTitleView:r2];
    [self showEarModeTips];
    r0 = [CAppViewControllerManager getAppViewControllerManager];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 getNewMainFrameViewController];
    r0 = [r0 retain];
    r21 = r0;
    [r0 updateNearMode];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r20 release];
    return;
}

- (void)onClickTextFloatPreView:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(onClickTextFloatPreView:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 onClickTextFloatPreView:r2];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)showAlertWithTitle:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Confirm"] retain];
    asm{ movz       x2, #0x0 };
    asm{ movz       x5, #0x0 };
    asm{ movz       x6, #0x0 };
    r0 = [WCUIAlertView showAlertWithTitle:0x10325c000 message:r19 btnTitle:STK1 target:STK0 sel:STK-1];
    r0 = [r0 retain];
    [r0 release];
    [r23 release];
    [r22 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)addToContactsFromContactInfo:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r2 = [r0 isEditing];
    r0 = [self updateOpBtnState:r2];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)newMessageFromContactInfo:(id)arg2 
{
    r0 = self;
    return;
}

- (void)contactInfoReturn
{
    r0 = self;
    return;
}

- (id)isShowHeadImage:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    if (([r0 m_uiMessageType] != 0x31) || ([r19 m_uiAppMsgInnerType] != 0x15)) {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r20 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r20);
            r21 = @selector(isShowHeadImage:);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = [r0 isShowHeadImage:r2];
                    [r0 release];
            }
            else {
                    asm{ movz       w20, #0x0 };
            }
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
            r21 = r0;
            r0 = [r0 GetContact];
            r22 = [r0 retain];
            [r21 release];
            r21 = [r22 isBrandContact];
            [r22 release];
            if ((r21 & 0x1 << 0x0) == 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r20 = r20 + 0x1039e8000;
                    r0 = objc_loadWeakRetained(r20);
                    r21 = @selector(isShowHeadImage:);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = [r0 isShowHeadImage:r2];
                            [r0 release];
                    }
                    else {
                            asm{ movz       w20, #0x0 };
                    }
            }
            else {
                    asm{ movz       w20, #0x0 };
            }
    }
    [r19 release];
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return r0;
}

- (id)getMessageChatContactByMessageWrap:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r0 = [arg2 retain];
    r19 = r0;
    r22 = @selector(m_nsFromUsr);
    r0 = [r0 m_nsFromUsr];
    r0 = [r0 retain];
    r20 = r0;
    if ([r0 isEqualToString:@"iwatchholder"] == 0x0) goto loc_101d16868;
    goto loc_101d16598;

loc_101d16868:
    r21 = @selector(m_nsKFWorkerOpenID);
    r0 = [r19 m_nsKFWorkerOpenID];
    r29 = 0x50;
    r0 = [r0 retain];
    r23 = @selector(length);
    r25 = [r0 length];
    [r0 release];
    if (r25 == 0x0) goto loc_101d16998;
    goto loc_101d168a8;

loc_101d16998:
    if ([r19 m_isEnterpriseMsg] == 0x0) goto loc_101d16c0c;
    goto loc_101d169ac;

loc_101d16c0c:
    asm{ movz       x27, #0x0 };
    *(int32_t *)(r31 + 0x18) = 0x0;
    r0 = [r19 m_nsFromUsr];
    r29 = r29;
    r21 = [r0 retain];
    r28 = @selector(isUsrNameQQ:);
    r25 = [RegularUtil isUsrNameQQ:r2];
    [r21 release];
    r21 = 0x1039c3000;
    r0 = MMServiceCenter;
    r24 = @selector(defaultCenter);
    if (r25 != 0x0) {
            asm{ movz       x27, #0x0 };
            *(int32_t *)(r31 + 0x18) = 0x0;
            r27 = [[r0 defaultCenter] retain];
            r25 = @selector(class);
            [CQQContactMgr class];
            r26 = @selector(getService:);
            r0 = [r27 getService:r2];
            r29 = r29;
    }
    else {
            asm{ movz       x27, #0x0 };
            *(int32_t *)(r31 + 0x18) = 0x0;
            r27 = [[r0 defaultCenter] retain];
            r25 = @selector(class);
            [CContactMgr class];
            r26 = @selector(getService:);
            r0 = [r27 getService:r2];
            r29 = r29;
    }
    *(int32_t *)(r31 + 0x18) = [r0 retain];
    [r27 release];
    asm{ movz       x27, #0x0 };
    if ([CMessageWrap isSenderFromMsgWrap:r19] == 0x0) goto loc_101d16e44;
    goto loc_101d16dfc;

loc_101d16e44:
    asm{ movz       x27, #0x0 };
    r0 = [r19 m_nsFromUsr];
    r29 = r29;
    r27 = [r0 retain];
    r28 = [MMKernelUtil IsBottleContact:r27];
    [r27 release];
    if (r28 == 0x0) goto loc_101d17044;
    goto loc_101d16e8c;

loc_101d17044:
    r28 = @selector(m_nsBizChatId);
    asm{ movz       x27, #0x0 };
    r0 = [r19 m_nsBizChatId];
    r29 = r29;
    r0 = [r0 retain];
    r23 = [r0 length];
    [r0 release];
    if (r23 == 0x0) goto loc_101d17408;
    goto loc_101d17080;

loc_101d17408:
    asm{ movz       x27, #0x0 };
    r0 = [r19 m_nsFromUsr];
    r29 = r29;
    r23 = [r0 retain];
    if ([MMKernelUtil IsChatRoom:r23] == 0x0) goto loc_101d17450;
    goto loc_101d17444;

loc_101d17450:
    r0 = [r19 m_nsFromUsr];
    r29 = r29;
    r25 = [r0 retain];
    r24 = [MMKernelUtil IsLbsRoom:r25];
    [r25 release];
    [r23 release];
    if ((r24 & 0x1 << 0x0) == 0x0) goto loc_101d175cc;
    goto loc_101d1749c;

loc_101d175cc:
    asm{ movz       x27, #0x0 };
    r24 = [[r19 m_nsFromUsr] retain];
    r27 = *(int32_t *)(r31 + 0x18);
    r0 = [r27 getContactByName:r24];
    r29 = r29;
    r23 = [r0 retain];
    [r24 release];

loc_101d17590:
    r0 = r27;

loc_101d17594:
    [r0 release];

loc_101d17598:
    [r20 release];
    [r19 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r23 autorelease];
    return r0;

loc_101d1749c:
    r22 = @selector(m_nsRealChatUsr);
    asm{ movz       x27, #0x0 };
    r0 = [r19 m_nsRealChatUsr];
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    [r0 release];
    if (r23 == 0x0) goto loc_101d17588;
    goto loc_101d174c8;

loc_101d17588:
    asm{ movz       x23, #0x0 };

loc_101d1758c:
    r27 = *(int32_t *)(r31 + 0x18);
    goto loc_101d17590;

loc_101d174c8:
    asm{ movz       x27, #0x0 };
    r24 = [[r19 m_nsRealChatUsr] retain];
    r27 = *(int32_t *)(r31 + 0x18);
    r0 = [r27 getContactByName:r24];
    r29 = r29;
    r23 = [r0 retain];
    [r24 release];
    if (r23 != 0x0) goto loc_101d17590;
    r0 = [CContact alloc];
    r24 = [r0 init];
    [r23 release];
    r0 = [r19 m_nsRealChatUsr];
    r29 = r29;
    r23 = [r0 retain];
    [r24 setM_nsUsrName:r23];

loc_101d17578:
    [r23 release];
    r23 = r24;
    goto loc_101d1758c;

loc_101d17444:
    [r23 release];
    goto loc_101d1749c;

loc_101d17080:
    r0 = *(int32_t *)(0x1039c3000 + 0x310);
    asm{ movz       x27, #0x0 };
    r24 = [objc_msgSend(r0, r24) retain];
    objc_msgSend(EnterpriseContactMgr, r25);
    r25 = [objc_msgSend(r24, r26) retain];
    r26 = [[r19 m_nsBizChatId] retain];
    r27 = [[r19 m_nsRealChatUsr] retain];
    r3 = r27;
    r0 = [r25 getOrAddContactByUserName:r26 brand:r3];
    r29 = r29;
    r23 = [r0 retain];
    [r27 release];
    [r26 release];
    [r25 release];
    [r24 release];
    r27 = *(int32_t *)(r31 + 0x18);
    if (r23 != 0x0) goto loc_101d17590;
    *(int32_t *)r31 = @"fatal error!";
    asm{ movz       w6, #0xaaa };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r0 = [CContact alloc];
    r24 = [r0 init];
    [r23 release];
    r0 = [r19 m_nsRealChatUsr];
    r29 = r29;
    r23 = [r0 retain];
    [r24 setM_nsUsrName:r23];
    goto loc_101d17578;

loc_101d16e8c:
    r0 = *(int32_t *)(0x1039c3000 + 0x310);
    asm{ movz       x27, #0x0 };
    r23 = [objc_msgSend(r0, r24) retain];
    objc_msgSend(BottleMgr, r25);
    r24 = [objc_msgSend(r23, r26) retain];
    [r23 release];
    asm{ movz       x25, #0x0 };
    r0 = [CContact alloc];
    asm{ movz       x25, #0x0 };
    r23 = [r0 init];
    r25 = [[r19 m_nsRealChatUsr] retain];
    r2 = [CBottle genBottleIDByLocalUsrName:r25];
    r0 = [r24 GetBottleByLocalID:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 m_nsEnryptUsrName];
    r29 = r29;
    r27 = [r0 retain];
    [r23 setM_nsUsrName:r27];
    [r27 release];
    [r26 release];
    [r25 release];
    [r24 release];
    goto loc_101d1758c;

loc_101d16dfc:
    asm{ movz       x27, #0x0 };
    r0 = [r19 m_nsRealChatUsr];
    r29 = r29;
    r23 = [r0 retain];
    r27 = *(int32_t *)(r31 + 0x18);
    if ([RegularUtil m_nsBizChatId] != 0x0) {
            [r23 release];
            asm{ movz       x25, #0x0 };
            r24 = [[r19 m_nsRealChatUsr] retain];
            r0 = [r27 getContactByName:r24];
            r29 = r29;
            r23 = [r0 retain];
            [r24 release];
            asm{ movz       w21, #0x0 };
    }
    else {
            r0 = [r19 m_nsRealChatUsr];
            r29 = r29;
            r25 = [r0 retain];
            r24 = [RegularUtil isUsrNameSX:r25];
            [r25 release];
            [r23 release];
            if (r24 != 0x0) {
                    asm{ movz       x25, #0x0 };
                    r24 = [[r19 m_nsRealChatUsr] retain];
                    r0 = [r27 getContactByName:r24];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r24 release];
                    asm{ movz       w21, #0x0 };
            }
            else {
                    asm{ movz       x23, #0x0 };
                    r21 = 0x1;
            }
    }
    r0 = [r19 m_nsToUsr];
    r29 = r29;
    r24 = [r0 retain];
    r22 = [MMKernelUtil IsBottleContact:r24];
    [r24 release];
    if (r22 == 0x0) goto loc_101d172fc;
    goto loc_101d1724c;

loc_101d172fc:
    asm{ cset       w8, eq };
    if ((r21 | 0x1039a6000) != 0x1) goto loc_101d17590;
    r0 = [CContact alloc];
    r24 = [r0 init];
    [r23 release];
    r0 = [SettingUtil getMainSetting];
    r0 = [r0 retain];
    r23 = r0;
    r26 = [[r0 m_nsUsrName] retain];
    [r24 setM_nsUsrName:r26];
    [r26 release];
    [r23 release];
    r0 = [SettingUtil getMainSetting];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 m_nsNickName];
    r29 = r29;
    r25 = [r0 retain];
    [r24 setM_nsNickName:r25];
    [r25 release];

loc_101d173f8:
    [r23 release];
    r23 = r24;
    goto loc_101d17590;

loc_101d1724c:
    r0 = [CContact alloc];
    r24 = [r0 init];
    [r23 release];
    r23 = [[SettingUtil getBottleLocalUsrName] retain];
    [r24 setM_nsUsrName:r23];
    [r23 release];
    r0 = [r24 m_nsUsrName];
    r29 = r29;
    r23 = [r0 retain];
    [r24 setM_nsNickName:r23];
    goto loc_101d173f8;

loc_101d169ac:
    r8 = [CMessageWrap isSenderFromMsgWrap:r19];
    r0 = MMServiceCenter;
    r1 = @selector(defaultCenter);
    if (r8 != 0x0) {
            r21 = [[r0 defaultCenter] retain];
            r2 = [EnterpriseContactMgr class];
            r24 = [[r21 getService:r2] retain];
            r25 = [[r19 m_nsToUsr] retain];
            r0 = [r24 getMyContact:r25];
            r29 = r29;
            r23 = [r0 retain];
    }
    else {
            r21 = [[r0 defaultCenter] retain];
            r2 = [EnterpriseContactMgr class];
            r24 = [[r21 getService:r2] retain];
            r25 = [[r19 m_nsRealChatUsr] retain];
            r26 = [objc_msgSend(r19, r22) retain];
            r0 = [r24 getOrAddContactByUserName:r25 brand:r26];
            r29 = r29;
            r23 = [r0 retain];
            [r26 release];
    }
    [r25 release];
    [r24 release];
    r0 = r21;
    goto loc_101d17594;

loc_101d168a8:
    asm{ movz       x25, #0x0 };
    if ([CMessageWrap isSenderFromMsgWrap:r19] != 0x0) {
            asm{ movz       x25, #0x0 };
            r0 = [CContact alloc];
            asm{ movz       x25, #0x0 };
            r21 = [r0 init];
            r0 = [SettingUtil getMainSetting];
            r0 = [r0 retain];
            r23 = r0;
            r24 = [[r0 m_nsUsrName] retain];
            [r21 setM_nsUsrName:r24];
            [r24 release];
            [r23 release];
            r0 = [r21 m_nsNickName];
            r29 = r29;
            r23 = [r0 retain];
            [r21 setM_nsNickName:r23];
            [r23 release];
            [r21 release];
            asm{ movz       x23, #0x0 };
    }
    else {
            asm{ movz       x25, #0x0 };
            r24 = [[MMServiceCenter defaultCenter] retain];
            r2 = [KFContactMgr class];
            r25 = [[r24 getService:r2] retain];
            r26 = [objc_msgSend(r19, r21) retain];
            r23 = [[r25 getKFContact:r26 brandUsrName:r20] retain];
            [r26 release];
            [r25 release];
            [r24 release];
            r0 = objc_msgSend(r19, r21);
            r29 = r29;
            r24 = [r0 retain];
            r22 = @selector(setM_nsUsrName:);
            [r23 setM_nsUsrName:r2];
            [r24 release];
            if (r23 == 0x0) {
                    asm{ movz       x25, #0x0 };
                    r0 = [KFContact alloc];
                    asm{ movz       x25, #0x0 };
                    r24 = [r0 init];
                    [r23 release];
                    [r24 setBrand:r20];
                    r23 = [objc_msgSend(r19, r21) retain];
                    [r24 setKfOpenId:r23];
                    [r23 release];
                    r0 = objc_msgSend(r19, r21);
                    r29 = r29;
                    r21 = [r0 retain];
                    [r24 setM_nsUsrName:r2];
                    [r21 release];
                    r23 = r24;
            }
    }
    goto loc_101d17598;

loc_101d16598:
    r23 = [[MMServiceCenter defaultCenter] retain];
    r2 = [CContactMgr class];
    r24 = [[r23 getService:r2] retain];
    r21 = @selector(m_nsMsgSource);
    r25 = [[r19 m_nsMsgSource] retain];
    r0 = [r24 getContactByName:r25];
    r29 = 0x50;
    r22 = [r0 retain];
    [r25 release];
    [r24 release];
    [r23 release];
    r23 = r22;
    if (r22 == 0x0) {
            asm{ movz       x24, #0x0 };
            r0 = [CContact alloc];
            asm{ movz       x24, #0x0 };
            r23 = [r0 init];
            [r22 release];
            r25 = [[r19 m_nsMsgSource] retain];
            [r23 setM_nsUsrName:r25];
            [r25 release];
            asm{ movz       x2, #0x0 };
            [r23 setM_nsNickName:r25];
            r25 = [[r23 m_nsUsrName] retain];
            [r23 setM_nsFullPY:r25];
            [r25 release];
            asm{ movz       w2, #0x0 };
            [r23 setM_uiConType:r25];
            asm{ movz       w2, #0x0 };
            [r23 setM_uiType:r25];
            [r23 setM_isExtInfoValid:0x1];
            r0 = [r19 m_nsMsgSource];
            r29 = r29;
            r21 = [r0 retain];
            r22 = [MMKernelUtil IsChatRoom:r21];
            [r21 release];
            if (r22 != 0x0) {
                    asm{ nop         };
                    r21 = [[SettingUtil getCurUsrName] retain];
                    *(int32_t *)r31 = r21;
                    r0 = [NSString stringWithFormat:@"%@", r3];
                    r29 = r29;
                    r24 = [r0 retain];
                    [r23 setM_nsChatRoomMemList:r24];
                    [r24 release];
                    [r21 release];
            }
            asm{ stp        x8, x23, [sp] };
            asm{ movz       w6, #0xa61 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:"Contact" errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    goto loc_101d17598;
}

- (void)addTimeNode:(id)arg2 layout:(id)arg3 addMoreMsg:(id)arg4 
{
    r3 = arg3;
    asm{ stp        d9, d8, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r21 = self;
    r19 = [arg2 retain];
    r0 = [ChatTimeViewModel alloc];
    r20 = [r0 init];
    [r19 m_uiCreateTime];
    asm{ ucvtf      d0, w0 };
    [r20 setCreateTime:r2];
    asm{ ldrsw      x26, [x8, #0xd70] };
    r0 = *(int32_t *)(r21 + r26);
    if (r4 == 0x0) goto loc_101d179e4;
    goto loc_101d179b8;

loc_101d179e4:
    r22 = [r0 count] - 0x1;
    r0 = *(int32_t *)(r21 + r26);
    if ((r22 & 0x1 << 0x3f) != 0x0) goto loc_101d17a58;
    goto loc_101d179fc;

loc_101d17a58:
    asm{ movz       x3, #0x0 };
    [r0 insertObject:r20 atIndex:r3];

loc_101d17a94:
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x60 };
    r0 = [r19 release];
    return;

loc_101d179fc:
    r23 = @selector(objectAtIndexedSubscript:);
    r24 = @selector(createTime);

loc_101d17a0c:
    r0 = [r0 objectAtIndexedSubscript:r2];
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    [r0 createTime];
    [r20 createTime];
    asm{ fcmp       d8, d0 };
    if (CPU_FLAGS & LE) goto loc_101d17a74;
    goto loc_101d17a44;

loc_101d17a74:
    r0 = *(int32_t *)(r21 + r26);
    [r0 insertObject:r20 atIndex:r22 + 0x1];
    [r25 release];
    goto loc_101d17a94;

loc_101d17a44:
    [r25 release];
    r22 = r22 - 0x1;
    r0 = *(int32_t *)(r21 + r26);
    if ((r22 & 0x1 << 0x3f) == 0x0) goto loc_101d17a0c;
    goto loc_101d17a58;

loc_101d179b8:
    asm{ ldrsw      x8, [x8, #0xdd8] };
    r3 = *(int32_t *)(r21 + 0x1039e8000);
    *(int32_t *)(r21 + 0x1039e8000) = r3 + 0x1;
    [r0 insertObject:r20 atIndex:r3];
    goto loc_101d17a94;
}

- (id)addSplitNode:(id)arg2 addMoreMsg:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r21 = self;
    r19 = [arg2 retain];
    r0 = [ChatSplitViewModel alloc];
    r20 = [r0 init];
    [r19 m_uiCreateTime];
    asm{ ucvtf      d0, w0 };
    [r20 setCreateTime:r2];
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    if (arg3 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xdd8] };
            r3 = *(int32_t *)(r21 + 0x1039e8000);
            *(int32_t *)(r21 + 0x1039e8000) = r3 + 0x1;
            [r0 insertObject:r20 atIndex:r3];
    }
    else {
            [r0 addObject:r20];
    }
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r20 autorelease];
    return r0;
}

- (void)OnMsgRevoked:(id)arg2 n64MsgId:(id)arg3 SysMsg:(id)arg4 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [arg2 retain];
    r0 = [r20 GetContact];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_nsUsrName];
    r0 = [r0 retain];
    r23 = [r0 isEqualToString:r19];
    [r0 release];
    [r21 release];
    if ((r23 & 0x1 << 0x0) != 0x0) {
            asm{ ldrsw      x8, [x8, #0xddc] };
            *(int32_t *)(r20 + 0x1039e8000) = *(int32_t *)(r20 + 0x1039e8000) + 0x1;
            asm{ ldrsw      x8, [x8, #0xde0] };
            *(int8_t *)(r20 + 0x1039e8000) = 0x1;
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)OnRevokeMsg:(id)arg2 MsgWrap:(id)arg3 ResultCode:(id)arg4 ResultMsg:(id)arg5 EducationMsg:(id)arg6 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xde0] };
    *(int8_t *)(r0 + 0x1039e8000) = 0x1;
    return;
}

- (void)addMessageNode:(id)arg2 layout:(id)arg3 addMoreMsg:(id)arg4 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x100;
    r25 = r4;
    r21 = arg3;
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    r24 = @selector(m_uiMesLocalID);
    r2 = [r0 m_uiMesLocalID];
    r0 = [r20 findNodeDataByLocalId:r2];
    r29 = 0x60;
    r0 = [r0 retain];
    r22 = r0;
    [r0 release];
    if (r22 == 0x0) goto loc_101d17dbc;
    goto loc_101d17d60;

loc_101d17dbc:
    r29 = 0x60;
    asm{ movz       x3, #0x0 };
    sub_100a60a28(r29 - 0x90);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0xa0);
    r28 = @selector(getCurContentSizeHeight);
    [r20 getCurContentSizeHeight];
    asm{ ldrsw      x22, [x8, #0xd8c] };
    r23 = @selector(getTableViewVisibleHeightWithOrientation:);
    [r20 getTableViewVisibleHeightWithOrientation:r2];
    asm{ ucvtf      d1, x26 };
    asm{ fsub       d0, d1, d0 };
    asm{ fcvtzs     w27, d0 };
    if (r27 >= 0x1) {
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 contentOffset];
            [r20 getTableViewVisibleHeightWithOrientation:r2];
            asm{ scvtf      d1, w27 };
            asm{ fmov       d2, #0x0 };
            asm{ fmul       d0, d0, d2 };
            asm{ fadd       d0, d8, d0 };
            asm{ fcmp       d1, d0 };
            if (CPU_FLAGS & P) {
                    *(int32_t *)(r31 + 0x3c) = 0x1;
            }
            else {
                    *(int32_t *)(r31 + 0x3c) = [CMessageWrap isSenderFromMsgWrap:r19];
            }
    }
    else {
            *(int32_t *)(r31 + 0x3c) = 0x0;
    }
    sub_100a60a58(0xa0);
    asm{ ldrsw      x8, [x8, #0xde4] };
    if (*(int8_t *)(r20 + 0x1039e8000) != 0x0) {
            r26 = [r19 m_uiCreateTime];
            asm{ ldrsw      x22, [x8, #0xde8] };
            if ((r26 == [*(int32_t *)(r20 + r22) m_uiCreateTime]) && ([r19 m_uiMesLocalID] == [*(int32_t *)(r20 + r22) m_uiMesLocalID])) {
                    r3 = r25;
                    r0 = [r20 addSplitNode:r19 addMoreMsg:r3];
                    r29 = 0x60;
                    r0 = [r0 retain];
                    [r0 release];
            }
    }
    *(int32_t *)(r31 + 0x30) = r28;
    *(int32_t *)(r31 + 0x2c) = r27;
    r9 = objc_ivar_offset_BaseMsgContentViewController_m_uLastMoreMsgTime;
    asm{ csel       x8, x9, x8, ne };
    asm{ ldrsw      x8, [x8] };
    r23 = *(int32_t *)(r20 + objc_ivar_offset_BaseMsgContentViewController_m_uLastTime);
    r27 = @selector(m_uiCreateTime);
    if ((r23 == 0x0) || ([r19 m_uiCreateTime] - r23 >= 0x12c)) {
            r23 = [r19 m_uiCreateTime];
            r3 = r21;
            [r20 addTimeNode:r19 layout:r3 addMoreMsg:STK-1];
    }
    if (r25 != 0x0) {
            r8 = 0x1039e8000;
            asm{ ldrsw      x8, [x8, #0xdec] };
    }
    else {
            r8 = 0x1039e8000;
            asm{ ldrsw      x8, [x8, #0xdf0] };
    }
    *(int32_t *)(r20 + r8) = r23;
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x70);
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
    r23 = r0;
    r0 = [r0 GetContact];
    r29 = r29;
    r24 = [r0 retain];
    [r23 release];
    asm{ movz       x26, #0x0 };
    if ([r20 isShowHeadImage:r19] != 0x0) {
            asm{ movz       x26, #0x0 };
            r23 = [[r20 getMessageChatContactByMessageWrap:r19] retain];
            r2 = r19;
            r3 = r23;
            r0 = [BaseMessageViewModel createMessageViewModelWithMessageWrap:r2 contact:r3 chatContact:STK-1];
            r29 = r29;
            r26 = [r0 retain];
            [r23 release];
    }
    else {
            asm{ movz       x26, #0x0 };
            asm{ movz       x3, #0x0 };
            r2 = r19;
            r0 = [BaseMessageViewModel createMessageViewModelWithMessageWrap:r2 contact:r3 chatContact:STK-1];
            r29 = r29;
            r26 = [r0 retain];
    }
    [r19 m_uiCreateTime];
    asm{ ucvtf      d0, w0 };
    [r26 setCreateTime:r2];
    sub_100a60a58(0x70);
    asm{ ldrsw      x8, [x22, #0xd70] };
    r0 = *(int32_t *)(r20 + 0x103952000);
    if (r25 == 0x0) goto loc_101d18134;
    goto loc_101d1810c;

loc_101d18134:
    r25 = [r0 count] - 0x1;
    if ((r25 & 0x1 << 0x3f) != 0x0) goto loc_101d181cc;
    goto loc_101d18148;

loc_101d181cc:
    sub_100a60a58(r29 - 0x90);
    r2 = "bLayout";
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x40);
    if (r21 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 reloadData];
            r21 = objc_msgSend(r20, *(int32_t *)(r31 + 0x30));
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            r0 = [r0 toolView];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            [r0 origin];
            r23 = *(int32_t *)(r31 + 0x2c);
            [r20 getContentViewY];
            asm{ ucvtf      d1, x21 };
            asm{ fsub       d1, d1, d8 };
            asm{ fadd       d0, d1, d0 };
            asm{ fcvtzs     w21, d0 };
            [r22 release];
            asm{ cset       w8, gt };
            asm{ cset       w9, lt };
            r22 = *(int32_t *)(r31 + 0x3c) | r9 & 0x103951000;
            asm{ ldrsw      x23, [x8, #0xde0] };
            if ((r22 & 0x1 << 0x0) != 0x0) {
                    asm{ cset       w2, eq };
                    [r20 ScrollToBottomAnimated:r2];
            }
            *(int8_t *)(r20 + r23) = 0x0;
            asm{ stp        x21, x22, [sp, #0x8] };
            *(int32_t *)r31 = @"===========================  iNewOffset %d bNeedScroll %d ===========================";
            asm{ movz       w6, #0xb5b };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    sub_100a60a58(0x40);
    sub_100a60a98(0x40);
    [r24 release];
    [r26 release];
    sub_100a60a98(0x70);
    sub_100a60a98(0xa0);
    sub_100a60a98(r29 - 0x90);

loc_101d18344:
    r0 = [r19 release];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    return;

loc_101d18148:
    asm{ ldrsw      x22, [x22, #0xd70] };
    r27 = @selector(objectAtIndexedSubscript:);
    r23 = @selector(createTime);

loc_101d1815c:
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r0 objectAtIndexedSubscript:r2];
    r29 = r29;
    r0 = [r0 retain];
    r28 = r0;
    [r0 createTime];
    [r26 createTime];
    asm{ fcmp       d8, d0 };
    if (CPU_FLAGS & LE) goto loc_101d181ac;
    goto loc_101d18198;

loc_101d181ac:
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r3 = r25 + 0x1;
    [r0 insertObject:r26 atIndex:r3];
    [r28 release];
    goto loc_101d181cc;

loc_101d18198:
    [r28 release];
    r25 = r25 - 0x1;
    if ((r25 & 0x1 << 0x3f) == 0x0) goto loc_101d1815c;
    goto loc_101d181cc;

loc_101d1810c:
    asm{ ldrsw      x8, [x8, #0xdd8] };
    r3 = *(int32_t *)(r20 + 0x1039e8000);
    r9 = r3 + 0x1;
    *(int32_t *)(r20 + 0x1039e8000) = r9;
    [r0 insertObject:r26 atIndex:r3];
    goto loc_101d181cc;

loc_101d17d60:
    asm{ stp        x8, x19, [sp] };
    asm{ movz       w6, #0xb05 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    [r20 updateMessageNodeStatus:r19];
    goto loc_101d18344;
}

- (void)initHistroyMessageNodeData
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x280;
    r19 = self;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffffa8] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r19 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r20 = r0;
    [r0 release];
    if (r20 == 0x0) {
            *(int32_t *)r31 = @"error, m_delegate be nil!";
            asm{ movz       w6, #0xb67 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    asm{ ldrsw      x20, [x8, #0xd70] };
    if (*(int32_t *)(r19 + r20) != 0x0) {
            [r19 removeAllObjectsFromMessageNodeDatas];
    }
    else {
            r0 = [NSMutableArray alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r20);
            *(int32_t *)(r19 + r20) = r0;
            [r8 release];
    }
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x148);
    r0 = objc_loadWeakRetained(r21);
    r22 = [r0 ShouldShowSearchResultMessageArray];
    [r0 release];
    r20 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = [r20 GetSearchedResultContentMessageArray];
            r29 = 0x50;
    }
    else {
            r0 = [r20 GetMessageArray];
            r29 = 0x50;
    }
    r22 = [r0 retain];
    [r20 release];
    sub_100a60a58(0x148);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x118);
    *(int32_t *)(r31 + 0x28) = r21;
    asm{ stp        xzr, xzr, [sp, #0x108] };
    asm{ stp        xzr, xzr, [sp, #0xf8] };
    asm{ stp        xzr, xzr, [sp, #0xe8] };
    asm{ stp        xzr, xzr, [sp, #0xd8] };
    r0 = [r22 retain];
    r20 = r0;
    *(int32_t *)(r31 + 0x20) = @selector(countByEnumeratingWithState:objects:count:);
    r3 = r29 - 0xd8;
    r24 = [r0 countByEnumeratingWithState:0xd8 objects:r3 count:STK-1];
    if (r24 != 0x0) {
            r21 = **(int32_t *)(r31 + 0xe8);
            *(int32_t *)(r31 + 0x30) = @selector(countByEnumeratingWithState:objects:count:);
            r25 = "-[BaseMsgContentViewController initHistroyMessageNodeData]";
            r26 = "LoadMessageUIOne";
            do {
                    asm{ movz       x23, #0x0 };
                    r27 = @selector(m_uiMessageType);
                    r28 = @selector(addMessageNode:layout:addMoreMsg:);
                    do {
                            if (**(int32_t *)(r31 + 0xe8) != r21) {
                                    objc_enumerationMutation(r20);
                            }
                            r22 = *(int32_t *)(*(int32_t *)(r31 + 0xe0) + r23 * 0x8);
                            if ([r22 m_uiMessageType] != 0x2e) {
                                    asm{ movz       x3, #0x0 };
                                    sub_100a60a28(0xa8);
                                    asm{ movz       w3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    [r19 addMessageNode:r2 layout:r1 addMoreMsg:r8];
                                    sub_100a60a58(0xa8);
                                    sub_100a60a98(0xa8);
                            }
                            r23 = r23 + 0x1;
                    } while (r23 < r24);
                    r3 = r29 - 0xd8;
                    r24 = objc_msgSend(r20, *(int32_t *)(r31 + 0x30));
            } while (r24 != 0x0);
    }
    *(int32_t *)(r31 + 0x18) = r20;
    [r20 release];
    sub_100a60a58(0x118);
    r0 = [r19 getLastNodePreContentSizeHeight];
    asm{ ldrsw      x8, [x8, #0xdf4] };
    *(int32_t *)(r19 + 0x1039e8000) = r0;
    [r19 getCurContentSizeHeight];
    asm{ stp        x8, x0, [sp] };
    asm{ movz       w6, #0xb86 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ ldrsw      x20, [x8, #0xda4] };
    *(int8_t *)(r19 + r20) = 0x0;
    r0 = *(int32_t *)(r31 + 0x28);
    r0 = objc_loadWeakRetained(r0);
    r21 = r0;
    r0 = [r0 GetDownMessageArray];
    r29 = r29;
    r22 = [r0 retain];
    [r21 release];
    r8 = 0x103950000;
    if ([r22 count] != 0x0) {
            r8 = 0x1;
            *(int8_t *)(r19 + r20) = r8;
    }
    asm{ stp        xzr, xzr, [sp, #0x98] };
    asm{ stp        xzr, xzr, [sp, #0x88] };
    asm{ stp        xzr, xzr, [sp, #0x78] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    *(int32_t *)(r31 + 0x28) = r22;
    r0 = [r22 retain];
    r23 = r0;
    r24 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
    if (r24 != 0x0) {
            r22 = **(int32_t *)(r31 + 0x78);
            *(int32_t *)(r31 + 0x30) = @selector(countByEnumeratingWithState:objects:count:);
            r25 = "-[BaseMsgContentViewController initHistroyMessageNodeData]";
            r26 = "LoadMessageUIOne";
            do {
                    asm{ movz       x20, #0x0 };
                    r27 = @selector(m_uiMessageType);
                    r28 = @selector(addMessageNode:layout:addMoreMsg:);
                    do {
                            if (**(int32_t *)(r31 + 0x78) != r22) {
                                    objc_enumerationMutation(r23);
                            }
                            r8 = *(int32_t *)(r31 + 0x70);
                            r21 = *(int32_t *)(r8 + r20 * 0x8);
                            if ([r21 m_uiMessageType] != 0x2e) {
                                    asm{ movz       x3, #0x0 };
                                    sub_100a60a28(0x38);
                                    asm{ movz       w3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    [r19 addMessageNode:r2 layout:r1 addMoreMsg:r8];
                                    sub_100a60a58(0x38);
                                    sub_100a60a98(0x38);
                            }
                            r20 = r20 + 0x1;
                    } while (r20 < r24);
                    r24 = objc_msgSend(r23, *(int32_t *)(r31 + 0x30));
            } while (r24 != 0x0);
    }
    [r23 release];
    [r23 release];
    sub_100a60a98(0x118);
    sub_100a60a98(0x148);
    r0 = *(int32_t *)(r31 + 0x18);
    r0 = [r0 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (**(int32_t *)__stack_chk_guard == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)onLoadMoreMessage
{
    asm{ stp        d11, d10, [sp, #0xffffff80]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r29 = 0x70;
    0x0 = 0x0 - 0x50;
    r19 = self;
    asm{ ldrsw      x27, [x8, #0xd84] };
    if (*(int8_t *)(r19 + r27) == 0x0) goto loc_101d18b68;
    goto loc_101d18a4c;

loc_101d18b68:
    *(int32_t *)r31 = @"not ready to load more msg";
    asm{ movz       w6, #0xba0 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    r0 = [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];

loc_101d18dc8:
    0x0 = r29 - 0x70;
    asm{ ldp        x29, x30, [sp, #0x70] };
    asm{ ldp        x20, x19, [sp, #0x60] };
    asm{ ldp        x22, x21, [sp, #0x50] };
    asm{ ldp        x24, x23, [sp, #0x40] };
    asm{ ldp        x26, x25, [sp, #0x30] };
    asm{ ldp        x28, x27, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x80 };
    return;

loc_101d18a4c:
    asm{ movz       w2, #0x28 };
    sub_102983fd4(0x40);
    asm{ ldrsw      x8, [x8, #0xdd8] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xdec] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    r21 = @selector(getCurContentSizeHeight);
    [r19 getCurContentSizeHeight];
    asm{ ldrsw      x28, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + r28);
    [r0 contentOffset];
    r2 = "LogicLoadMore";
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x10);
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r22 = r19 + 0x1039e8000;
    r23 = objc_loadWeakRetained(r22);
    if (r23 == 0x0) goto loc_101d18c88;
    goto loc_101d18ae0;

loc_101d18c88:
    sub_100a60a58(0x10);
    [r19 getCurContentSizeHeight];
    r0 = *(int32_t *)(r19 + r28);
    [r0 reloadData];
    r0 = objc_loadWeakRetained(r22);
    r23 = [r0 hasMoreMsg];
    asm{ ucvtf      d0, x20 };
    asm{ ucvtf      d1, x21 };
    asm{ fsub       d0, d1, d0 };
    asm{ fadd       d11, d8, d0 };
    [r0 release];
    if ((r23 & 0x1 << 0x0) == 0x0) {
            r0 = *(int32_t *)(r19 + r28);
            r0 = [r0 tableHeaderView];
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            [r0 height];
            asm{ fsub       d11, d11, d0 };
            [r20 release];
    }
    r0 = *(int32_t *)(r19 + r28);
    [r0 contentInset];
    r0 = *(int32_t *)(r19 + r28);
    [r0 contentSize];
    r0 = *(int32_t *)(r19 + r28);
    [r0 height];
    r0 = *(int32_t *)(r19 + r28);
    [r0 contentInset];
    asm{ fneg       d0, d8 };
    asm{ fsub       d1, d9, d10 };
    asm{ fadd       d1, d1, d2 };
    asm{ fcmp       d1, d0 };
    asm{ fcsel      d0, d1, d0, gt };
    asm{ fcmp       d11, d0 };
    asm{ fcsel      d1, d11, d0, mi };
    r0 = *(int32_t *)(r19 + r28);
    asm{ movi.16b   v0, #0x0 };
    asm{ movz       w2, #0x0 };
    [r0 setContentOffset:r2 animated:r3];
    *(int8_t *)(r19 + r27) = 0x0;
    asm{ ldrsw      x8, [x8, #0xd88] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r1 = @selector(stopAnimating);
    [r0 stopAnimating];

loc_101d18db8:
    sub_100a60a98(0x10);
    r0 = sub_10298400c(0x40, r1);
    goto loc_101d18dc8;

loc_101d18ae0:
    r0 = objc_loadWeakRetained(r22);
    r24 = @selector(onLoadMoreMessage);
    r2 = r24;
    r26 = [r0 respondsToSelector:r2];
    [r0 release];
    [r23 release];
    if (r26 == 0x0) goto loc_101d18c88;
    r0 = objc_loadWeakRetained(r22);
    r25 = r0;
    r0 = [r0 onLoadMoreMessage];
    r29 = 0x70;
    r23 = [r0 retain];
    [r25 release];
    r25 = @selector(count);
    if ([r23 count] == 0x0) goto loc_101d18bb0;
    goto loc_101d18b5c;

loc_101d18bb0:
    r0 = objc_loadWeakRetained(r22);
    r26 = [r0 hasMoreMsg];
    [r0 release];
    r24 = iConsole;
    if (r26 == 0x0) goto loc_101d18c34;
    goto loc_101d18be0;

loc_101d18c34:
    [r23 count];
    asm{ stp        x8, x0, [sp] };
    r2 = 0x2;
    asm{ movz       w6, #0xbb6 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [r24 logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    [r23 release];
    goto loc_101d18c88;

loc_101d18be0:
    r1 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    *(int32_t *)r31 = @"should get msg from server";
    asm{ movz       w6, #0xbb2 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(r24, r1);
    sub_100a60a58(0x10);
    [r23 release];
    goto loc_101d18db8;

loc_101d18b5c:
    r24 = iConsole;
    goto loc_101d18c34;
}

- (void)onLoadMessageFail
{
    asm{ stp        d11, d10, [sp, #0xffffffb0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    asm{ ldrsw      x22, [x8, #0xd74] };
    r0 = *(int32_t *)(self + r22);
    [r0 contentOffset];
    r0 = *(int32_t *)(self + r22);
    r0 = [r0 tableHeaderView];
    r0 = [r0 retain];
    r21 = r0;
    [r0 height];
    asm{ fadd       d9, d8, d0 };
    [r21 release];
    r0 = *(int32_t *)(self + r22);
    [r0 contentInset];
    asm{ fneg       d10, d0 };
    r0 = *(int32_t *)(self + r22);
    [r0 contentSize];
    r0 = *(int32_t *)(self + r22);
    [r0 height];
    asm{ fsub       d8, d8, d0 };
    r0 = *(int32_t *)(self + r22);
    [r0 contentInset];
    asm{ fadd       d0, d8, d2 };
    asm{ fcmp       d0, d10 };
    asm{ fcsel      d0, d0, d10, gt };
    asm{ fcmp       d9, d0 };
    asm{ fcsel      d1, d9, d0, mi };
    r0 = *(int32_t *)(self + r22);
    asm{ movi.16b   v0, #0x0 };
    asm{ movz       w2, #0x0 };
    [r0 setContentOffset:r2 animated:r3];
    asm{ ldrsw      x8, [x8, #0xd84] };
    *(int8_t *)(self + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xd88] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x50 };
    r0 = [r0 stopAnimating];
    return;
}

- (void)onLoadFirstScreenMsg:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    r20 = arg2;
    r19 = self;
    r9 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"on load first screen";
    r2 = 0x2;
    asm{ movz       w6, #0xbd9 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r23 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r23);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r23);
            r22 = r0;
            r24 = @selector(GetFirstUnReadMessage);
            r2 = r24;
            if ([r0 respondsToSelector:r2] != 0x0) {
                    r0 = objc_loadWeakRetained(r23);
                    r23 = r0;
                    r0 = [r0 GetFirstUnReadMessage];
                    r29 = 0x40;
                    r24 = [r0 retain];
                    r25 = 0x1;
            }
            else {
                    asm{ movz       w26, #0x0 };
                    asm{ movz       x24, #0x0 };
                    r25 = 0x1;
            }
    }
    else {
            asm{ movz       w25, #0x0 };
            asm{ movz       w26, #0x0 };
            asm{ movz       x24, #0x0 };
    }
    r0 = [r24 retain];
    asm{ ldrsw      x9, [x8, #0xde8] };
    r8 = *(int32_t *)(r19 + r9);
    *(int32_t *)(r19 + r9) = r0;
    [r8 release];
    if (0x1 != 0x0) {
            [r24 release];
            [r23 release];
    }
    if (r25 != 0x0) {
            [r22 release];
    }
    [r21 release];
    r0 = [r19 m_badRoomLogicController];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 m_hasIniitialUnread];
    [r0 release];
    if (r22 != 0x0) {
            r2 = @selector(tryShowFirstUnReadButtonAnimated);
            asm{ movz       x3, #0x0 };
            asm{ fmov       d0, #0x0 };
            [r19 safePerformSelector:r2 withObject:r3 afterDelay:STK-1];
    }
    asm{ movz       w2, #0x0 };
    r0 = [r19 setTableFooterView:r2];
    if (r20 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd84] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            asm{ ldrsw      x8, [x8, #0xd88] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 stopAnimating];
            [r19 reloadMessagesInternal];
            0x0 = r29 - 0x40;
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            r0 = [r19 ScrollToBottomAnimated:0x1];
    }
    else {
            0x0 = r29 - 0x40;
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    return;
}

- (void)onLoadFirstUnreadMsg:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x23, [x8, #0xde8] };
    r21 = *(int32_t *)(r20 + r23);
    if (r21 == 0x0) goto loc_101d19278;
    goto loc_101d19248;

loc_101d19278:
    *(int32_t *)(r20 + r23) = [r19 retain];
    [r21 release];

loc_101d1928c:
    asm{ ldrsw      x8, [x8, #0xd84] };
    *(int8_t *)(r20 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xd88] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 stopAnimating];
    if (*(int32_t *)(r20 + r23) != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd70] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 removeAllObjects];
            [r20 onScrollToFirstUnReadMsg];
    }
    else {
            *(int32_t *)r31 = @"cannot find first unread msg";
            asm{ movz       w6, #0xbf4 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;

loc_101d19248:
    if ([r19 m_uiCreateTime] >= [*(int32_t *)(r20 + r23) m_uiCreateTime]) goto loc_101d1928c;
    r21 = *(int32_t *)(r20 + r23);
    goto loc_101d19278;
}

- (void)setTableFooterView:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = arg2;
    r19 = self;
    asm{ ldrsw      x23, [x8, #0xdf8] };
    if (*(int32_t *)(r19 + r23) == 0x0) {
            r22 = [UIView alloc];
            [UiUtil screenWidthCurOri];
            asm{ movi.16b   v0, #0x0 };
            asm{ movi.16b   v1, #0x0 };
            r0 = [r22 initWithFrame:r2];
            r8 = *(int32_t *)(r19 + r23);
            *(int32_t *)(r19 + r23) = r0;
            [r8 release];
            r0 = [UIActivityIndicatorView alloc];
            r0 = [r0 initWithActivityIndicatorStyle:0x2];
            asm{ ldrsw      x22, [x8, #0xdfc] };
            r8 = *(int32_t *)(r19 + r22);
            *(int32_t *)(r19 + r22) = r0;
            [r8 release];
            r0 = *(int32_t *)(r19 + r22);
            asm{ movz       w2, #0x5 };
            [r0 setAutoresizingMask:0x2];
            r21 = *(int32_t *)(r19 + r22);
            r0 = *(int32_t *)(r19 + r23);
            [r0 center];
            [r21 setCenter:0x2];
            r0 = *(int32_t *)(r19 + r23);
            r2 = *(int32_t *)(r19 + r22);
            [r0 addSubview:r2];
    }
    if (r20 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xdfc] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 startAnimating];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r2 = *(int32_t *)(r19 + r23);
    }
    else {
            asm{ movz       x2, #0x0 };
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r0 setTableFooterView:r2];
    return;
}

- (id)canBecomeFirstResponder
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d3c98;
    r0 = [[0x0 super] canBecomeFirstResponder];
    0x0 = 0x0;
    asm{ ldp        x29, x30, [sp], #0x10 };
    return r0;
}

- (void)onSightTipsOK
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    0x0 = 0x0 - 0x30;
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r20 = r0;
    asm{ movz       x4, #0x0 };
    [r0 removeObserver:self name:@"SightShakeTipsOK" object:STK-1];
    r0 = [r20 release];
    asm{ movz       w1, #0x11e1, lsl #16 };
    asm{ movk       w1, #0xa300 };
    asm{ movz       x0, #0x0 };
    r20 = dispatch_time(r0, @selector(removeObserver:name:object:));
    *(int32_t *)(r31 + 0x8) = *(int32_t *)_NSConcreteStackBlock;
    asm{ movz       w8, #0xc200, lsl #16 };
    asm{ stp        w8, wzr, [sp, #0x10] };
    asm{ nop         };
    *(int32_t *)(r31 + 0x18) = 0x101d195e0;
    *(int32_t *)(r31 + 0x20) = 0x103218750;
    *(int32_t *)(r31 + 0x28) = [self retain];
    dispatch_after(r20, *(int32_t *)_dispatch_main_q, 0x8);
    r0 = *(int32_t *)(r31 + 0x28);
    r0 = [r0 release];
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)onLoadDownMoreMessage:(id)arg2 
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x40;
    r19 = r0;
    asm{ ldrsw      x25, [x8, #0xd84] };
    if (*(int8_t *)(r19 + r25) != 0x0) {
            asm{ movz       w2, #0x28 };
            sub_102983fd4(0x30);
            asm{ ldrsw      x8, [x8, #0xdd8] };
            *(int32_t *)(r19 + 0x1039e8000) = 0x0;
            asm{ movz       x3, #0x0 };
            sub_100a60a28(0x0);
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r19 + 0x1039e8000;
            r21 = objc_loadWeakRetained(r20);
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(onLoadDownMoreMessage);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            [r0 onLoadDownMoreMessage];
                            [r20 release];
                    }
            }
            sub_100a60a58(0x0);
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 reloadData];
            *(int8_t *)(r19 + r25) = 0x0;
            asm{ ldrsw      x8, [x8, #0xd88] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 stopAnimating];
            sub_100a60a98(0x0);
            r0 = sub_10298400c(0x30, @selector(stopAnimating));
    }
    0x0 = 0x40 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return;
}

- (void)initDeepLinkConfig
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x82c] };
    r20 = *(int32_t *)(self + 0x1039ef000);
    r19 = [NSStringFromSelector(@selector(showSightDraftBoxView)) retain];
    asm{ movz       w3, #0x5 };
    r0 = [DeepLinkVCConfigItem genItemWithLinkName:@"sightdraft" actionType:r3 actionName:STK-1];
    r21 = [r0 retain];
    [r20 setObject:r21 forKey:@"sightdraft"];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)initData
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x30;
    r21 = r0;
    asm{ ldrsw      x8, [x8, #0xe00] };
    if (*(int8_t *)(r21 + 0x1039e8000) == 0x0) {
            asm{ ldrsw      x8, [x8, #0xe04] };
            *(int8_t *)(r21 + 0x1039e8000) = 0x0;
            asm{ ldrsw      x8, [x8, #0xdc4] };
            *(int8_t *)(r21 + 0x1039e8000) = 0x0;
            asm{ nop         };
            asm{ ldrsw      x26, [x8, #0x820] };
            *(int32_t *)(r21 + r26) = 0x1;
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r0 = objc_loadWeakRetained(r21 + 0x1039e8000);
            r19 = [[r0 GetContact] retain];
            [r0 release];
            r0 = [r19 m_nsUsrName];
            r29 = 0x40;
            r0 = [r0 retain];
            r20 = r0;
            if ([r0 length] != 0x0) {
                    r22 = [r20 retain];
                    if ([CUtility CheckUsrNameType:r22] == 0x5) {
                            r23 = [[MMServiceCenter defaultCenter] retain];
                            r2 = [BottleMgr class];
                            r24 = [[r23 getService:r2] retain];
                            [r23 release];
                            r0 = [r24 getSvrUsrNameByLocalUsrName:r22];
                            r29 = r29;
                            r23 = [r0 retain];
                            [r22 release];
                            [r24 release];
                            r22 = r23;
                    }
                    [r21 attachObject:r22 forKey:@"usrdata_usrname"];
                    if ([PluginUtil getPluginUserNameType:r22] != 0x15) {
                            asm{ movz       w8, #0x5 };
                            *(int32_t *)(r21 + r26) = 0x103993000;
                    }
                    r23 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [CContactMgr class];
                    r0 = [r23 getService:r2];
                    r0 = [r0 retain];
                    r25 = r0;
                    r0 = [r0 getContactByName:r22];
                    r29 = r29;
                    r24 = [r0 retain];
                    [r25 release];
                    [r23 release];
                    if ([r24 isBrandContact] != 0x0) {
                            *(int32_t *)(r21 + r26) = 0x4;
                    }
                    [r24 release];
                    [r22 release];
            }
            asm{ movz       x3, #0x0 };
            sub_100a60a28(0x0);
            [r21 initHistroyMessageNodeData];
            sub_100a60a58(0x0);
            r0 = [NSNotificationCenter defaultCenter];
            r0 = [r0 retain];
            r24 = r0;
            asm{ movz       x5, #0x0 };
            [r0 addObserver:r21 selector:@selector(MenuControllerWillHide:) name:STK0 object:STK-1];
            [r24 release];
            r0 = [NSNotificationCenter defaultCenter];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            asm{ movz       x5, #0x0 };
            [r0 addObserver:r21 selector:@selector(MenuControllerWillShow:) name:STK0 object:STK-1];
            [r22 release];
            sub_100a60a98(0x0);
            [r20 release];
            r0 = [r19 release];
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return;
}

- (void)MoreMsgBtnUpdate:(id)arg2 unReadCount:(id)arg3 
{
    asm{ cset       w2, ne };
    r0 = [self reloadTableHeaderView:r2];
    return;
}

- (void)updateOpBtnState:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x100;
    *(int32_t *)(r31 + 0x2c) = arg2;
    *(int32_t *)(r31 + 0x18) = self;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffffa8] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ ldrsw      x8, [x8, #0xe08] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r8 = 0x103950000;
    r0 = [r0 subviews];
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x30) = r0;
    r23 = [r0 countByEnumeratingWithState:0x38 objects:0x78 count:STK-1];
    if (r23 != 0x0) {
            asm{ movz       x22, #0x0 };
            r28 = **(int32_t *)(r31 + 0x48);
            *(int32_t *)(r31 + 0x10) = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x20, #0x0 };
                    r25 = @selector(class);
                    r26 = @selector(isKindOfClass:);
                    r27 = @selector(setEnabled:);
                    *(int32_t *)(r31 + 0x20) = @selector(EnabledOfHeaderButtonAtIndex:);
                    do {
                            if (**(int32_t *)(r31 + 0x48) != r28) {
                                    r0 = *(int32_t *)(r31 + 0x30);
                                    objc_enumerationMutation(r0);
                            }
                            r8 = *(int32_t *)(r31 + 0x40);
                            r21 = *(int32_t *)(r8 + r20 * 0x8);
                            [*(int32_t *)(0x1039c3000 + 0x428) class];
                            if ([r21 isKindOfClass:r2] != 0x0) {
                                    r24 = [r21 retain];
                                    r8 = *(int32_t *)(r31 + 0x2c);
                                    if (r8 != 0x0) {
                                            asm{ movz       w2, #0x0 };
                                            [r24 setEnabled:r2];
                                    }
                                    else {
                                            r8 = 0x1039e8000;
                                            asm{ ldrsw      x8, [x8, #0xd6c] };
                                            r0 = objc_loadWeakRetained(*(int32_t *)(r31 + 0x18) + r8);
                                            r21 = r0;
                                            r1 = *(int32_t *)(r31 + 0x20);
                                            objc_msgSend(r0, r1);
                                            [r24 setEnabled:r2];
                                            [r21 release];
                                            r22 = r22 + 0x1;
                                    }
                                    [r24 release];
                            }
                            r20 = r20 + 0x1;
                    } while (r20 < r23);
                    r23 = objc_msgSend(*(int32_t *)(r31 + 0x30), *(int32_t *)(r31 + 0x10));
            } while (r23 != 0x0);
    }
    r0 = *(int32_t *)(r31 + 0x30);
    r0 = [r0 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (**(int32_t *)__stack_chk_guard == r8) {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)initTableHeaderView
{
    asm{ stp        d11, d10, [sp, #0xffffffa0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = self;
    asm{ ldrsw      x22, [x8, #0xe08] };
    r0 = *(int32_t *)(r19 + r22);
    [r0 removeAllSubViews];
    asm{ ldrsw      x23, [x8, #0xd88] };
    r20 = *(int32_t *)(r19 + r23);
    if (r20 == 0x0) {
            r0 = [UIActivityIndicatorView alloc];
            r2 = 0x2;
            r0 = [r0 initWithActivityIndicatorStyle:r2];
            r8 = *(int32_t *)(r19 + r23);
            *(int32_t *)(r19 + r23) = r0;
            [r8 release];
            r20 = *(int32_t *)(r19 + r23);
    }
    r0 = *(int32_t *)(r19 + r22);
    [r0 frame];
    r0 = *(int32_t *)(r19 + r23);
    [r0 frame];
    asm{ fsub       d0, d8, d2 };
    asm{ fcvtzs     w8, d0 };
    asm{ cinc       w8, w8, lt };
    asm{ scvtf      d8, w8 };
    r0 = *(int32_t *)(r19 + r22);
    [r0 frame];
    r0 = *(int32_t *)(r19 + r23);
    [r0 frame];
    asm{ fsub       d0, d9, d3 };
    asm{ fcvtzs     w8, d0 };
    asm{ cinc       w8, w8, lt };
    asm{ scvtf      d9, w8 };
    r0 = *(int32_t *)(r19 + r23);
    [r0 frame];
    r0 = *(int32_t *)(r19 + r23);
    [r0 frame];
    [r20 setFrame:r2];
    r0 = *(int32_t *)(r19 + r23);
    asm{ movz       w2, #0x5 };
    [r0 setAutoresizingMask:r2];
    r0 = *(int32_t *)(r19 + r22);
    r2 = *(int32_t *)(r19 + r23);
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x60 };
    r0 = [r0 addSubview:r2];
    return;
}

- (void)startVoiceAnimatingAtNodeId:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r20 = arg2;
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [LazyExtensionAgent class];
    r25 = [[r19 getService:r2] retain];
    asm{ nop         };
    r21 = @selector(numberWithUnsignedInt:);
    r0 = [NSNumber numberWithUnsignedInt:r2];
    r27 = [r0 retain];
    [r25 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:@selector(onMessageStartPlaying) forKey:STK-1];
    [r27 release];
    [r25 release];
    [r19 release];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r22 getService:[MMExtensionCenter class]];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
    r29 = 0x50;
    r23 = [r0 retain];
    [r19 release];
    [r22 release];
    if (r23 != 0x0) {
            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
            r8 = 0x103953000;
            *(int32_t *)(r31 + 0x8) = r23;
            r0 = [r23 getKeyExtensionList:r19];
            r29 = 0x50;
            r20 = [r0 retain];
            [r19 release];
            asm{ movz       w8, #0x0 };
            r21 = @selector(count);
            asm{ nop         };
            r22 = @selector(objectAtIndex:);
            r23 = @selector(m_deleteMark);
            asm{ nop         };
            r24 = @selector(getObject);
            r25 = @selector(onMessageStartPlaying);
            r26 = @selector(respondsToSelector:);
            do {
                    r27 = r8;
                    if (r27 >= [r20 count]) {
                        break;
                    }
                    r0 = [r20 objectAtIndex:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r28 = r0;
                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                            r0 = [r28 getObject];
                            r29 = r29;
                            r0 = [r0 retain];
                            r19 = r0;
                            if ([r0 respondsToSelector:r2] != 0x0) {
                                    [r19 onMessageStartPlaying];
                            }
                            [r19 release];
                    }
                    [r28 release];
                    r8 = r27 + 0x1;
            } while (true);
            [r20 release];
            r23 = *(int32_t *)(r31 + 0x8);
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r23 release];
    return;
}

- (void)reloadTableHeaderView:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x40;
    r19 = self;
    if (arg2 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xe08] };
            r22 = r19 + 0x1039e8000;
            r2 = *(int32_t *)r22;
            if (r2 == 0x0) {
                    r20 = [UIView alloc];
                    [UiUtil screenWidthCurOri];
                    asm{ movi.16b   v0, #0x0 };
                    asm{ movi.16b   v1, #0x0 };
                    r0 = [r20 initWithFrame:r2];
                    r8 = *(int32_t *)r22;
                    *(int32_t *)r22 = r0;
                    [r8 release];
                    r2 = *(int32_t *)r22;
            }
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 setTableHeaderView:r2];
            r0 = *(int32_t *)r22;
            r20 = [NSStringFromCGRect([r0 frame]) retain];
            asm{ stp        x8, x20, [sp] };
            asm{ movz       w6, #0xca8 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r20 release];
            [r19 initTableHeaderView];
            asm{ movz       w2, #0x0 };
            0x0 = 0x20 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r19 updateOpBtnState:0x1];
    }
    else {
            *(int32_t *)(r31 + 0x18) = *(int32_t *)_NSConcreteStackBlock;
            asm{ movz       w8, #0xc200, lsl #16 };
            asm{ stp        w8, wzr, [sp, #0x20] };
            asm{ nop         };
            *(int32_t *)(r31 + 0x28) = 0x101d1a550;
            *(int32_t *)(r31 + 0x30) = 0x103218780;
            *(int32_t *)(r31 + 0x38) = [r19 retain];
            r0 = *(int32_t *)_dispatch_main_q;
            dispatch_async(r0, 0x18);
            r0 = *(int32_t *)(r31 + 0x38);
            r0 = [r0 release];
            0x0 = 0x20 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)initTableView
{
    asm{ stp        d9, d8, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r25 = r19 + 0x1039e8000;
    r0 = *(int32_t *)r25;
    if (r0 == 0x0) {
            r21 = [YYTableView alloc];
            r0 = [r19 view];
            r0 = [r0 retain];
            r20 = r0;
            [r0 width];
            r0 = [r19 view];
            r29 = 0x50;
            r0 = [r0 retain];
            r22 = r0;
            [r0 height];
            asm{ movi.16b   v0, #0x0 };
            asm{ movi.16b   v1, #0x0 };
            asm{ movz       x2, #0x0 };
            r0 = [r21 initWithFrame:r2 style:r3];
            r8 = *(int32_t *)r25;
            *(int32_t *)r25 = r0;
            [r8 release];
            [r22 release];
            [r20 release];
            r0 = *(int32_t *)r25;
    }
    [r0 setDelegate:r19];
    r0 = *(int32_t *)r25;
    [r0 setDataSource:r19];
    r0 = *(int32_t *)r25;
    [r0 setScrollEnabled:0x1];
    r0 = *(int32_t *)r25;
    [r0 setScrollsToTop:0x1];
    r0 = *(int32_t *)r25;
    [r0 setM_delegate:r19];
    r0 = *(int32_t *)r25;
    r0 = [r0 panGestureRecognizer];
    r0 = [r0 retain];
    r20 = r0;
    [r0 addTarget:r19 action:@selector(onPan:)];
    [r20 release];
    asm{ ldrsw      x8, [x8, #0xe0c] };
    r22 = *(int32_t *)(r19 + 0x1039e8000);
    r21 = *(int32_t *)r25;
    r0 = [MMThemeManager sharedThemeManager];
    r29 = r29;
    r20 = [r0 retain];
    r1 = @selector(colorList);
    if (r22 != 0x0) {
            r0 = [r20 colorList];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getColorByName:@"clear"];
            r29 = r29;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r24 = r0;
            [r23 release];
            r2 = r24;
            [r21 setBackgroundColor:r2];
    }
    else {
            r0 = [r20 colorList];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getColorByName:@"CHAT_BACKGROUND_COLOR"];
            r29 = r29;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r24 = r0;
            [r23 release];
            r2 = r24;
            [r21 setBackgroundColor:r2];
    }
    [r24 release];
    [r23 release];
    [r22 release];
    [r20 release];
    r0 = *(int32_t *)r25;
    asm{ movz       x2, #0x0 };
    [r0 setSeparatorStyle:r2];
    r0 = *(int32_t *)r25;
    [r0 setIndicatorStyle:0x1];
    r0 = *(int32_t *)r25;
    [r0 setAllowsSelectionDuringEditing:0x1];
    r0 = *(int32_t *)r25;
    [r0 setCancelButtonTouchsTrack:0x1];
    r0 = *(int32_t *)r25;
    asm{ movz       w2, #0x0 };
    [r0 setEditing:0x1 animated:0x1];
    r0 = [r19 view];
    r0 = [r0 retain];
    r20 = r0;
    r2 = *(int32_t *)r25;
    [r0 addSubview:r2];
    [r20 release];
    r0 = [r19 m_badRoomLogicController];
    r0 = [r0 retain];
    r21 = [r0 hasBadRoomUnread];
    [r0 release];
    if (r21 != 0x0) {
            r2 = 0x1;
            [r19 setTableFooterView:r2];
    }
    r0 = *(int32_t *)r25;
    [r0 reloadData];
    asm{ movz       w2, #0x0 };
    [r19 scrollTableToBottomAnimated:r2 init:0x1];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 ShouldShowMultiSelectMode];
    r0 = [r0 release];
    if (r21 != 0x0) {
            asm{ movz       x2, #0x0 };
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x60 };
            r0 = [r19 onEditMessage:r2];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x60 };
            return;
    }
    return;
}

- (void)initToolEmoticonView
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x25, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + r25);
    r20 = @selector(contentMode);
    r0 = [r0 contentMode];
    if (r0 == 0x2) {
            r0 = *(int32_t *)(r19 + r25);
            [r0 initEmoticonView];
            r21 = *(int32_t *)(r19 + r25);
            r2 = [r21 contentMode];
            asm{ movz       w3, #0x0 };
            [r21 setContentMode:r2 animated:r3];
            r20 = *(int32_t *)(r19 + r25);
            r2 = [r20 positionMode];
            asm{ movz       w3, #0x0 };
            [r20 setPoisitionMode:r2 animated:r3];
            r20 = *(int32_t *)(r19 + r25);
            r2 = [r20 inputMode];
            asm{ movz       w3, #0x0 };
            [r20 setInputMode:r2 animated:r3];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r20);
            r21 = r0;
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(CustomToolViewEX:);
                    asm{ nop         };
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    r0 = [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            [r0 CustomToolViewEX:r2];
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    return;
}

- (void)initToolView
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x25, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + r25);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(r19 + r25);
    *(int32_t *)(r19 + r25) = 0x0;
    [r0 release];
    r22 = [MMInputToolView alloc];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    r0 = [r22 initWithUIDelegate:r21];
    r8 = *(int32_t *)(r19 + r25);
    *(int32_t *)(r19 + r25) = r0;
    [r8 release];
    [r21 release];
    r0 = *(int32_t *)(r19 + r25);
    [r0 setDelegate:r19];
    r22 = *(int32_t *)(r19 + r25);
    r21 = [[UIColor clearColor] retain];
    [r22 setBackgroundColor:r21];
    [r21 release];
    r22 = *(int32_t *)(r19 + r25);
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMConfigMgr class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r2 = [r0 getInputLimitForTextMsg];
    [r22 setFMaxLength:r2];
    [r23 release];
    [r21 release];
    r23 = *(int32_t *)(r19 + r25);
    r0 = [r19 view];
    r0 = [r0 retain];
    r22 = r0;
    [r0 bounds];
    [r23 setFrame:r2];
    [r22 release];
    r0 = *(int32_t *)(r19 + r25);
    asm{ movz       w2, #0x12 };
    [r0 setAutoresizingMask:r2];
    r0 = [r19 view];
    r0 = [r0 retain];
    r21 = r0;
    r2 = *(int32_t *)(r19 + r25);
    [r0 addSubview:r2];
    [r21 release];
    r0 = objc_loadWeakRetained(r20);
    r21 = r0;
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(CustomToolViewEX:);
            asm{ nop         };
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            r0 = [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = r0;
                    [r0 CustomToolViewEX:r2];
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    return;
}

- (id)ShouldShowKeyboardAnimation
{
    r0 = self;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x858] };
    if (*(int8_t *)(r0 + 0x1039ef000) != 0x0) {
            asm{ movz       w0, #0x0 };
            return r0;
    }
    else {
            asm{ ldrsw      x8, [x8, #0xe10] };
            asm{ cset       w0, ne };
            return r0;
    }
    return r0;
}

- (id)isViewControllerAnimated
{
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x85c] };
    r0 = *(int8_t *)(self + 0x1039ef000);
    return r0;
}

- (id)gestureRecognizer:(id)arg2 shouldBeRequiredToFailByGestureRecognizer:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xe0;
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    asm{ stur       x22, [x29, #0xffffffa8] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    r0 = [arg3 view];
    r0 = [r0 retain];
    r21 = r0;
    r8 = 0x103950000;
    r0 = [r0 subviews];
    r19 = [r0 retain];
    [r21 release];
    r3 = 0x58;
    r21 = [r19 countByEnumeratingWithState:0x18 objects:r3 count:STK-1];
    if (r21 == 0x0) goto loc_101d1b100;
    goto loc_101d1afd0;

loc_101d1b100:
    r20 = 0x1;

loc_101d1b104:
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r22 == r8) {
            r0 = r20;
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d1afd0:
    r20 = 0x103950000;
    r27 = **(int32_t *)(r31 + 0x28);
    *(int32_t *)(r31 + 0x10) = *(int32_t *)(r20 + 0xa18);
    r8 = 0x103950000;
    r9 = 0x103951000;
    r10 = 0x103953000;
    asm{ movz       w28, #0x1001 };

loc_101d1aff4:
    asm{ movz       x20, #0x0 };
    r22 = *(int32_t *)(r8 + 0x608);
    r23 = *(int32_t *)(r9 + 0x358);
    r24 = *(int32_t *)(r10 + 0x998);

loc_101d1b004:
    if (**(int32_t *)(r31 + 0x28) != r27) {
            objc_enumerationMutation(r19);
    }
    r25 = *(int32_t *)(*(int32_t *)(r31 + 0x20) + r20 * 0x8);
    objc_msgSend(*(int32_t *)(0x1039c3000 + 0x508), r22);
    if ((objc_msgSend(r25, r23) != 0x0) && (objc_msgSend(r25, r24) == r28)) goto loc_101d1b0a4;
    goto loc_101d1b058;

loc_101d1b0a4:
    r8 = @"find headImageView in gestureRecognizer.view";
    *(int32_t *)r31 = r8;
    asm{ movz       w6, #0xd13 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ movz       w20, #0x0 };
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    goto loc_101d1b104;

loc_101d1b058:
    r20 = r20 + 0x1;
    if (r20 < r21) goto loc_101d1b004;
    r3 = 0x58;
    r21 = objc_msgSend(r19, *(int32_t *)(r31 + 0x10));
    r8 = 0x103950000;
    r9 = 0x103951000;
    r10 = 0x103953000;
    if (r21 != 0x0) goto loc_101d1aff4;
    r20 = 0x1;
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    goto loc_101d1b104;
}

- (id)gestureRecognizerShouldBegin:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    *(int32_t *)r31 = r20;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
    if (([[0x0 super] gestureRecognizerShouldBegin:r19] & 0x1 << 0x0) != 0x0) {
            r0 = [r20 view];
            r29 = 0x30;
            r21 = [r0 retain];
            [r19 locationInView:r21];
            [r21 release];
            asm{ ldrsw      x21, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + r21);
            if ([r0 positionMode] == 0x2) {
                    r0 = *(int32_t *)(r20 + r21);
                    if ([r0 contentMode] != 0x1) {
                            r0 = *(int32_t *)(r20 + r21);
                            r0 = [r0 toolView];
                            r29 = r29;
                            r0 = [r0 retain];
                            r21 = r0;
                            [r0 bottom];
                            [r21 release];
                            asm{ fcmp       d8, d9 };
                            if (CPU_FLAGS & LE) {
                                    asm{ movz       w20, #0x0 };
                            }
                            else {
                                    r20 = 0x1;
                            }
                    }
                    else {
                            r20 = 0x1;
                    }
            }
            else {
                    r20 = 0x1;
            }
    }
    else {
            asm{ movz       w20, #0x0 };
    }
    [r19 release];
    r0 = r20;
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return r0;
}

- (void)initMultiSelectToolView
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    asm{ ldrsw      x21, [x8, #0xe14] };
    r0 = *(int32_t *)(self + r21);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(self + r21);
    *(int32_t *)(self + r21) = 0x0;
    [r0 release];
    r0 = [MMMultiSelectToolView alloc];
    r0 = [r0 init];
    r8 = *(int32_t *)(self + r21);
    *(int32_t *)(self + r21) = r0;
    [r8 release];
    r0 = *(int32_t *)(self + r21);
    [r0 setM_delegate:self];
    r20 = *(int32_t *)(self + r21);
    [r20 origin];
    *(int32_t *)r31 = self;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
    [[0x0 super] getVisibleHeight];
    [r20 setOrigin:self];
    r0 = [self view];
    r0 = [r0 retain];
    r20 = r0;
    r2 = *(int32_t *)(self + r21);
    [r0 addSubview:r2];
    [r20 release];
    r0 = *(int32_t *)(self + r21);
    r0 = [r0 setHidden:0x1];
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return;
}

- (id)getHomePageBarButton
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 imageNamed:@"contacts_home_icon.png"];
    r19 = [r0 retain];
    [r21 release];
    r0 = [UIButton alloc];
    asm{ fmov       d2, #0x10 };
    asm{ fmov       d3, #0x1e };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    r21 = [r0 initWithFrame:@"contacts_home_icon.png"];
    asm{ fmov       d1, #0xfffffffffffffff8 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v2, #0x0 };
    [r21 setImageEdgeInsets:@"contacts_home_icon.png"];
    asm{ movz       x3, #0x0 };
    [r21 setImage:r19 forState:r3];
    [r21 setImage:r19 forState:0x1];
    [r21 addTarget:self action:@selector(openHomePage:) forControlEvents:STK-1];
    r0 = [MMBarButtonItem alloc];
    r22 = [r0 initWithCustomView:r21];
    [r22 setWidth:r21];
    [r21 release];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r22 autorelease];
    return r0;
}

- (id)getVoipBarButton
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [VoipUIManager class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = [r0 showVideoEntranceInMainFrame];
    [r0 release];
    [r20 release];
    r22 = VoipUIManager;
    r0 = [r19 GetContact];
    r20 = [r0 retain];
    if (r21 == 0x0) goto loc_101d1b7d0;
    goto loc_101d1b678;

loc_101d1b7d0:
    r21 = [r22 canStartVoiceWithContact:r20];
    [r20 release];
    if ((r21 & 0x1 << 0x0) == 0x0) goto loc_101d1b934;
    goto loc_101d1b7f4;

loc_101d1b934:
    asm{ movz       x22, #0x0 };

loc_101d1b938:
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r22 autorelease];
    return r0;

loc_101d1b7f4:
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 imageNamed:@"contacts_audiocall.png"];
    r20 = [r0 retain];
    [r21 release];
    r0 = [UIButton alloc];
    asm{ fmov       d2, #0x10 };
    asm{ fmov       d3, #0x1e };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    r21 = [r0 initWithFrame:@"contacts_audiocall.png"];
    asm{ fmov       d1, #0xfffffffffffffff8 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v2, #0x0 };
    [r21 setImageEdgeInsets:@"contacts_audiocall.png"];
    asm{ movz       x3, #0x0 };
    [r21 setImage:r20 forState:r3];
    [r21 setImage:r20 forState:0x1];
    [r21 addTarget:r19 action:@selector(openVoiceCall) forControlEvents:STK-1];
    r0 = [MMBarButtonItem alloc];
    r22 = [r0 initWithCustomView:r21];
    [r22 setWidth:r21];

loc_101d1b920:
    [r21 release];
    [r20 release];
    goto loc_101d1b938;

loc_101d1b678:
    r21 = [r22 canStartVideoWithContact:r20];
    [r20 release];
    if ((r21 & 0x1 << 0x0) == 0x0) goto loc_101d1b934;
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 imageNamed:@"contacts_videocall.png"];
    r20 = [r0 retain];
    [r21 release];
    r0 = [UIButton alloc];
    asm{ fmov       d2, #0x10 };
    asm{ fmov       d3, #0x1e };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    r21 = [r0 initWithFrame:@"contacts_videocall.png"];
    asm{ fmov       d1, #0xfffffffffffffff8 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v2, #0x0 };
    [r21 setImageEdgeInsets:@"contacts_videocall.png"];
    asm{ movz       x3, #0x0 };
    [r21 setImage:r20 forState:r3];
    [r21 setImage:r20 forState:0x1];
    [r21 addTarget:r19 action:@selector(openVideoCall) forControlEvents:STK-1];
    r0 = [MMBarButtonItem alloc];
    r22 = [r0 initWithCustomView:r21];
    [r22 setWidth:r21];
    goto loc_101d1b920;
}

- (void)openVideoCall
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r0 = [self GetContact];
    r29 = 0x20;
    r19 = [r0 retain];
    r21 = @selector(class);
    r2 = [CContact class];
    if (([r19 isKindOfClass:r2] & 0x1 << 0x0) != 0x0) {
            r20 = [r19 retain];
            *(int32_t *)r31 = @"[voip in chat title]: open video call";
            asm{ movz       w6, #0xd82 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [VoipUIManager class];
            r0 = [r22 getService:r2];
            r29 = 0x20;
            r0 = [r0 retain];
            r21 = r0;
            asm{ movz       x4, #0x0 };
            asm{ movz       w5, #0x0 };
            [r0 openVideoVoipViewWithContact:r20 isCaller:0x1 andMsgWrap:STK0 isEarMode:STK-1];
            [r21 release];
            [r22 release];
            [r20 release];
    }
    else {
            *(int32_t *)r31 = @"[voip in chat title]: baseContact is not CContact";
            asm{ movz       w6, #0xd7d };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    0x0 = r29 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)openVoiceCall
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r0 = [self GetContact];
    r29 = 0x20;
    r19 = [r0 retain];
    r21 = @selector(class);
    r2 = [CContact class];
    if (([r19 isKindOfClass:r2] & 0x1 << 0x0) != 0x0) {
            r20 = [r19 retain];
            *(int32_t *)r31 = @"[voip in chat title]: open voice call";
            asm{ movz       w6, #0xd90 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [VoipUIManager class];
            r0 = [r22 getService:r2];
            r29 = 0x20;
            r0 = [r0 retain];
            r21 = r0;
            asm{ movz       x4, #0x0 };
            [r0 openVoipViewWithContact:r20 isCaller:0x1 andMsgWrap:STK-1];
            [r21 release];
            [r22 release];
            [r20 release];
    }
    else {
            *(int32_t *)r31 = @"[voip in chat title]: baseContact is not CContact";
            asm{ movz       w6, #0xd8b };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    0x0 = r29 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)openHomePage:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r0 = [self GetContact];
    r0 = [r0 retain];
    r19 = [[r0 getMainPageUrl] retain];
    [r0 release];
    r20 = [[NSMutableDictionary dictionary] retain];
    *(int32_t *)r31 = 0x6;
    r23 = [[NSString stringWithFormat:@"%u", r3] retain];
    [r20 setObject:r23 forKey:@"WCPayJSAPIPayChannel"];
    [r23 release];
    r23 = [MMWebViewController alloc];
    r24 = [[NSURL URLWithString:r19] retain];
    asm{ movz       w3, #0x0 };
    r23 = [r23 initWithURL:r24 presentModal:@"WCPayJSAPIPayChannel" extraInfo:STK-1];
    [r24 release];
    r22 = [[self GetContact] retain];
    [r23 setBrandContact:r22];
    [r22 release];
    [r23 setWebviewType:0x2];
    r0 = [self navigationController];
    r0 = [r0 retain];
    r22 = r0;
    [r0 PushViewController:r23 animated:0x1];
    [r22 release];
    [r23 release];
    [r20 release];
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (id)getRightBarButton
{
    asm{ stp        d11, d10, [sp, #0xffffff80]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r29 = 0x70;
    0x0 = 0x0 - 0x20;
    r20 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r22 = [r0 canShowChatRoomInfo];
    [r0 release];
    if ((r22 & 0x1 << 0x0) == 0x0) goto loc_101d1c114;
    goto loc_101d1c010;

loc_101d1c114:
    asm{ movz       x22, #0x0 };

loc_101d1c650:
    0x0 = r29 - 0x70;
    asm{ ldp        x29, x30, [sp, #0x70] };
    asm{ ldp        x20, x19, [sp, #0x60] };
    asm{ ldp        x22, x21, [sp, #0x50] };
    asm{ ldp        x24, x23, [sp, #0x40] };
    asm{ ldp        x26, x25, [sp, #0x30] };
    asm{ ldp        x28, x27, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x80 };
    r0 = [r22 autorelease];
    return r0;

loc_101d1c010:
    r0 = objc_loadWeakRetained(r21);
    r22 = [r0 ShouldShowSearchCompleteRightBarButton];
    [r0 release];
    if ((r22 & 0x1 << 0x0) == 0x0) goto loc_101d1c114;
    r19 = objc_loadWeakRetained(r21);
    if (r19 == 0x0) goto loc_101d1c0b0;
    goto loc_101d1c048;

loc_101d1c0b0:
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r19 = r0;
            r23 = @selector(GetRightBarButtonImageName);
            if ([r0 respondsToSelector:r23] != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r24 = r0;
                    r0 = [r0 GetRightBarButtonImageName];
                    r29 = r29;
                    r23 = [r0 retain];
                    [r24 release];
            }
            else {
                    asm{ movz       x23, #0x0 };
            }
            [r19 release];
            r27 = r23;
    }
    else {
            asm{ movz       x23, #0x0 };
            asm{ movz       x27, #0x0 };
    }
    [r22 release];
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r24 = r0;
            r19 = @selector(GetRightBarButtonTitle);
            if ([r0 respondsToSelector:r19] != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r21 = r0;
                    r0 = [r0 GetRightBarButtonTitle];
                    r29 = r29;
                    r19 = [r0 retain];
                    [r21 release];
            }
            else {
                    asm{ movz       x19, #0x0 };
            }
            [r24 release];
            r21 = r19;
    }
    else {
            asm{ movz       x19, #0x0 };
            asm{ movz       x21, #0x0 };
    }
    [r22 release];
    if (r23 == 0x0) goto loc_101d1c2a4;
    goto loc_101d1c1cc;

loc_101d1c2a4:
    if (r19 == 0x0) goto loc_101d1c3bc;
    goto loc_101d1c2a8;

loc_101d1c3bc:
    asm{ movz       x22, #0x0 };

loc_101d1c3c0:
    r0 = [r20 GetContact];
    r29 = r29;
    r0 = [r0 retain];
    r23 = [r0 isWeSportContact];
    [r0 release];
    if (r23 != 0x0) {
            r0 = [SettingUtil getMainSettingExt];
            r29 = r29;
            r0 = [r0 retain];
            r23 = [r0 m_bHasAlreadyEnterWeSportProfile];
            [r0 release];
            if ((r23 & 0x1 << 0x0) == 0x0) {
                    r0 = [MMThemeManager sharedThemeManager];
                    *(int32_t *)(r31 + 0x10) = r21;
                    r0 = [r0 retain];
                    r23 = [[r0 imageNamed:@"AlbumNewNotify.png"] retain];
                    [r0 release];
                    r0 = [UIImageView alloc];
                    r0 = [r0 initWithImage:r23];
                    asm{ ldrsw      x21, [x8, #0xd98] };
                    r8 = *(int32_t *)(r20 + r21);
                    *(int32_t *)(r20 + r21) = r0;
                    [r8 release];
                    r26 = *(int32_t *)(r20 + r21);
                    r0 = [r22 customView];
                    *(int32_t *)(r31 + 0x18) = r27;
                    r0 = [r0 retain];
                    r24 = r0;
                    [r0 bounds];
                    r0 = [r22 customView];
                    r0 = [r0 retain];
                    r27 = r0;
                    [r0 bounds];
                    r0 = [r22 customView];
                    r0 = [r0 retain];
                    r28 = r0;
                    [r0 bounds];
                    [r23 size];
                    [r23 size];
                    asm{ fadd       d0, d8, d9 };
                    asm{ fmov       d1, #0xffffffffffffffea };
                    asm{ fadd       d0, d0, d1 };
                    asm{ fmov       d1, #0x2 };
                    asm{ fadd       d1, d10, d1 };
                    [r26 setFrame:r23];
                    [r28 release];
                    [r27 release];
                    [r24 release];
                    r27 = *(int32_t *)(r31 + 0x18);
                    r0 = [r22 customView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r19 = r0;
                    r2 = *(int32_t *)(r20 + r21);
                    [r0 addSubview:r2];
                    [r19 release];
                    r0 = *(int32_t *)(r20 + r21);
                    asm{ movz       w2, #0x0 };
                    [r0 setHidden:r2];
                    *(int32_t *)r31 = @"the WeSportRedDot Show Up!!!";
                    asm{ movz       w6, #0xddb };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                    [r23 release];
                    r21 = *(int32_t *)(r31 + 0x10);
            }
    }
    [r21 release];
    [r27 release];
    goto loc_101d1c650;

loc_101d1c2a8:
    asm{ movz       x22, #0x0 };
    r3 = r20;
    r0 = [MMUICommonUtil getBarButtonWithTitle:r19 target:r3 action:STK0 style:STK-1];
    r29 = r29;
    r22 = [r0 retain];

loc_101d1c2e0:
    if (r22 != 0x0) {
            [r22 setIsAccessibilityElement:0x1];
            r23 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r24 = r0;
            r3 = @"VoiceOver_BarButton_FriendProfile_AccessibilityDescrible";
            r0 = [r0 getStringForCurLanguage:0x103338000 defaultTo:r3];
            r29 = r29;
            r19 = [r0 retain];
            [r22 setAccessibilityLabel:r19];
            [r19 release];
            [r24 release];
            [r23 release];
            r2 = **(int32_t *)UIAccessibilityTraitButton;
            [r22 setAccessibilityTraits:r2];
    }
    else {
            asm{ movz       x22, #0x0 };
    }
    goto loc_101d1c3c0;

loc_101d1c1cc:
    asm{ nop         };
    asm{ movz       x22, #0x0 };
    r24 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getStringForCurLanguage:0x10329e000 defaultTo:@"MessageContent_Title"];
    r19 = [r0 retain];
    r3 = r20;
    r0 = [MMUICommonUtil getBarButtonWithImageName:r23 target:r3 action:STK1 style:STK0 accessibility:STK-1];
    r29 = r29;
    r22 = [r0 retain];
    [r19 release];
    [r26 release];
    [r24 release];
    goto loc_101d1c2e0;

loc_101d1c048:
    r0 = objc_loadWeakRetained(r21);
    r23 = r0;
    r22 = @selector(GetRightBarBtn);
    r24 = [r0 respondsToSelector:r22];
    [r23 release];
    [r19 release];
    if (r24 == 0x0) goto loc_101d1c0b0;
    r0 = objc_loadWeakRetained(r21);
    r19 = r0;
    r0 = [r0 GetRightBarBtn];
    r29 = 0x70;
    r22 = [r0 retain];
    [r19 release];
    if (r22 != 0x0) goto loc_101d1c650;
    goto loc_101d1c0b0;
}

- (id)getLeftBarButton
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x60;
    *(int32_t *)(r31 + 0x58) = self;
    *(int32_t *)(r31 + 0x30) = @selector(GetContact);
    r0 = [self GetContact];
    r0 = [r0 retain];
    r21 = [r0 isLbsroom];
    [r0 release];
    if (r21 == 0x0) goto loc_101d1c8c4;
    goto loc_101d1c840;

loc_101d1c8c4:
    *(int32_t *)(r31 + 0x20) = @selector(navigationController);
    asm{ movz       x27, #0x0 };
    r0 = *(int32_t *)(r31 + 0x58);
    r0 = [r0 navigationController];
    r0 = [r0 retain];
    r21 = r0;
    *(int32_t *)(r31 + 0x18) = @selector(viewControllers);
    r0 = [r0 viewControllers];
    r29 = 0x50;
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x8) = @selector(count);
    r22 = [r0 count];
    [r0 release];
    [r21 release];
    r23 = r22 - 0x1;
    if ((r23 & 0x1 << 0x3f) != 0x0) goto loc_101d1ca68;
    goto loc_101d1c930;

loc_101d1ca68:
    asm{ movz       x27, #0x0 };

loc_101d1cb8c:
    r26 = [objc_msgSend(*(int32_t *)(r31 + 0x58), *(int32_t *)(r31 + 0x30)) retain];
    *(int32_t *)(r31 + 0x48) = @selector(defaultCenter);
    asm{ movz       x28, #0x0 };
    r22 = [[MMServiceCenter defaultCenter] retain];
    *(int32_t *)(r31 + 0x50) = @selector(class);
    r2 = [WCTempChatMgr class];
    *(int32_t *)(r31 + 0x40) = @selector(getService:);
    r23 = [[r22 getService:r2] retain];
    *(int32_t *)(r31 + 0x38) = @selector(m_nsUsrName);
    r0 = [r26 m_nsUsrName];
    r29 = r29;
    r20 = [r0 retain];
    r21 = [r23 isFromBusinessJump:r20];
    *(int32_t *)(r31 + 0x10) = @selector(isFromBusinessJump:);
    [r20 release];
    [r23 release];
    [r22 release];
    if (r21 != 0x0) {
            asm{ movz       x28, #0x0 };
            r0 = *(int32_t *)(r31 + 0x58);
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
            r0 = [r0 retain];
            r23 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
            r29 = r29;
            r0 = [r0 retain];
            r22 = objc_msgSend(r0, *(int32_t *)(r31 + 0x8)) - 0x2;
            [r0 release];
            [r23 release];
            if ((r22 & 0x1 << 0x3f) == 0x0) {
                    r0 = *(int32_t *)(r31 + 0x58);
                    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
                    r0 = [r0 retain];
                    r23 = r0;
                    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
                    r0 = [r0 retain];
                    r24 = r0;
                    r0 = [r0 objectAtIndex:r22];
                    r29 = r29;
                    r22 = [r0 retain];
                    [r24 release];
                    [r23 release];
                    r2 = objc_msgSend(NewMainFrameViewController, *(int32_t *)(r31 + 0x50));
                    if (([r22 isKindOfClass:r2] & 0x1 << 0x0) == 0x0) {
                            r23 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48)) retain];
                            objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x50));
                            r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x40));
                            r0 = [r0 retain];
                            r24 = r0;
                            r0 = [r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Return"];
                            r29 = r29;
                            r20 = [r0 retain];
                            [r27 release];
                            [r24 release];
                            [r23 release];
                            r27 = r20;
                    }
                    [r22 release];
            }
    }
    asm{ movz       x28, #0x0 };
    r0 = *(int32_t *)(r31 + 0x58);
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x30));
    r0 = [r0 retain];
    r20 = r0;
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x38));
    *(int32_t *)(r31 + 0x28) = r26;
    r29 = r29;
    r23 = [r0 retain];
    r1 = @selector(isWeAppUserName:);
    r21 = [CContact isWeAppUserName:r2];
    [r23 release];
    [r20 release];
    if (r21 == 0x0) goto loc_101d1ceb0;
    goto loc_101d1ce2c;

loc_101d1ceb0:
    if (r27 != 0x0) goto loc_101d1d09c;
    goto loc_101d1ceb4;

loc_101d1d09c:
    r21 = @selector(onBackButtonClicked:);
    asm{ nop         };
    asm{ movz       x28, #0x0 };
    r3 = *(int32_t *)(r31 + 0x58);
    r26 = *(int32_t *)(r31 + 0x28);
    r28 = [[MMUICommonUtil getBarButtonWithTitle:r27 target:r3 action:STK0 style:STK-1] retain];
    r22 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48)) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x50));
    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x40));
    r0 = [r0 retain];
    r23 = r0;
    r20 = [[r0 getStringForCurLanguage:0x103325000 defaultTo:@"TabBar_MainFrameTitle"] retain];
    [r28 setAccessibilityLabel:r20];
    [r20 release];
    [r23 release];
    [r22 release];
    r2 = **(int32_t *)UIAccessibilityTraitButton;
    [r28 setAccessibilityTraits:r2];
    r0 = objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48));
    *(int32_t *)(r31 + 0x30) = @selector(getStringForCurLanguage:defaultTo:);
    r22 = [r0 retain];
    objc_msgSend(WCTempChatMgr, *(int32_t *)(r31 + 0x50));
    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x40));
    *(int32_t *)(r31 + 0x20) = @selector(getBarButtonWithTitle:target:action:style:);
    r24 = [r0 retain];
    r0 = objc_msgSend(r26, *(int32_t *)(r31 + 0x38));
    r29 = r29;
    r25 = [r0 retain];
    r1 = *(int32_t *)(r31 + 0x10);
    if (objc_msgSend(r24, r1) != 0x0) {
            r23 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48)) retain];
            objc_msgSend(*(int32_t *)(0x1039c3000 + 0xf90), *(int32_t *)(r31 + 0x50));
            r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x40));
            *(int32_t *)(r31 + 0x18) = r21;
            r20 = [r0 retain];
            r0 = objc_msgSend(r26, *(int32_t *)(r31 + 0x38));
            r29 = r29;
            r21 = [r0 retain];
            r26 = [r20 getJumpSceneValue:r21];
            [r21 release];
            [r20 release];
            [r23 release];
            [r25 release];
            [r24 release];
            [r22 release];
            COND = r26 != 0x1;
            r26 = *(int32_t *)(r31 + 0x28);
            if (!COND) {
                    asm{ nop         };
                    r0 = objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48));
                    asm{ ldp        x21, x25, [sp, #0x18] };
                    r20 = *(int32_t *)(r31 + 0x30);
                    r22 = [r0 retain];
                    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x50));
                    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x40));
                    r0 = [r0 retain];
                    r24 = r0;
                    r20 = [objc_msgSend(r0, r20) retain];
                    asm{ movz       w5, #0x0 };
                    r0 = objc_msgSend(MMUICommonUtil, r25);
                    r29 = r29;
                    r19 = [r0 retain];
                    [r28 release];
                    [r20 release];
                    [r24 release];
                    [r22 release];
                    r28 = r19;
            }
    }
    else {
            [r25 release];
            [r24 release];
            [r22 release];
    }
    r19 = [r28 retain];

loc_101d1d3b4:
    [r26 release];
    [r27 release];
    r0 = r19;

loc_101d1d3c8:
    [r0 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 autorelease];
    return r0;

loc_101d1ceb4:
    asm{ movz       x27, #0x0 };
    asm{ movz       x28, #0x0 };
    r0 = *(int32_t *)(r31 + 0x58);
    asm{ ldp        x1, x26, [sp, #0x20] };
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r20 = r0;
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
    r29 = r29;
    r0 = [r0 retain];
    r22 = objc_msgSend(r0, *(int32_t *)(r31 + 0x8));
    [r0 release];
    [r20 release];
    r20 = r22 - 0x1;
    if ((r20 & 0x1 << 0x3f) != 0x0) goto loc_101d1cfe4;
    goto loc_101d1cf0c;

loc_101d1cfe4:
    asm{ movz       x27, #0x0 };
    asm{ movz       x28, #0x0 };
    r0 = [CAppViewControllerManager getAppViewControllerManager];
    r0 = [r0 retain];
    r20 = [[r0 getNewMainFrameViewController] retain];
    [r0 release];
    asm{ movz       x27, #0x0 };
    r0 = [r20 title];
    r29 = r29;
    r27 = [r0 retain];
    r22 = @selector(m_nsTitle);
    if ([r20 respondsToSelector:r22] != 0x0) {
            r0 = [r20 m_nsTitle];
            r29 = r29;
            r21 = [r0 retain];
            [r27 release];
            r27 = r21;
    }
    [r20 release];
    goto loc_101d1d09c;

loc_101d1cf0c:
    r21 = @selector(navigationController);
    asm{ nop         };
    r22 = @selector(viewControllers);
    r24 = @selector(objectAtIndex:);
    r25 = *(int32_t *)(0x103950000 + 0x608);
    r23 = @selector(isKindOfClass:);

loc_101d1cf34:
    r0 = *(int32_t *)(r31 + 0x58);
    r0 = [r0 navigationController];
    r0 = [r0 retain];
    r27 = r0;
    r0 = [r0 viewControllers];
    r0 = [r0 retain];
    r28 = r0;
    r0 = [r0 objectAtIndex:r2];
    r29 = r29;
    r26 = [r0 retain];
    [r28 release];
    [r27 release];
    objc_msgSend(*(int32_t *)(0x1039c6000 + 0x230), r25);
    if (([r26 isKindOfClass:r2] & 0x1 << 0x0) != 0x0) goto loc_101d1cfbc;
    goto loc_101d1cfa8;

loc_101d1cfbc:
    r0 = [r26 title];
    r29 = r29;
    r27 = [r0 retain];
    [r26 release];
    if (r27 == 0x0) {
            asm{ movz       x27, #0x0 };
            asm{ movz       x28, #0x0 };
            r0 = [CAppViewControllerManager getAppViewControllerManager];
            r0 = [r0 retain];
            r20 = [[r0 getNewMainFrameViewController] retain];
            [r0 release];
            asm{ movz       x27, #0x0 };
            r0 = [r20 title];
            r29 = r29;
            r27 = [r0 retain];
            r22 = @selector(m_nsTitle);
            if ([r20 respondsToSelector:r22] != 0x0) {
                    r0 = [r20 m_nsTitle];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r27 release];
                    r27 = r21;
            }
            [r20 release];
    }
    goto loc_101d1d09c;

loc_101d1cfa8:
    [r26 release];
    r20 = r20 - 0x1;
    if ((r20 & 0x1 << 0x3f) == 0x0) goto loc_101d1cf34;
    goto loc_101d1cfe4;

loc_101d1ce2c:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = *(int32_t *)(r31 + 0x58) + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r22 = @selector(getLeftBarButton);
    r1 = @selector(respondsToSelector:);
    r21 = [r0 respondsToSelector:r2];
    [r0 release];
    if (r21 == 0x0) goto loc_101d1ceb0;
    r0 = objc_loadWeakRetained(r20);
    r20 = r0;
    r1 = r22;
    r0 = objc_msgSend(r0, r1);
    r29 = r29;
    r21 = [r0 retain];
    [r20 release];
    if (r21 == 0x0) goto loc_101d1ceb0;
    r19 = [r21 retain];
    r26 = *(int32_t *)(r31 + 0x28);
    goto loc_101d1d3b4;

loc_101d1c930:
    r24 = @selector(navigationController);
    r25 = *(int32_t *)(0x103950000 + 0xd08);
    asm{ nop         };
    r28 = @selector(objectAtIndex:);
    r21 = @selector(class);
    r26 = @selector(isKindOfClass:);

loc_101d1c958:
    r0 = *(int32_t *)(r31 + 0x58);
    r0 = [r0 navigationController];
    r0 = [r0 retain];
    r27 = r0;
    r0 = objc_msgSend(r0, r25);
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 objectAtIndex:r2];
    r29 = r29;
    r22 = [r0 retain];
    [r20 release];
    [r27 release];
    [EnterpriseBrandSessionListViewController class];
    if (([r22 isKindOfClass:r2] & 0x1 << 0x0) != 0x0) goto loc_101d1ca70;
    goto loc_101d1c9d0;

loc_101d1ca70:
    r23 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r23 getService:r2];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 getStringForCurLanguage:0x103338000 defaultTo:@"EnterpriseBrand_Back_Button_Title"];
    r29 = r29;

loc_101d1cb6c:
    r27 = [r0 retain];
    [r24 release];
    [r23 release];

loc_101d1cb84:
    [r22 release];
    goto loc_101d1cb8c;

loc_101d1c9d0:
    [EnterpriseBrandContactListViewController class];
    if ([r22 isKindOfClass:r2] != 0x0) goto loc_101d1ca70;
    [*(int32_t *)(0x1039c6000 + 0xd0) class];
    if (([r22 isKindOfClass:r2] & 0x1 << 0x0) != 0x0) goto loc_101d1cae0;
    goto loc_101d1ca14;

loc_101d1cae0:
    r0 = [r22 title];
    r29 = r29;
    r27 = [r0 retain];
    goto loc_101d1cb84;

loc_101d1ca14:
    [*(int32_t *)(0x1039c6000 + 0xd0) class];
    if ([r22 isKindOfClass:r2] != 0x0) goto loc_101d1cae0;
    [WCPayCreditPayCardDetailInfoViewController class];
    if ([r22 isKindOfClass:r2] != 0x0) goto loc_101d1cb00;
    goto loc_101d1ca58;

loc_101d1cb00:
    r23 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r23 getService:r2];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 getStringForCurLanguage:0x1032e2000 defaultTo:@"WCPay_CreditCard_Title"];
    r29 = r29;
    goto loc_101d1cb6c;

loc_101d1ca58:
    [r22 release];
    r23 = r23 - 0x1;
    if ((r23 & 0x1 << 0x3f) == 0x0) goto loc_101d1c958;
    goto loc_101d1ca68;

loc_101d1c840:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = *(int32_t *)(r31 + 0x58) + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 == 0x0) goto loc_101d1c8c4;
    r0 = objc_loadWeakRetained(r21);
    r23 = @selector(getLeftBarButton);
    r24 = [r0 respondsToSelector:r23];
    [r0 release];
    [r22 release];
    if (r24 == 0x0) goto loc_101d1c8c4;
    r0 = objc_loadWeakRetained(r21);
    r20 = r0;
    r0 = [r0 getLeftBarButton];
    r29 = 0x50;
    r19 = [r0 retain];
    r0 = r20;
    goto loc_101d1d3c8;
}

- (void)updateRightBar
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = self;
    r19 = [[NSMutableArray array] retain];
    r22 = [[r20 getRightBarButton] retain];
    r21 = @selector(addObject:);
    [r19 addObject:r2];
    [r22 release];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r23 = @selector(class);
    r2 = [MMConfigMgr class];
    r0 = [r22 getService:r2];
    r29 = 0x40;
    r0 = [r0 retain];
    r25 = [r0 shouldShowVoipInChat];
    [r0 release];
    [r22 release];
    if (r25 != 0x0) {
            r0 = [r20 getVoipBarButton];
            r29 = 0x40;
            r22 = [r0 retain];
            if (r22 != 0x0) {
                    [r19 addObject:r2];
            }
            [r22 release];
    }
    r0 = [r20 GetContact];
    r29 = r29;
    r22 = [r0 retain];
    r2 = [CContact class];
    if ([r22 isKindOfClass:r2] != 0x0) {
            r0 = [r22 retain];
            r23 = r0;
            if (([r0 isBrandContact] != 0x0) && ([r23 isOpenMainPage] != 0x0)) {
                    r0 = [r20 getHomePageBarButton];
                    r29 = r29;
                    r24 = [r0 retain];
                    [r19 addObject:r2];
                    [r24 release];
            }
            [r23 release];
    }
    r0 = [r20 navigationItem];
    r0 = [r0 retain];
    r21 = r0;
    [r0 setRightBarButtonItems:r19];
    [r21 release];
    [r22 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)initNavigationView
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    [self updateRightBar];
    r20 = @selector(navigationController);
    r0 = [r19 navigationController];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 navigationBar];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 tintColor] retain];
    r0 = [UIColor clearColor];
    r0 = [r0 retain];
    r24 = r0;
    [r0 release];
    [r23 release];
    [r22 release];
    r0 = [r21 release];
    if (r23 != r24) {
            r21 = [[r19 navigationItem] retain];
            r23 = [[r19 getLeftBarButton] retain];
            [r21 setLeftBarButtonItem:r23];
            [r23 release];
            [r21 release];
            r21 = [[r19 navigationItem] retain];
            r22 = [[r19 title] retain];
            r20 = [[r19 navigationController] retain];
            asm{ nop         };
            r0 = [MMUICommonUtil getBarButtonWithTitle:r22 target:r20 action:STK0 style:STK-1];
            r23 = [r0 retain];
            [r21 setBackBarButtonItem:r23];
            [r23 release];
            [r20 release];
            [r22 release];
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            r0 = [r21 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onBackButtonClicked:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r21 = self;
    r27 = [arg2 retain];
    r20 = [[r21 GetContact] retain];
    r23 = @selector(defaultCenter);
    r0 = [MMServiceCenter defaultCenter];
    *(int32_t *)(r31 + 0x8) = r27;
    r22 = [r0 retain];
    r24 = @selector(class);
    [WCTempChatMgr class];
    r25 = @selector(getService:);
    r27 = [[r22 getService:r2] retain];
    r26 = @selector(m_nsUsrName);
    r0 = [r20 m_nsUsrName];
    r29 = 0x50;
    r28 = [r0 retain];
    r19 = [r27 isFromBusinessJump:r28];
    [r28 release];
    [r27 release];
    [r22 release];
    r27 = *(int32_t *)(r31 + 0x8);
    if (r19 != 0x0) {
            r22 = [[MMServiceCenter defaultCenter] retain];
            [WCTempChatMgr class];
            r23 = [[r22 getService:r2] retain];
            r0 = [r20 m_nsUsrName];
            r29 = 0x50;
            r24 = [r0 retain];
            [r23 handleJumpCallBack:r24];
            [r24 release];
            [r23 release];
            [r22 release];
    }
    if (([r21 showTrackExitAlert] & 0x1 << 0x0) == 0x0) {
            r0 = [r21 navigationController];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            [r0 onBackButtonClicked:r27];
            [r22 release];
    }
    [r20 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r27 release];
    return;
}

- (id)showTrackExitAlert
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x30;
    r22 = @selector(defaultCenter);
    r20 = [[MMServiceCenter defaultCenter] retain];
    r21 = @selector(class);
    [TrackRoomMgr class];
    r23 = @selector(getService:);
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r24 = r0;
    r25 = [[r0 chatname] retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r26 = r0;
    r0 = [r0 GetContact];
    *(int32_t *)(r31 + 0x28) = self;
    r0 = [r0 retain];
    r27 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r19 = [r0 retain];
    r28 = [r25 isEqualToString:r19];
    [r19 release];
    [r27 release];
    [r26 release];
    [r25 release];
    [r24 release];
    r0 = [r20 release];
    if (r28 != 0x0) {
            r25 = [MMUIAlertView alloc];
            r20 = [[MMServiceCenter defaultCenter] retain];
            [MMLanguageMgr class];
            r0 = [r20 getService:r2];
            r0 = [r0 retain];
            *(int32_t *)(r31 + 0x18) = r0;
            *(int32_t *)(r31 + 0x10) = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"ShareLocation_Alert_Exit_Sharing"] retain];
            r24 = [[MMServiceCenter defaultCenter] retain];
            [MMLanguageMgr class];
            r0 = [r24 getService:r2];
            *(int32_t *)(r31 + 0x20) = r20;
            r0 = [r0 retain];
            r28 = r0;
            r20 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
            r22 = [[MMServiceCenter defaultCenter] retain];
            [MMLanguageMgr class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Confirm"];
            r29 = 0x50;
            r27 = [r0 retain];
            asm{ movz       x2, #0x0 };
            *(int32_t *)r31 = 0x0;
            r19 = *(int32_t *)(r31 + 0x10);
            r21 = [r25 initWithTitle:0x10325c000 message:r19 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
            [r27 release];
            [r23 release];
            [r22 release];
            [r20 release];
            [r28 release];
            [r24 release];
            [r19 release];
            r0 = *(int32_t *)(r31 + 0x18);
            [r0 release];
            r0 = *(int32_t *)(r31 + 0x20);
            [r0 release];
            asm{ movz       w2, #0x41a0 };
            [r21 setTag:0x10325c000];
            [r21 show];
            [r21 release];
            r0 = 0x1;
    }
    else {
            asm{ movz       w0, #0x0 };
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;
}

- (id)getSearchBarHeight
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    asm{ ldrsw      x23, [x8, #0xd9c] };
    r0 = *(int32_t *)(r19 + r23);
    r20 = @selector(searchBar);
    r0 = [r0 searchBar];
    r29 = 0x40;
    r21 = [r0 retain];
    if (r21 != 0x0) {
            r0 = *(int32_t *)(r19 + r23);
            r0 = [r0 searchBar];
            r29 = 0x40;
            r0 = [r0 retain];
            r22 = r0;
            [r0 bottom];
            [r22 release];
            r0 = [r21 release];
            asm{ fcmp       d8, #0x0 };
            if (CPU_FLAGS & LE) {
                    r0 = *(int32_t *)(r19 + r23);
                    r0 = [r0 searchBar];
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = r0;
                    [r0 height];
                    *(int32_t *)r31 = q0;
                    r0 = [r20 release];
            }
            else {
                    asm{ movi.16b   v0, #0x0 };
            }
    }
    else {
            r0 = [r21 release];
            asm{ movi.16b   v0, #0x0 };
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    return r0;
}

- (void)initMsgSearchHelper:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r20 = arg2;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd9c] };
    r27 = r19 + 0x1039e8000;
    r0 = *(int32_t *)r27;
    if (r0 == 0x0) {
            r0 = [MsgSearchHelper alloc];
            r0 = [r0 initWithContentsController:r19];
            r8 = *(int32_t *)r27;
            *(int32_t *)r27 = r0;
            [r8 release];
            r0 = *(int32_t *)r27;
            [r0 setM_delegate:r19];
            r0 = *(int32_t *)r27;
    }
    [r0 setM_eMsgSearchHelperScene:r20];
    r0 = *(int32_t *)r27;
    r20 = @selector(setM_bShowSearchByName:);
    asm{ movz       w2, #0x0 };
    [r0 setM_bShowSearchByName:r2];
    r0 = *(int32_t *)r27;
    r21 = @selector(setM_bShowSearchByTime:);
    asm{ movz       w2, #0x0 };
    [r0 setM_bShowSearchByTime:r2];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r23 = r19 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r23);
    r22 = r0;
    r24 = @selector(GetContact);
    r0 = [r0 GetContact];
    r29 = 0x50;
    r25 = [r0 retain];
    r2 = [CContact class];
    r26 = [r25 isKindOfClass:r2];
    [r25 release];
    [r22 release];
    if (r26 != 0x0) {
            r0 = objc_loadWeakRetained(r23);
            r25 = r0;
            r0 = [r0 GetContact];
            r29 = r29;
            r22 = [r0 retain];
            [r25 release];
            if ((([r22 isBrandContact] & 0x1 << 0x0) != 0x0) || (([r22 isLocalizedContact] & 0x1 << 0x0) != 0x0)) {
                    if ([r22 isFileHelper] != 0x0) {
                            r0 = *(int32_t *)r27;
                            r2 = 0x1;
                            [r0 setM_bShowSearchByTime:r2];
                            r0 = objc_loadWeakRetained(r23);
                            r21 = r0;
                            r0 = [r0 GetContact];
                            r29 = r29;
                            r0 = [r0 retain];
                            r24 = [r0 isChatroom];
                            [r0 release];
                            [r21 release];
                            if (r24 != 0x0) {
                                    r0 = *(int32_t *)r27;
                                    r2 = 0x1;
                                    [r0 setM_bShowSearchByName:r2];
                            }
                    }
            }
            else {
                    if ((([r22 m_isPlugin] & 0x1 << 0x0) != 0x0) || ([r22 isHolderContact] != 0x0)) {
                            if ([r22 isFileHelper] != 0x0) {
                                    r0 = *(int32_t *)r27;
                                    r2 = 0x1;
                                    [r0 setM_bShowSearchByTime:r2];
                                    r0 = objc_loadWeakRetained(r23);
                                    r21 = r0;
                                    r0 = [r0 GetContact];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r24 = [r0 isChatroom];
                                    [r0 release];
                                    [r21 release];
                                    if (r24 != 0x0) {
                                            r0 = *(int32_t *)r27;
                                            r2 = 0x1;
                                            [r0 setM_bShowSearchByName:r2];
                                    }
                            }
                    }
                    else {
                            r0 = *(int32_t *)r27;
                            r2 = 0x1;
                            [r0 setM_bShowSearchByTime:r2];
                            r0 = objc_loadWeakRetained(r23);
                            r21 = r0;
                            r0 = [r0 GetContact];
                            r29 = r29;
                            r0 = [r0 retain];
                            r24 = [r0 isChatroom];
                            [r0 release];
                            [r21 release];
                            if (r24 != 0x0) {
                                    r0 = *(int32_t *)r27;
                                    r2 = 0x1;
                                    [r0 setM_bShowSearchByName:r2];
                            }
                    }
            }
            [r22 release];
    }
    asm{ movz       w2, #0x0 };
    [r19 setAutomaticallyAdjustsScrollViewInsets:r2];
    asm{ movz       w2, #0x0 };
    [r19 setExtendedLayoutIncludesOpaqueBars:r2];
    r20 = [[r19 view] retain];
    r0 = *(int32_t *)r27;
    r0 = [r0 searchBar];
    r21 = [r0 retain];
    [r20 addSubview:r21];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r20 release];
    return;
}

- (void)resetMsgSearchHelper
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x21, [x8, #0xd9c] };
    r0 = *(int32_t *)(r19 + r21);
    if (r0 != 0x0) {
            asm{ movz       x2, #0x0 };
            [r0 setM_delegate:r2];
            r0 = *(int32_t *)(r19 + r21);
            r0 = [r0 searchBar];
            r0 = [r0 retain];
            r20 = r0;
            [r0 removeFromSuperview];
            [r20 release];
            r0 = *(int32_t *)(r19 + r21);
            *(int32_t *)(r19 + r21) = 0x0;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r0 release];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)initSearchBar
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 ShouldShowSearchBar];
    r0 = [r0 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ movz       w2, #0x0 };
            [r19 initMsgSearchHelper:r2];
            asm{ ldrsw      x22, [x8, #0xd9c] };
            r0 = *(int32_t *)(r19 + r22);
            r20 = @selector(searchBar);
            r0 = [r0 searchBar];
            r29 = 0x20;
            r0 = [r0 retain];
            r21 = r0;
            asm{ fmov       d0, #0x14 };
            [r0 setY:r2];
            [r21 release];
            r0 = *(int32_t *)(r19 + r22);
            r0 = [r0 searchBarShouldBecomeFirstResponse];
            if (r0 != 0x0) {
                    r0 = *(int32_t *)(r19 + r22);
                    r0 = [r0 searchDisplayController];
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 setActive:0x1];
                    [r21 release];
                    r0 = *(int32_t *)(r19 + r22);
                    r0 = [r0 searchBar];
                    r0 = [r0 retain];
                    r20 = r0;
                    [r0 becomeFirstResponder];
                    asm{ ldp        x29, x30, [sp, #0x20] };
                    asm{ ldp        x20, x19, [sp, #0x10] };
                    asm{ ldp        x22, x21, [sp], #0x30 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x20] };
                    asm{ ldp        x20, x19, [sp, #0x10] };
                    asm{ ldp        x22, x21, [sp], #0x30 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)reloadBackgroundView
{
    asm{ stp        d11, d10, [sp, #0xffffff90]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x30;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xe0c] };
    r25 = r19 + 0x1039e8000;
    r0 = *(int32_t *)r25;
    [r0 removeFromSuperview];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(getBackgroundView);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = r0;
                    r0 = [r0 getBackgroundView];
                    r29 = 0x60;
                    r0 = [r0 retain];
                    r8 = *(int32_t *)r25;
                    *(int32_t *)r25 = r0;
                    [r8 release];
                    r0 = r20;
            }
            else {
                    r0 = [CShareResourceProvider GetBackGroundView];
                    r29 = 0x60;
                    r0 = [r0 retain];
                    r8 = *(int32_t *)r25;
                    *(int32_t *)r25 = r0;
                    r0 = r8;
            }
    }
    else {
            r0 = [CShareResourceProvider GetBackGroundView];
            r29 = 0x60;
            r0 = [r0 retain];
            r8 = *(int32_t *)r25;
            *(int32_t *)r25 = r0;
            r0 = r8;
    }
    [r0 release];
    r0 = *(int32_t *)r25;
    [r0 setContentMode:0x2];
    r0 = *(int32_t *)r25;
    [r0 setClipsToBounds:0x1];
    r8 = *(int32_t *)r25;
    asm{ ldrsw      x9, [x9, #0xd74] };
    r21 = *(int32_t *)(r19 + 0x1039e8000);
    if (r8 != 0x0) {
            r0 = [UIColor clearColor];
            r29 = r29;
            r20 = [r0 retain];
            [r21 setBackgroundColor:r20];
    }
    else {
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r22 = r0;
            r0 = [r0 getColorByName:@"CHAT_BACKGROUND_COLOR"];
            r29 = r29;
            r23 = [[r0 retain] retain];
            if (r23 != 0x0) {
                    r0 = [r23 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r29 = r29;
                    r0 = [r0 retain];
            }
            r24 = r0;
            [r23 release];
            [r21 setBackgroundColor:r24];
            [r24 release];
            [r23 release];
            [r22 release];
    }
    [r20 release];
    r0 = *(int32_t *)r25;
    [r0 frame];
    r0 = *(int32_t *)r25;
    [r0 frame];
    r0 = *(int32_t *)r25;
    [r0 frame];
    r0 = *(int32_t *)r25;
    [r0 frame];
    asm{ stp        d10, d3, [sp, #0x18] };
    asm{ stp        d8, d9, [sp, #0x8] };
    *(int32_t *)r31 = @"%lf,%lf,%lf,%lf";
    asm{ movz       w6, #0xedf };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r0 = *(int32_t *)r25;
    asm{ movi.16b   v0, #0x0 };
    [r0 setY:0x1];
    r0 = [r19 view];
    r0 = [r0 retain];
    r21 = r0;
    r2 = *(int32_t *)r25;
    [r0 addSubview:r2];
    [r21 release];
    r0 = [r19 view];
    r0 = [r0 retain];
    r20 = r0;
    r2 = *(int32_t *)r25;
    [r0 sendSubviewToBack:r2];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x70 };
    r0 = [r20 release];
    return;
}

- (void)adjustTableViewOffset
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r19 + 0x1039e8000);
    [self getTableViewVisibleHeightWithOrientation:r2];
    asm{ ldrsw      x21, [x8, #0xdf4] };
    r8 = *(int32_t *)(r19 + r21);
    asm{ scvtf      d0, w8 };
    asm{ fsub       d0, d0, d8 };
    asm{ fcvtzs     w8, d0 };
    *(int32_t *)(r19 + r21) = r8;
    r0 = [r19 getCurContentSizeHeight];
    asm{ ldrsw      x8, [x19, x21] };
    asm{ ucvtf      d0, x9 };
    asm{ fcmp       d0, d8 };
    if (CPU_FLAGS & GE) {
            asm{ scvtf      d0, w8 };
            asm{ fadd       d0, d8, d0 };
            asm{ fcvtzs     w8, d0 };
            *(int32_t *)(r19 + r21) = 0x10399f000;
            asm{ ldrsw      x20, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + r20);
            [r0 contentSize];
            r0 = *(int32_t *)(r19 + r20);
            [r0 height];
            r0 = *(int32_t *)(r19 + r20);
            [r0 contentInset];
            asm{ fsub       d0, d9, d2 };
            asm{ fsub       d0, d8, d0 };
            asm{ fcvtzs     w22, d0 };
            r0 = *(int32_t *)(r19 + r20);
            r0 = [r0 isEditing];
            r20 = *(int32_t *)(r19 + r20);
            r8 = *(int32_t *)(r19 + r21);
            if ((r0 & 0x1 << 0x0) != 0x0) {
                    r8 = r8 - 0x2d;
            }
            asm{ csel       w8, w8, w22, lt };
            asm{ scvtf      d8, w8 };
            [r19 getContentViewY];
            asm{ fsub       d1, d8, d0 };
            asm{ movi.16b   v0, #0x0 };
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x40 };
            r0 = [r20 setContentOffset:r2];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x40 };
            return;
    }
    return;
}

- (void)initGestureRecognizer
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [[NSNumber numberWithUnsignedLong:r20] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [WXGestureMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 snapshotArray];
    r0 = [r0 retain];
    r24 = r0;
    r0 = [r0 objectForKey:r19];
    r21 = [r0 retain];
    [r24 release];
    [r23 release];
    [r22 release];
    asm{ ldrsw      x24, [x8, #0xe18] };
    r0 = *(int32_t *)(r20 + r24);
    *(int32_t *)(r20 + r24) = 0x0;
    [r0 release];
    r0 = [WXGesture alloc];
    r0 = [r0 initWithCurViewController:r20 andFromViewSnapshot:r21];
    r8 = *(int32_t *)(r20 + r24);
    *(int32_t *)(r20 + r24) = r0;
    [r8 release];
    r0 = *(int32_t *)(r20 + r24);
    r2 = r20;
    [r0 setDelegate:r2];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
    r23 = [r0 ShouldShowSearchBar];
    [r0 release];
    if (r23 != 0x0) {
            r0 = *(int32_t *)(r20 + r24);
            asm{ movz       w2, #0x0 };
            [r0 setGestureIsEnable:r2];
    }
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r0 textView];
    r0 = [r0 retain];
    r23 = [r0 isFirstResponder];
    [r0 release];
    if (r23 != 0x0) {
            r0 = *(int32_t *)(r20 + r24);
            asm{ movz       w2, #0x0 };
            [r0 setGestureIsEnable:r2];
    }
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    if ([r0 isEditing] != 0x0) {
            r0 = *(int32_t *)(r20 + r24);
            asm{ movz       w2, #0x0 };
            [r0 setGestureIsEnable:r2];
    }
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)initView
{
    asm{ stp        x28, x27, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x1e0;
    r19 = self;
    asm{ movz       w2, #0x0 };
    [self setAutomaticallyAdjustsScrollViewInsets:r2];
    asm{ movz       w2, #0x0 };
    [r19 setExtendedLayoutIncludesOpaqueBars:r2];
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x40 - 0x70);
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(ViewWillInit);
            asm{ nop         };
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 ViewWillInit];
                    [r21 release];
            }
    }
    sub_100a60a58(0x40 - 0x70);
    asm{ ldrsw      x21, [x8, #0xe1c] };
    r0 = *(int32_t *)(r19 + r21);
    if (r0 != 0x0) {
            [r0 removeAllObjects];
    }
    else {
            r0 = [NSMutableArray alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r21);
            *(int32_t *)(r19 + r21) = r0;
            [r8 release];
    }
    asm{ ldrsw      x21, [x8, #0xe20] };
    r0 = *(int32_t *)(r19 + r21);
    if (r0 != 0x0) {
            [r0 removeAllObjects];
    }
    else {
            r0 = [NSMutableArray alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r19 + r21);
            *(int32_t *)(r19 + r21) = r0;
            [r8 release];
    }
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x40 - 0xa0);
    [r19 reloadBackgroundView];
    sub_100a60a58(0x40 - 0xa0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x40 - 0xd0);
    [r19 initToolView];
    sub_100a60a58(0x40 - 0xd0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x40 - 0x100);
    [r19 initMultiSelectToolView];
    sub_100a60a58(0x40 - 0x100);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0xf0);
    [r19 initTableView];
    sub_100a60a58(0xf0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0xc0);
    [r19 initSearchBar];
    sub_100a60a58(0xc0);
    r0 = objc_loadWeakRetained(r20);
    r22 = [r0 ShouldShowMultiSelectMode];
    [r0 release];
    if ((r22 & 0x1 << 0x0) == 0x0) {
            asm{ movz       x3, #0x0 };
            sub_100a60a28(0x90);
            [r19 initNavigationView];
            sub_100a60a58(0x90);
            sub_100a60a98(0x90);
    }
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x60);
    asm{ movz       x2, #0x0 };
    [r19 updateTitleView:"updateTitleView"];
    sub_100a60a58(0x60);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x30);
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(ViewDidInit);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = r0;
                    [r0 ViewDidInit];
                    [r20 release];
            }
    }
    sub_100a60a58(0x30);
    r0 = [r19 view];
    r29 = 0x40;
    r0 = [r0 retain];
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r2 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 bringSubviewToFront:r2];
    [r20 release];
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x0);
    asm{ movz       w2, #0x0 };
    [r19 scrollTableToBottomAnimated:"scrollTableToBottomAnimated" init:0x1];
    sub_100a60a58(0x0);
    asm{ ldrsw      x8, [x8, #0xda4] };
    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
            [r19 adjustTableViewOffset];
    }
    sub_100a60a98(0x0);
    sub_100a60a98(0x30);
    sub_100a60a98(0x60);
    sub_100a60a98(0xc0);
    sub_100a60a98(0xf0);
    sub_100a60a98(r29 - 0x100);
    sub_100a60a98(r29 - 0xd0);
    sub_100a60a98(r29 - 0xa0);
    r0 = sub_100a60a98(r29 - 0x70);
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x50 };
    return;
}

- (void)viewDidLayoutSubviews
{
    asm{ stp        d11, d10, [sp, #0xffffff90]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    0x0 = 0x0 - 0x20;
    r19 = self;
    *(int32_t *)(r31 + 0x10) = r19;
    *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d3c98;
    [[0x10 super] viewDidLayoutSubviews];
    asm{ ldrsw      x8, [x8, #0xe0c] };
    r22 = *(int32_t *)(r19 + 0x1039e8000);
    r20 = @selector(screenWidthCurOri);
    [UiUtil screenWidthCurOri];
    r23 = @selector(screenHeightCurOri);
    [UiUtil screenHeightCurOri];
    r21 = @selector(setFrame:);
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    [r22 setFrame:r2];
    asm{ ldrsw      x8, [x8, #0xe24] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            r0 = [DeviceInfo isSupportSplitView];
            asm{ ldrsw      x26, [x8, #0xd74] };
            r22 = *(int32_t *)(r19 + r26);
            if (r0 != 0x0) {
                    [r22 x];
                    r0 = *(int32_t *)(r19 + r26);
                    [r0 y];
                    r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                    [r0 screenWidthCurOri];
                    r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                    [r0 screenHeightCurOri];
                    [r22 setFrame:r2];
                    r0 = *(int32_t *)(r19 + r26);
                    [r0 reloadData];
            }
            else {
                    r0 = [r19 view];
                    r29 = 0x60;
                    r0 = [r0 retain];
                    r23 = r0;
                    [r0 bounds];
                    [r22 setFrame:r2];
                    [r23 release];
            }
    }
    r0 = [r19 navigationController];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    [r0 release];
    if (r21 != 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)(0x1039d3000 + 0xc98);
            [[0x0 super] getVisibleHeight];
            asm{ ldrsw      x23, [x8, #0xe14] };
            if (*(int32_t *)(r19 + r23) != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd74] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    r22 = [r0 isEditing];
                    r21 = *(int32_t *)(r19 + r23);
                    [r21 origin];
                    if (r22 != 0x0) {
                            r0 = *(int32_t *)(r19 + r23);
                            [r0 height];
                            asm{ fsub       d1, d8, d0 };
                            r1 = @selector(setOrigin:);
                            r0 = r21;
                    }
                    else {
                            r1 = @selector(setOrigin:);
                            r0 = r21;
                    }
                    objc_msgSend(r0, r1);
                    r21 = *(int32_t *)(r19 + r23);
                    r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                    [r0 screenWidthCurOri];
                    [r21 setWidth:r2];
            }
            asm{ ldrsw      x8, [x8, #0xe28] };
            r21 = *(int32_t *)(r19 + 0x1039e8000);
            [r19 getContentViewY];
            [r21 setY:r2];
            asm{ ldrsw      x8, [x8, #0xe2c] };
            r21 = *(int32_t *)(r19 + 0x1039e8000);
            [r19 getContentViewY];
            [r21 setY:r2];
            asm{ ldrsw      x8, [x8, #0xdb8] };
            r21 = *(int32_t *)(r19 + 0x1039e8000);
            [r19 getContentViewY];
            [r21 setY:r2];
            asm{ ldrsw      x8, [x8, #0xdb0] };
            r21 = *(int32_t *)(r19 + 0x1039e8000);
            [r19 getContentViewY];
            [r21 setY:r2];
            asm{ ldrsw      x8, [x8, #0xdb4] };
            r21 = *(int32_t *)(r19 + 0x1039e8000);
            [r19 getContentViewY];
            [r21 setY:r2];
    }
    asm{ ldrsw      x8, [x8, #0xd90] };
    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
            asm{ movz       w2, #0x0 };
            [r19 tryScrollToBottomAnimated:r2];
    }
    asm{ ldrsw      x8, [x8, #0xd9c] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r0 = [r0 reloadView];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x70 };
    return;
}

- (void)makeCell:(id)arg2 indexPath:(id)arg3 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x10;
    r22 = self;
    r19 = [arg2 retain];
    r0 = [arg3 retain];
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xd70] };
    r21 = *(int32_t *)(r22 + 0x1039e8000);
    r2 = [r0 section];
    r0 = [r21 objectAtIndexedSubscript:r2];
    r29 = 0x40;
    r21 = [r0 retain];
    if (r21 != 0x0) {
            r23 = @selector(row);
            r2 = [r20 row];
            r0 = [r21 cellDataForRow:r2];
            r29 = 0x40;
            r24 = [r0 retain];
            [r19 setViewModel:r24];
            [r24 release];
            r2 = r22;
            [r19 setDelegate:r2];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r22 + 0x1039e8000);
            r0 = [r0 isEditing];
            r1 = @selector(cellView);
            if (r0 != 0x0) {
                    r0 = [r19 cellView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r24 = r0;
                    asm{ movz       w2, #0x0 };
                    [r0 setUserInteractionEnabled:r2];
            }
            else {
                    r0 = [r19 cellView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r24 = r0;
                    [r0 setUserInteractionEnabled:0x1];
            }
            [r24 release];
            r26 = @selector(setM_bCanSelected:);
            asm{ movz       w2, #0x0 };
            [r19 setM_bCanSelected:r2];
            r25 = @selector(setM_bShowSelectedFlag:);
            asm{ movz       w2, #0x0 };
            [r19 setM_bShowSelectedFlag:r2];
            r24 = @selector(setM_bNeedOffset:);
            asm{ movz       w2, #0x0 };
            [r19 setM_bNeedOffset:r2];
            if (([r21 modelType] == 0x1) && (([r21 isDisableEditMode] & 0x1 << 0x0) == 0x0)) {
                    [r19 setM_bCanSelected:r2];
                    asm{ cset       w2, eq };
                    [r19 setM_bShowSelectedFlag:r2];
                    r23 = @selector(messageWrap);
                    r0 = [r21 messageWrap];
                    r29 = r29;
                    r26 = [r0 retain];
                    r25 = [CMessageWrap isSenderFromMsgWrap:r26];
                    [r26 release];
                    if ((r25 & 0x1 << 0x0) != 0x0) {
                            asm{ movz       w2, #0x0 };
                            [r19 setM_bNeedOffset:r2];
                    }
                    else {
                            [r19 setM_bNeedOffset:r2];
                    }
                    r24 = [NSString alloc];
                    r0 = [r21 messageWrap];
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    r0 = [r0 m_uiMesLocalID];
                    *(int32_t *)r31 = r0;
                    r23 = [r24 initWithFormat:@"%tu", r3];
                    [r25 release];
                    asm{ ldrsw      x8, [x8, #0xe20] };
                    r0 = *(int32_t *)(r22 + 0x1039e8000);
                    r2 = [r0 containsObject:r23];
                    [r19 changeSelectdStatus:r2];
                    [r23 release];
            }
    }
    [r21 release];
    [r20 release];
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (id)numberOfSectionsInTableView:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 count];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return r0;
}

- (id)tableView:(id)arg2 numberOfRowsInSection:(id)arg3 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 objectAtIndexedSubscript:arg3];
    r0 = [r0 retain];
    r20 = [r0 numberOfRowsInSection];
    [r0 release];
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)didFinishedLoading:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"didFinishedLoading";
    asm{ movz       w6, #0xfc4 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    r0 = [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    0x0 = 0x0;
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (id)tableView:(id)arg2 heightForRowAtIndexPath:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r29 = 0x20;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg3 retain];
    asm{ ldrsw      x8, [x8, #0xe30] };
    r8 = *(int32_t *)(0x8 + r20 + 0x1039e8000);
    r21 = @selector(section);
    if (r8 != 0x0) {
            [r19 section];
            asm{ ldp        x8, x9, [x22] };
            asm{ subs       x8, x0, x8 };
            asm{ ccmp       x8, x9, #0x2, hs };
            if (CPU_FLAGS & L) {
                    asm{ ldrsw      x8, [x8, #0xd70] };
                    r20 = *(int32_t *)(r20 + 0x1039e8000);
                    r2 = [r19 section];
                    r0 = [r20 objectAtIndexedSubscript:r2];
                    r29 = 0x20;
                    r20 = [r0 retain];
                    if (r20 != 0x0) {
                            r2 = [r19 row];
                            r0 = [r20 cellDataForRow:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r21 = r0;
                            [r0 rowHeight];
                            *(int32_t *)r31 = q0;
                            [r21 release];
                    }
                    else {
                            asm{ movi.16b   v0, #0x0 };
                            *(int32_t *)r31 = q0;
                    }
                    [r20 release];
            }
            else {
                    asm{ movi.16b   v0, #0x0 };
                    *(int32_t *)r31 = q0;
            }
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd70] };
            r20 = *(int32_t *)(r20 + 0x1039e8000);
            r2 = [r19 section];
            r0 = [r20 objectAtIndexedSubscript:r2];
            r29 = 0x20;
            r20 = [r0 retain];
            if (r20 != 0x0) {
                    r2 = [r19 row];
                    r0 = [r20 cellDataForRow:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 rowHeight];
                    *(int32_t *)r31 = q0;
                    [r21 release];
            }
            else {
                    asm{ movi.16b   v0, #0x0 };
                    *(int32_t *)r31 = q0;
            }
            [r20 release];
    }
    r0 = [r19 release];
    0x0 = r29 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (id)indexPathForCellKey:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r20 = self;
    r0 = [arg2 componentsSeparatedByString:@"_"];
    r0 = [r0 retain];
    r19 = r0;
    asm{ movz       x2, #0x0 };
    r0 = [r0 objectAtIndexedSubscript:@"_"];
    r29 = 0x50;
    r0 = [r0 retain];
    r22 = [r0 longLongValue];
    [r0 release];
    asm{ ldrsw      x25, [x8, #0xd70] };
    r24 = @selector(count);
    r23 = @selector(objectAtIndexedSubscript:);
    asm{ movn       x26, #0x0 };
    do {
            r0 = *(int32_t *)(r20 + r25);
            r0 = [r0 count];
            r21 = 0x7fffffffffffffff;
            if (r26 + 0x1 >= r0) {
                break;
            }
            r0 = *(int32_t *)(r20 + r25);
            r0 = [r0 objectAtIndexedSubscript:r2];
            r29 = r29;
            r0 = [r0 retain];
            r21 = r0;
            [r0 release];
            r26 = r26 + 0x1;
            COND = r21 != r22;
            r21 = r26;
    } while (COND);
    if (r21 != 0x7fffffffffffffff) {
            r2 = 0x1;
            r0 = [r19 objectAtIndexedSubscript:r2];
            r29 = r29;
            r0 = [r0 retain];
            [r0 intValue];
            [r0 release];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            r0 = [r0 numberOfRowsInSection:r2];
            asm{ sxtw       x2, w22 };
            if (r21 < r0) {
                    r0 = [NSIndexPath indexPathForRow:r2 inSection:r21];
                    r20 = [r0 retain];
            }
            else {
                    asm{ movz       x20, #0x0 };
            }
    }
    else {
            asm{ movz       x20, #0x0 };
    }
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r20 autorelease];
    return r0;
}

- (id)tableView:(id)arg2 cellForRowAtIndexPath:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x20;
    r22 = self;
    r19 = [arg2 retain];
    r20 = [r3 retain];
    asm{ ldrsw      x8, [x8, #0xe30] };
    r8 = *(int32_t *)(0x8 + r22 + 0x1039e8000);
    r21 = @selector(section);
    if (r8 != 0x0) {
            [r20 section];
            asm{ ldp        x8, x9, [x23] };
            asm{ subs       x8, x0, x8 };
            asm{ ccmp       x8, x9, #0x2, hs };
            if (CPU_FLAGS & L) {
                    asm{ ldrsw      x8, [x8, #0xd70] };
                    r23 = *(int32_t *)(r22 + 0x1039e8000);
                    r2 = [r20 section];
                    r0 = [r23 objectAtIndexedSubscript:r2];
                    r0 = [r0 retain];
                    r21 = r0;
                    r23 = [[r0 cellIdentifier] retain];
                    [r20 row];
                    asm{ stp        x21, x0, [sp] };
                    r24 = [[NSString stringWithFormat:@"%lu_%d", r3, STK-2] retain];
                    r2 = [ChatTableViewCell class];
                    r0 = [r19 dequeueReusableCellWithCellClass:r2 identifier:r23 cellKey:STK-1];
                    r29 = 0x40;
                    r25 = [r0 retain];
                    sub_102554c70();
                    sub_102554c74();
                    r2 = [r19 isEditing];
                    [r25 setM_bIsEditting:r2];
                    [r22 makeCell:r25 indexPath:r20];
                    [r25 setUserInteractionEnabled:0x1];
                    [r24 release];
                    [r23 release];
                    [r21 release];
            }
            else {
                    r0 = [ChatTableViewCell alloc];
                    r25 = [r0 init];
            }
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd70] };
            r23 = *(int32_t *)(r22 + 0x1039e8000);
            r2 = [r20 section];
            r0 = [r23 objectAtIndexedSubscript:r2];
            r0 = [r0 retain];
            r21 = r0;
            r23 = [[r0 cellIdentifier] retain];
            [r20 row];
            asm{ stp        x21, x0, [sp] };
            r24 = [[NSString stringWithFormat:@"%lu_%d", r3, STK-2] retain];
            r2 = [ChatTableViewCell class];
            r0 = [r19 dequeueReusableCellWithCellClass:r2 identifier:r23 cellKey:STK-1];
            r29 = 0x40;
            r25 = [r0 retain];
            sub_102554c70();
            sub_102554c74();
            r2 = [r19 isEditing];
            [r25 setM_bIsEditting:r2];
            [r22 makeCell:r25 indexPath:r20];
            [r25 setUserInteractionEnabled:0x1];
            [r24 release];
            [r23 release];
            [r21 release];
    }
    [r20 release];
    [r19 release];
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r25 autorelease];
    return r0;
}

- (id)tableView:(id)arg2 editingStyleForRowAtIndexPath:(id)arg3 
{
    r0 = self;
    asm{ movz       x0, #0x0 };
    return r0;
}

- (id)tableView:(id)arg2 shouldHighlightRowAtIndexPath:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    r20 = [arg2 cellForRowAtIndexPath:arg3];
    [r19 release];
    r0 = [r20 retain];
    r19 = r0;
    asm{ movz       x2, #0x0 };
    [r0 setSelectionStyle:arg3];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return 0x1;
}

- (void)tableView:(id)arg2 didSelectRowAtIndexPath:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x30;
    r24 = self;
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    asm{ ldrsw      x8, [x8, #0xe30] };
    if (*(int32_t *)(0x8 + r24 + 0x1039e8000) != 0x0) {
            [r20 section];
            asm{ ldp        x8, x9, [x21] };
            asm{ subs       x8, x0, x8 };
            asm{ ccmp       x8, x9, #0x2, hs };
            if (CPU_FLAGS & L) {
                    r23 = @selector(cellForRowAtIndexPath:);
                    r0 = [r19 cellForRowAtIndexPath:r2];
                    r29 = 0x50;
                    r21 = [r0 retain];
                    if ((([r19 isEditing] & 0x1 << 0x0) != 0x0) && ([r21 m_bCanSelected] != 0x0)) {
                            if (([r21 m_bSelected] & 0x1 << 0x0) == 0x0) {
                                    asm{ ldrsw      x8, [x8, #0xe20] };
                                    r0 = *(int32_t *)(r24 + 0x1039e8000);
                                    if ((r0 == 0x0) || ([r0 count] < 0x64)) {
                                            asm{ ldrsw      x8, [x8, #0xd70] };
                                            r22 = *(int32_t *)(r24 + 0x1039e8000);
                                            r2 = [r20 section];
                                            r26 = [[r22 objectAtIndexedSubscript:r2] retain];
                                            r22 = [NSString alloc];
                                            r0 = [r26 messageWrap];
                                            *(int32_t *)(r31 + 0x20) = @selector(section);
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r27 = r0;
                                            r0 = [r0 m_uiMesLocalID];
                                            *(int32_t *)r31 = r0;
                                            r25 = [r22 initWithFormat:@"%tu", r3];
                                            *(int32_t *)(r31 + 0x28) = r26;
                                            [r27 release];
                                            asm{ ldrsw      x28, [x8, #0xe20] };
                                            r0 = *(int32_t *)(r24 + r28);
                                            r27 = @selector(containsObject:);
                                            r22 = [r0 containsObject:r2];
                                            r0 = *(int32_t *)(r24 + r28);
                                            if ((r22 & 0x1 << 0x0) != 0x0) {
                                                    [r0 removeObject:r25];
                                            }
                                            else {
                                                    [r0 addObject:r25];
                                            }
                                            *(int32_t *)(r31 + 0x1c) = r22 ^ 0x1;
                                            r22 = @selector(changeSelectdStatus:);
                                            [r21 changeSelectdStatus:r2];
                                            [r24 updateDeleteCount];
                                            r0 = *(int32_t *)(r24 + r28);
                                            [r0 count];
                                            asm{ stp        x8, x0, [sp] };
                                            r2 = 0x2;
                                            asm{ movz       w6, #0x102f };
                                            asm{ movz       x3, #0x0 };
                                            asm{ movz       w4, #0x0 };
                                            [iConsole logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                            if ([r20 row] != 0x0) {
                                                    r24 = [[r19 indexPathsForVisibleRows] retain];
                                                    r3 = objc_msgSend(r20, *(int32_t *)(r31 + 0x20));
                                                    asm{ movz       x2, #0x0 };
                                                    r0 = [NSIndexPath indexPathForRow:r2 inSection:r3];
                                                    r29 = r29;
                                                    r26 = [r0 retain];
                                                    if ([r24 containsObject:r2] != 0x0) {
                                                            r0 = [r19 cellForRowAtIndexPath:r2];
                                                            r29 = r29;
                                                            r0 = [r0 retain];
                                                            r23 = r0;
                                                            [r0 changeSelectdStatus:r2];
                                                            [r23 release];
                                                    }
                                                    [r26 release];
                                                    [r24 release];
                                            }
                                            [r25 release];
                                            r0 = *(int32_t *)(r31 + 0x28);
                                            [r0 release];
                                    }
                                    else {
                                            [r24 showAlertTooMany];
                                    }
                            }
                            else {
                                    asm{ ldrsw      x8, [x8, #0xd70] };
                                    r22 = *(int32_t *)(r24 + 0x1039e8000);
                                    r2 = [r20 section];
                                    r26 = [[r22 objectAtIndexedSubscript:r2] retain];
                                    r22 = [NSString alloc];
                                    r0 = [r26 messageWrap];
                                    *(int32_t *)(r31 + 0x20) = @selector(section);
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r27 = r0;
                                    r0 = [r0 m_uiMesLocalID];
                                    *(int32_t *)r31 = r0;
                                    r25 = [r22 initWithFormat:@"%tu", r3];
                                    *(int32_t *)(r31 + 0x28) = r26;
                                    [r27 release];
                                    asm{ ldrsw      x28, [x8, #0xe20] };
                                    r0 = *(int32_t *)(r24 + r28);
                                    r27 = @selector(containsObject:);
                                    r22 = [r0 containsObject:r2];
                                    r0 = *(int32_t *)(r24 + r28);
                                    if ((r22 & 0x1 << 0x0) != 0x0) {
                                            [r0 removeObject:r25];
                                    }
                                    else {
                                            [r0 addObject:r25];
                                    }
                                    *(int32_t *)(r31 + 0x1c) = r22 ^ 0x1;
                                    r22 = @selector(changeSelectdStatus:);
                                    [r21 changeSelectdStatus:r2];
                                    [r24 updateDeleteCount];
                                    r0 = *(int32_t *)(r24 + r28);
                                    [r0 count];
                                    asm{ stp        x8, x0, [sp] };
                                    r2 = 0x2;
                                    asm{ movz       w6, #0x102f };
                                    asm{ movz       x3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    [iConsole logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                    if ([r20 row] != 0x0) {
                                            r24 = [[r19 indexPathsForVisibleRows] retain];
                                            r3 = objc_msgSend(r20, *(int32_t *)(r31 + 0x20));
                                            asm{ movz       x2, #0x0 };
                                            r0 = [NSIndexPath indexPathForRow:r2 inSection:r3];
                                            r29 = r29;
                                            r26 = [r0 retain];
                                            if ([r24 containsObject:r2] != 0x0) {
                                                    r0 = [r19 cellForRowAtIndexPath:r2];
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r23 = r0;
                                                    [r0 changeSelectdStatus:r2];
                                                    [r23 release];
                                            }
                                            [r26 release];
                                            [r24 release];
                                    }
                                    [r25 release];
                                    r0 = *(int32_t *)(r31 + 0x28);
                                    [r0 release];
                            }
                    }
                    [r21 release];
            }
    }
    else {
            r23 = @selector(cellForRowAtIndexPath:);
            r0 = [r19 cellForRowAtIndexPath:r2];
            r29 = 0x50;
            r21 = [r0 retain];
            if ((([r19 isEditing] & 0x1 << 0x0) != 0x0) && ([r21 m_bCanSelected] != 0x0)) {
                    if (([r21 m_bSelected] & 0x1 << 0x0) == 0x0) {
                            asm{ ldrsw      x8, [x8, #0xe20] };
                            r0 = *(int32_t *)(r24 + 0x1039e8000);
                            if ((r0 == 0x0) || ([r0 count] < 0x64)) {
                                    asm{ ldrsw      x8, [x8, #0xd70] };
                                    r22 = *(int32_t *)(r24 + 0x1039e8000);
                                    r2 = [r20 section];
                                    r26 = [[r22 objectAtIndexedSubscript:r2] retain];
                                    r22 = [NSString alloc];
                                    r0 = [r26 messageWrap];
                                    *(int32_t *)(r31 + 0x20) = @selector(section);
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r27 = r0;
                                    r0 = [r0 m_uiMesLocalID];
                                    *(int32_t *)r31 = r0;
                                    r25 = [r22 initWithFormat:@"%tu", r3];
                                    *(int32_t *)(r31 + 0x28) = r26;
                                    [r27 release];
                                    asm{ ldrsw      x28, [x8, #0xe20] };
                                    r0 = *(int32_t *)(r24 + r28);
                                    r27 = @selector(containsObject:);
                                    r22 = [r0 containsObject:r2];
                                    r0 = *(int32_t *)(r24 + r28);
                                    if ((r22 & 0x1 << 0x0) != 0x0) {
                                            [r0 removeObject:r25];
                                    }
                                    else {
                                            [r0 addObject:r25];
                                    }
                                    *(int32_t *)(r31 + 0x1c) = r22 ^ 0x1;
                                    r22 = @selector(changeSelectdStatus:);
                                    [r21 changeSelectdStatus:r2];
                                    [r24 updateDeleteCount];
                                    r0 = *(int32_t *)(r24 + r28);
                                    [r0 count];
                                    asm{ stp        x8, x0, [sp] };
                                    r2 = 0x2;
                                    asm{ movz       w6, #0x102f };
                                    asm{ movz       x3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    [iConsole logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                    if ([r20 row] != 0x0) {
                                            r24 = [[r19 indexPathsForVisibleRows] retain];
                                            r3 = objc_msgSend(r20, *(int32_t *)(r31 + 0x20));
                                            asm{ movz       x2, #0x0 };
                                            r0 = [NSIndexPath indexPathForRow:r2 inSection:r3];
                                            r29 = r29;
                                            r26 = [r0 retain];
                                            if ([r24 containsObject:r2] != 0x0) {
                                                    r0 = [r19 cellForRowAtIndexPath:r2];
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r23 = r0;
                                                    [r0 changeSelectdStatus:r2];
                                                    [r23 release];
                                            }
                                            [r26 release];
                                            [r24 release];
                                    }
                                    [r25 release];
                                    r0 = *(int32_t *)(r31 + 0x28);
                                    [r0 release];
                            }
                            else {
                                    [r24 showAlertTooMany];
                            }
                    }
                    else {
                            asm{ ldrsw      x8, [x8, #0xd70] };
                            r22 = *(int32_t *)(r24 + 0x1039e8000);
                            r2 = [r20 section];
                            r26 = [[r22 objectAtIndexedSubscript:r2] retain];
                            r22 = [NSString alloc];
                            r0 = [r26 messageWrap];
                            *(int32_t *)(r31 + 0x20) = @selector(section);
                            r29 = r29;
                            r0 = [r0 retain];
                            r27 = r0;
                            r0 = [r0 m_uiMesLocalID];
                            *(int32_t *)r31 = r0;
                            r25 = [r22 initWithFormat:@"%tu", r3];
                            *(int32_t *)(r31 + 0x28) = r26;
                            [r27 release];
                            asm{ ldrsw      x28, [x8, #0xe20] };
                            r0 = *(int32_t *)(r24 + r28);
                            r27 = @selector(containsObject:);
                            r22 = [r0 containsObject:r2];
                            r0 = *(int32_t *)(r24 + r28);
                            if ((r22 & 0x1 << 0x0) != 0x0) {
                                    [r0 removeObject:r25];
                            }
                            else {
                                    [r0 addObject:r25];
                            }
                            *(int32_t *)(r31 + 0x1c) = r22 ^ 0x1;
                            r22 = @selector(changeSelectdStatus:);
                            [r21 changeSelectdStatus:r2];
                            [r24 updateDeleteCount];
                            r0 = *(int32_t *)(r24 + r28);
                            [r0 count];
                            asm{ stp        x8, x0, [sp] };
                            r2 = 0x2;
                            asm{ movz       w6, #0x102f };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [iConsole logWithLevel:r2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                            if ([r20 row] != 0x0) {
                                    r24 = [[r19 indexPathsForVisibleRows] retain];
                                    r3 = objc_msgSend(r20, *(int32_t *)(r31 + 0x20));
                                    asm{ movz       x2, #0x0 };
                                    r0 = [NSIndexPath indexPathForRow:r2 inSection:r3];
                                    r29 = r29;
                                    r26 = [r0 retain];
                                    if ([r24 containsObject:r2] != 0x0) {
                                            r0 = [r19 cellForRowAtIndexPath:r2];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r23 = r0;
                                            [r0 changeSelectdStatus:r2];
                                            [r23 release];
                                    }
                                    [r26 release];
                                    [r24 release];
                            }
                            [r25 release];
                            r0 = *(int32_t *)(r31 + 0x28);
                            [r0 release];
                    }
            }
            [r21 release];
    }
    [r20 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)tableView:(id)arg2 willDisplayCell:(id)arg3 forRowAtIndexPath:(id)arg4 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    0x0 = 0x0 - 0x60;
    r24 = self;
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    r21 = [r4 retain];
    asm{ ldrsw      x8, [x8, #0xe30] };
    if (*(int32_t *)(0x8 + r24 + 0x1039e8000) == 0x0) goto loc_101d20948;
    goto loc_101d20928;

loc_101d20948:
    r0 = [r20 retain];
    r22 = r0;
    r25 = @selector(cellView);
    r0 = [r0 cellView];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 viewModel];
    r29 = 0x60;
    r23 = [r0 retain];
    [r26 release];
    [r22 willBeDisplayed];
    if ([r23 modelType] == 0x1) {
            if ([r19 isEditing] != 0x0) {
                    r0 = [r22 cellView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    [r0 hideUIStatus];
            }
            else {
                    r0 = [r22 cellView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    [r0 showUIStatus];
            }
            [r25 release];
    }
    asm{ ldrsw      x8, [x8, #0xe34] };
    r0 = *(int32_t *)(r24 + 0x1039e8000);
    if ((r0 != 0x0) && (([r0 isHidden] & 0x1 << 0x0) == 0x0)) goto loc_101d20a44;
    goto loc_101d20e30;

loc_101d20a44:
    *(int32_t *)(r31 + 0x58) = @selector(messageWrap);
    r0 = [r23 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    [r0 release];
    if (r25 == 0x0) goto loc_101d20e30;
    goto loc_101d20a6c;

loc_101d20e30:
    [r23 release];
    [r22 release];

loc_101d20e40:
    [r21 release];
    [r20 release];
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        x28, x27, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x70 };
    r0 = [r19 release];
    return;

loc_101d20a6c:
    *(int32_t *)(r31 + 0x50) = @selector(m_badRoomLogicController);
    r0 = [r24 m_badRoomLogicController];
    r29 = r29;
    r0 = [r0 retain];
    r27 = r0;
    if (([r0 m_hasIniitialUnread] & 0x1 << 0x0) == 0x0) goto loc_101d20b00;
    goto loc_101d20a9c;

loc_101d20b00:
    [r27 release];
    asm{ movz       w25, #0x0 };

loc_101d20c90:
    asm{ ldrsw      x26, [x8, #0xde8] };
    if (*(int32_t *)(r24 + r26) != 0x0) {
            r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
            r29 = r29;
            r0 = [r0 retain];
            *(int32_t *)(r31 + 0x48) = r0;
            if ([r0 m_uiCreateTime] < [*(int32_t *)(r24 + r26) m_uiCreateTime]) {
                    r0 = *(int32_t *)(r31 + 0x48);
                    [r0 release];
            }
            else {
                    r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
                    *(int32_t *)(r31 + 0x40) = r25;
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = [r0 m_uiMesLocalID];
                    asm{ cset       w25, hi };
                    [r0 release];
                    r0 = *(int32_t *)(r31 + 0x48);
                    [r0 release];
                    if (((*(int32_t *)(r31 + 0x40) | r25) & 0x1 << 0x0) == 0x0) {
                            r0 = objc_msgSend(r24, *(int32_t *)(r31 + 0x50));
                            *(int32_t *)(r31 + 0x50) = iConsole;
                            r0 = [r0 retain];
                            r26 = r0;
                            [r0 m_firstDownGetSeq];
                            r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
                            r29 = r29;
                            r0 = [r0 retain];
                            r25 = r0;
                            [r0 m_sequenceId];
                            asm{ ldrsw      x8, [x8, #0xd74] };
                            r0 = *(int32_t *)(r24 + 0x1039e8000);
                            [r0 contentOffset];
                            *(int32_t *)(r31 + 0x18) = d1;
                            asm{ stp        x28, x27, [sp, #0x8] };
                            *(int32_t *)r31 = @"hide first unread btn when display msg, firstDownGet:%d seq:%d offset:%f";
                            asm{ movz       w6, #0x1066 };
                            r0 = *(int32_t *)(r31 + 0x50);
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [r0 logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                            [r25 release];
                            [r26 release];
                            [r24 animateHideFirstUnReadButton];
                    }
            }
    }
    else {
            if ((r25 & 0x1 << 0x0) != 0x0) {
            }
            else {
                    r0 = objc_msgSend(r24, *(int32_t *)(r31 + 0x50));
                    *(int32_t *)(r31 + 0x50) = iConsole;
                    r0 = [r0 retain];
                    r26 = r0;
                    [r0 m_firstDownGetSeq];
                    r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    [r0 m_sequenceId];
                    asm{ ldrsw      x8, [x8, #0xd74] };
                    r0 = *(int32_t *)(r24 + 0x1039e8000);
                    [r0 contentOffset];
                    *(int32_t *)(r31 + 0x18) = d1;
                    asm{ stp        x28, x27, [sp, #0x8] };
                    *(int32_t *)r31 = @"hide first unread btn when display msg, firstDownGet:%d seq:%d offset:%f";
                    asm{ movz       w6, #0x1066 };
                    r0 = *(int32_t *)(r31 + 0x50);
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [r0 logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                    [r25 release];
                    [r26 release];
                    [r24 animateHideFirstUnReadButton];
            }
    }
    goto loc_101d20e30;

loc_101d20a9c:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r24 + 0x1039e8000);
    r26 = r0;
    if (([r0 hasMoreMsg] & 0x1 << 0x0) != 0x0) goto loc_101d20b0c;
    goto loc_101d20ac0;

loc_101d20b0c:
    r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
    *(int32_t *)(r31 + 0x48) = r26;
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    r8 = 0x1039a5000;
    r28 = @selector(m_sequenceId);
    if ([r0 m_sequenceId] == 0x0) goto loc_101d20b48;
    goto loc_101d20b3c;

loc_101d20b48:
    r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
    *(int32_t *)(r31 + 0x40) = r25;
    r29 = r29;
    r0 = [r0 retain];
    r26 = r0;
    r0 = [CMessageWrap isSenderFromMsgWrap:r2];
    r8 = 0x1;
    r25 = 0x1;
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d20c48;
    goto loc_101d20b8c;

loc_101d20c48:
    [r26 release];

loc_101d20c50:
    r0 = *(int32_t *)(r31 + 0x40);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x48);
    [r0 release];
    [r27 release];
    if ((r25 & 0x1 << 0x0) != 0x0) {
            asm{ movz       w25, #0x0 };
    }
    else {
            r25 = 0x1;
    }
    goto loc_101d20c90;

loc_101d20b8c:
    *(int32_t *)(r31 + 0x3c) = r8;
    r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    if ([r0 m_sequenceId] == 0x0) goto loc_101d20c34;
    goto loc_101d20bb4;

loc_101d20c34:
    [r25 release];
    if (*(int32_t *)(r31 + 0x3c) == 0x0) goto loc_101d20c74;
    goto loc_101d20c44;

loc_101d20c74:
    r0 = *(int32_t *)(r31 + 0x40);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x48);
    [r0 release];
    [r27 release];
    r25 = 0x1;
    goto loc_101d20c90;

loc_101d20c44:
    asm{ movz       w25, #0x0 };
    goto loc_101d20c48;

loc_101d20bb4:
    r0 = objc_msgSend(r23, *(int32_t *)(r31 + 0x58));
    asm{ stp        x25, x26, [sp, #0x28] };
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x20) = r0;
    r28 = [r0 m_sequenceId];
    r0 = objc_msgSend(r24, *(int32_t *)(r31 + 0x50));
    r29 = r29;
    r0 = [r0 retain];
    asm{ cset       w25, ls };
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x28);
    [r0 release];
    r26 = *(int32_t *)(r31 + 0x30);
    if ((*(int32_t *)(r31 + 0x3c) & 0x1 << 0x0) != 0x0) {
            [r26 release];
    }
    goto loc_101d20c50;

loc_101d20b3c:
    *(int32_t *)(r31 + 0x40) = r25;
    asm{ movz       w8, #0x0 };
    goto loc_101d20b8c;

loc_101d20ac0:
    asm{ ldrsw      x25, [x8, #0xd74] };
    r0 = *(int32_t *)(r24 + r25);
    [r0 contentOffset];
    r0 = *(int32_t *)(r24 + r25);
    [r0 contentInset];
    asm{ fneg       d0, d0 };
    asm{ fcmp       d8, d0 };
    if (CPU_FLAGS & P) goto loc_101d20b0c;
    [r26 release];
    goto loc_101d20b00;

loc_101d20928:
    [r21 section];
    asm{ ldp        x8, x9, [x22] };
    asm{ subs       x8, x0, x8 };
    asm{ ccmp       x8, x9, #0x2, hs };
    if (CPU_FLAGS & L) goto loc_101d20e40;
    goto loc_101d20948;
}

- (void)tableView:(id)arg2 didEndDisplayingCell:(id)arg3 forRowAtIndexPath:(id)arg4 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg3 retain];
    r20 = [r4 retain];
    asm{ ldrsw      x8, [x8, #0xe30] };
    if (*(int32_t *)(0x8 + self + 0x1039e8000) != 0x0) {
            [r20 section];
            asm{ ldp        x8, x9, [x21] };
            asm{ subs       x8, x0, x8 };
            asm{ ccmp       x8, x9, #0x2, hs };
            if (CPU_FLAGS & L) {
                    [r19 didEndDisplayed];
            }
    }
    else {
            [r19 didEndDisplayed];
    }
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)scrollViewWillBeginDragging:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x24, [x8, #0xd74] };
    if (*(int32_t *)(r20 + r24) == r19) {
            r21 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMAVPlayerMgr class];
            r0 = [r21 getService:r2];
            r29 = 0x50;
            r0 = [r0 retain];
            r22 = r0;
            [r0 stopHoldingUpdate:0x1];
            [r22 release];
            [r21 release];
    }
    asm{ ldrsw      x8, [x8, #0xd84] };
    if (*(int8_t *)(r20 + 0x1039e8000) == 0x0) {
            r0 = *(int32_t *)(r20 + r24);
            if (r0 == r19) {
                    r22 = @selector(height);
                    [r0 height];
                    r21 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
                    *(int32_t *)(r31 + 0x8) = d0;
                    r26 = @"m_tableView Height %f";
                    r27 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                    *(int32_t *)r31 = r26;
                    asm{ movz       w6, #0x1084 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(iConsole, r21);
                    asm{ ldrsw      x8, [x8, #0xdd4] };
                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                    if ([r0 positionMode] != 0x3) {
                            [r20 hideToolViewAnimated:0x1];
                    }
                    r23 = *(int32_t *)(0x1039c3000 + 0x380);
                    r0 = *(int32_t *)(r20 + r24);
                    [r0 height];
                    *(int32_t *)(r31 + 0x8) = d0;
                    *(int32_t *)r31 = r26;
                    asm{ movz       w6, #0x1089 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(r23, r21);
                    r0 = [UIMenuController sharedMenuController];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    asm{ movz       w2, #0x0 };
                    [r0 setMenuVisible:0x1 animated:0x1];
                    [r21 release];
            }
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)scrollViewDidEndDecelerating:(id)arg2 
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    if (*(int32_t *)(r0 + 0x1039e8000) != arg2) {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    else {
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMAVPlayerMgr class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r23 = r0;
            [r0 stopHoldingUpdate:0x1];
            [r23 release];
            [r22 release];
            r19 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r19 getService:[MMAVPlayerMgr class]];
            r0 = [r0 retain];
            r21 = r0;
            [r0 notifyScrollViewStable];
            [r21 release];
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            r0 = [r19 release];
    }
    return;
}

- (id)scrollViewWillEndDragging:(id)arg2 withVelocity:(id)arg3 targetContentOffset:(id)arg4 
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    r20 = arg0;
    r19 = [r2 retain];
    asm{ fabs       d9, d8 };
    asm{ fcmp       d9, d0 };
    if (CPU_FLAGS & LE) {
            asm{ ldrsw      x8, [x8, #0xd74] };
            if (*(int32_t *)(r20 + 0x1039e8000) == r19) {
                    r22 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [MMAVPlayerMgr class];
                    r0 = [r22 getService:r2];
                    r29 = 0x40;
                    r0 = [r0 retain];
                    r23 = r0;
                    r2 = 0x1;
                    [r0 startHoldingUpdate:r2];
                    [r23 release];
                    [r22 release];
                    asm{ ldrsw      x8, [x8, #0xe38] };
                    asm{ ldp        x9, x10, [x21] };
                    asm{ stp        x9, x10, [x8] };
            }
    }
    asm{ fcmp       d9, d0 };
    if (CPU_FLAGS & P) {
            r21 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMAVPlayerMgr class];
            r0 = [r21 getService:r2];
            r0 = [r0 retain];
            r22 = r0;
            [r0 notifyScrollViewStable];
            [r22 release];
            [r21 release];
    }
    asm{ ldrsw      x8, [x8, #0xd74] };
    if (*(int32_t *)(r20 + 0x1039e8000) == r19) {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 onDragTableViewEnd:r2];
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    r0 = [r19 release];
    return r0;
}

- (void)onPan:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    if ([r0 state] == 0x2) {
            r0 = [r20 view];
            r21 = [r0 retain];
            [r19 locationInView:r21];
            [r21 release];
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 onDragTableView:r21];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)scrollViewDidEndScrollingAnimation:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x120;
    r20 = self;
    r25 = *(int32_t *)__stack_chk_guard;
    r25 = *(int32_t *)r25;
    asm{ stur       x25, [x29, #0xffffffa8] };
    r0 = [arg2 retain];
    r28 = r0;
    r26 = 0x1039c3000;
    r0 = [r0 contentOffset];
    r0 = NSStringFromCGPoint(r0);
    r29 = 0x50;
    r22 = [r0 retain];
    r27 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    asm{ stp        x8, x22, [sp] };
    asm{ movz       w6, #0x10c0 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r27);
    [r22 release];
    asm{ ldrsw      x8, [x8, #0xd74] };
    *(int32_t *)(r31 + 0x28) = 0x1039e8000;
    if (*(int32_t *)(r20 + 0x1039e8000) == r28) {
            asm{ stp        xzr, xzr, [sp, #0x88] };
            asm{ stp        xzr, xzr, [sp, #0x78] };
            asm{ stp        xzr, xzr, [sp, #0x68] };
            asm{ stp        xzr, xzr, [sp, #0x58] };
            asm{ ldrsw      x8, [x8, #0xd70] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            r0 = [r0 retain];
            r23 = r0;
            r25 = [r0 countByEnumeratingWithState:0x58 objects:0x98 count:STK-1];
            *(int32_t *)(r31 + 0x30) = r27;
            if (r25 != 0x0) {
                    *(int32_t *)(r31 + 0x50) = r20;
                    asm{ movz       x22, #0x0 };
                    r20 = **(int32_t *)(r31 + 0x68);
                    r24 = *(int32_t *)(0x103950000 + 0xa18);
                    do {
                            asm{ movz       x27, #0x0 };
                            r21 = *(int32_t *)(0x1039a5000 + 0xf28);
                            do {
                                    if (**(int32_t *)(r31 + 0x68) != r20) {
                                            objc_enumerationMutation(r23);
                                    }
                                    r19 = *(int32_t *)(*(int32_t *)(r31 + 0x60) + r27 * 0x8);
                                    if (objc_msgSend(r19, r21) == 0x1) {
                                            r19 = [r19 retain];
                                            [r22 release];
                                            r22 = r19;
                                    }
                                    r27 = r27 + 0x1;
                            } while (r27 < r25);
                            r25 = objc_msgSend(r23, r24);
                    } while (r25 != 0x0);
            }
            else {
                    *(int32_t *)(r31 + 0x50) = r20;
                    asm{ movz       x22, #0x0 };
            }
            [r23 release];
            r0 = [MMServiceCenter defaultCenter];
            r20 = *(int32_t *)(r31 + 0x50);
            r21 = [r0 retain];
            r2 = [MMAVPlayerMgr class];
            r25 = *(int32_t *)__stack_chk_guard;
            r25 = *(int32_t *)r25;
            r26 = 0x1039c3000;
            r27 = *(int32_t *)(r31 + 0x30);
            r0 = [r21 getService:r2];
            r29 = 0x50;
            r0 = [r0 retain];
            r19 = r0;
            [r0 notifyScrollViewStable];
            [r19 release];
            [r21 release];
            [r22 release];
    }
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xde4] };
    if (*(int8_t *)(r20 + r8) == 0x0) goto loc_101d21d20;
    goto loc_101d21964;

loc_101d21d20:
    r0 = [r28 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r25 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;

loc_101d21964:
    *(int8_t *)(r20 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xe3c] };
    *(int32_t *)(r31 + 0x50) = 0x1039e8000;
    if (*(int32_t *)(r20 + 0x1039e8000) == 0x0) goto loc_101d21bd0;
    goto loc_101d2197c;

loc_101d21bd0:
    asm{ ldrsw      x8, [x8, #0xe40] };
    if (*(int8_t *)(r20 + 0x1039e8000) != 0x0) {
            *(int8_t *)(r20 + 0x1039e8000) = 0x0;
    }
    asm{ ldrsw      x19, [x8, #0xe44] };
    if (*(int8_t *)(r20 + r19) != 0x0) {
            r0 = *(int32_t *)(r26 + 0x380);
            *(int32_t *)r31 = @"hide first unread after jump to msg";
            asm{ movz       w6, #0x10e8 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(r0, r27);
            [r20 animateHideFirstUnReadButton];
            *(int8_t *)(r20 + r19) = 0x0;
    }
    asm{ ldrsw      x8, [x8, #0xd70] };
    r2 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r20 getLastContentMessageNodeFromArray:r2];
    r29 = r29;
    r21 = [r0 retain];
    r8 = 0x1039e8000;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r22 = r20 + r8;
    r23 = objc_loadWeakRetained(r22);
    if (r23 != 0x0) {
            r0 = objc_loadWeakRetained(r22);
            r20 = @selector(setLastCreateTime:);
            r8 = 0x103950000;
            r24 = [r0 respondsToSelector:r20];
            [r0 release];
            [r23 release];
            if (r24 != 0x0) {
                    r22 = objc_loadWeakRetained(r22);
                    r0 = [r21 messageWrap];
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = r0;
                    r8 = 0x103952000;
                    [r0 m_uiCreateTime];
                    [r22 setLastCreateTime:r2];
                    [r23 release];
                    [r22 release];
            }
    }
    [r21 release];
    goto loc_101d21d20;

loc_101d2197c:
    asm{ ldrsw      x22, [x8, #0xd70] };
    r0 = *(int32_t *)(r20 + r22);
    *(int32_t *)(r31 + 0x20) = @selector(count);
    r21 = [r0 count];
    r23 = r21 - 0x1;
    if ((r23 & 0x1 << 0x3f) != 0x0) goto loc_101d21abc;
    goto loc_101d219a4;

loc_101d21abc:
    asm{ movz       w19, #0x0 };

loc_101d21aec:
    r0 = *(int32_t *)(r20 + r22);
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x20));
    asm{ cset       w8, lo };
    if ((r19 & r0 - 0x1) == 0x1) {
            r19 = *(int32_t *)(r20 + r22);
            objc_msgSend(r19, *(int32_t *)(r31 + 0x20)) - r21;
            [r19 removeObjectsInRange:r21];
            r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x28));
            [r0 reloadData];
    }
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r19 = r0;
            r23 = @selector(didShowFirstUnReadMessage);
            r24 = [r0 respondsToSelector:r23];
            [r19 release];
            [r22 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r19 = r0;
                    [r0 didShowFirstUnReadMessage];
                    [r19 release];
            }
    }
    r8 = *(int32_t *)(r31 + 0x50);
    r0 = *(int32_t *)(r20 + r8);
    *(int32_t *)(r20 + r8) = 0x0;
    [r0 release];
    goto loc_101d21bd0;

loc_101d219a4:
    *(int32_t *)(r31 + 0x30) = r27;
    *(int32_t *)(r31 + 0x18) = r28;
    r24 = @selector(objectAtIndexedSubscript:);
    *(int32_t *)(r31 + 0x38) = r24;
    r28 = @selector(messageWrap);
    *(int32_t *)(r31 + 0x40) = r28;
    r26 = @selector(m_uiMesLocalID);
    *(int32_t *)(r31 + 0x48) = r26;
    r25 = @selector(m_uiCreateTime);

loc_101d219d8:
    r0 = *(int32_t *)(r20 + r22);
    r0 = [r0 objectAtIndexedSubscript:r2];
    r0 = [r0 retain];
    r27 = r0;
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r21 = r0;
    r19 = [r0 m_uiMesLocalID];
    if (r19 != [*(int32_t *)(r20 + *(int32_t *)(r31 + 0x50)) m_uiMesLocalID]) goto loc_101d21a98;
    goto loc_101d21a2c;

loc_101d21a98:
    [r21 release];

loc_101d21aa0:
    [r27 release];
    r23 = r23 - 0x1;
    if ((r23 & 0x1 << 0x3f) == 0x0) goto loc_101d219d8;
    asm{ movz       w19, #0x0 };
    r21 = r23 + 0x1;

loc_101d21ad4:
    r28 = *(int32_t *)(r31 + 0x18);
    r25 = *(int32_t *)__stack_chk_guard;
    r25 = *(int32_t *)r25;
    r26 = 0x1039c3000;
    r27 = *(int32_t *)(r31 + 0x30);
    goto loc_101d21aec;

loc_101d21a2c:
    r0 = objc_msgSend(r27, r28);
    r28 = r22;
    r24 = r20;
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r22 = objc_msgSend(r0, r25);
    r20 = objc_msgSend(*(int32_t *)(r24 + *(int32_t *)(r31 + 0x50)), r25);
    [r19 release];
    [r21 release];
    COND = r22 != r20;
    r20 = r24;
    r22 = r28;
    asm{ ldp        x24, x28, [sp, #0x38] };
    r26 = *(int32_t *)(r31 + 0x48);
    if (COND) goto loc_101d21aa0;
    [r27 release];
    r21 = r23 + 0x1;
    r19 = 0x1;
    goto loc_101d21ad4;
}

- (void)scrollViewDidScroll:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    if (r0 == r19) {
            r21 = @selector(contentOffset);
            [r0 contentOffset];
            asm{ ldrsw      x8, [x8, #0xe38] };
            asm{ fsub       d0, d1, d0 };
            asm{ fabs       d0, d0 };
            asm{ fmov       d1, #0x14 };
            asm{ fcmp       d0, d1 };
            if (CPU_FLAGS & P) {
                    r22 = [[MMServiceCenter defaultCenter] retain];
                    r2 = [MMAVPlayerMgr class];
                    r0 = [r22 getService:r2];
                    r29 = 0x50;
                    r0 = [r0 retain];
                    r23 = r0;
                    r2 = 0x1;
                    [r0 stopHoldingUpdate:r2];
                    [r23 release];
                    [r22 release];
            }
            r0 = [UIMenuController sharedMenuController];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            r3 = 0x1;
            asm{ movz       w2, #0x0 };
            [r0 setMenuVisible:r2 animated:r3];
            [r22 release];
            asm{ ldrsw      x23, [x8, #0xe24] };
            r8 = *(int8_t *)(r20 + r23);
            if (r8 == 0x0) {
                    [r19 contentOffset];
                    asm{ fcvtzs     w8, d1 };
                    if (r8 <= 0x0) {
                            asm{ ldrsw      x8, [x8, #0xd6c] };
                            r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                            r22 = r0;
                            if (([r0 hasMoreMsg] & 0x1 << 0x0) != 0x0) {
                                    asm{ ldrsw      x24, [x8, #0xd84] };
                                    r25 = *(int8_t *)(r20 + r24);
                                    [r22 release];
                                    if (r25 == 0x0) {
                                            r9 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                            *(int32_t *)r31 = @"on load more 1";
                                            asm{ movz       w6, #0x1101 };
                                            asm{ movz       x3, #0x0 };
                                            asm{ movz       w4, #0x0 };
                                            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                            *(int8_t *)(r20 + r24) = 0x1;
                                            asm{ ldrsw      x8, [x8, #0xd88] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            [r0 startAnimating];
                                            asm{ movi.16b   v0, #0x0 };
                                            asm{ movz       x3, #0x0 };
                                            [r20 safePerformSelector:@selector(onLoadMoreMessage) withObject:r3 afterDelay:STK-1];
                                    }
                            }
                            else {
                                    [r22 release];
                            }
                    }
            }
            [r19 contentOffset];
            [r19 contentSize];
            [r20 getTableViewVisibleHeightWithOrientation:[UiUtil getRotatedOrientation]];
            asm{ fcvtzu     w8, d8 };
            asm{ fcvtzu     w9, d9 };
            asm{ fcvtzu     w10, d0 };
            if (0x10399f000 < r9 - r10) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                    r21 = r0;
                    if ([r0 hasDownMoreMsg] != 0x0) {
                            asm{ ldrsw      x22, [x8, #0xd84] };
                            if (*(int8_t *)(r20 + r22) != 0x0) {
                                    [r21 release];
                            }
                            else {
                                    asm{ ldrsw      x8, [x8, #0xde4] };
                                    r24 = *(int8_t *)(r20 + 0x1039e8000);
                                    [r21 release];
                                    if (r24 == 0x0) {
                                            *(int32_t *)r31 = @"on load more 2";
                                            asm{ movz       w6, #0x110b };
                                            asm{ movz       x3, #0x0 };
                                            asm{ movz       w4, #0x0 };
                                            [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                            *(int8_t *)(r20 + r22) = 0x1;
                                            asm{ ldrsw      x8, [x8, #0xd88] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            [r0 startAnimating];
                                            asm{ movz       x2, #0x0 };
                                            [r20 onLoadDownMoreMessage:0x2];
                                    }
                            }
                    }
                    else {
                            [r21 release];
                    }
            }
            if (*(int8_t *)(r20 + r23) == 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd8c] };
                    if (*(int32_t *)(r20 + 0x1039e8000) >= 0x5) {
                            asm{ ldrsw      x8, [x8, #0xdd4] };
                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                            if ([r0 m_bPositioning] != 0x0) {
                                    [r20 ScrollToBottomAnimated:0x1];
                            }
                    }
            }
            asm{ ldrsw      x8, [x8, #0xe48] };
            if (*(int32_t *)(r20 + 0x1039e8000) != 0x0) {
                    [r20 showReceiveMsgTips];
            }
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)touchesBegan_TableView:(id)arg2 withEvent:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd84] };
    if (*(int8_t *)(r20 + 0x1039e8000) == 0x0) {
            r0 = [r19 anyObject];
            r0 = [r0 retain];
            r21 = r0;
            if ([r0 tapCount] >= 0x2) {
                    asm{ movz       x4, #0x0 };
                    [NSObject safeCancelPreviousPerformRequestsWithTarget:r20 selector:@selector(onTouchDown) object:STK-1];
            }
            [r21 release];
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)touchesEnded_TableView:(id)arg2 withEvent:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    r21 = [arg2 anyObject];
    [r19 release];
    r0 = [r21 retain];
    r19 = r0;
    r1 = @selector(tapCount);
    if ([r0 tapCount] <= 0x1) {
            asm{ movz       x1, #0x0 };
            gettimeofday(0x0, r1);
            r22 = *(int32_t *)r31;
            asm{ ldrsw      x8, [x8, #0xe4c] };
            r25 = *(int32_t *)(r20 + 0x1039e8000);
            r23 = *(int32_t *)(r31 + 0x8);
            r24 = *(int32_t *)(0x8 + r20 + 0x1039e8000);
            r0 = [UIMenuController sharedMenuController];
            r29 = 0x40;
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 isMenuVisible];
            asm{ scvtf      s0, x8 };
            asm{ scvtf      s2, w8 };
            asm{ fmul       s0, s0, s1 };
            asm{ fdiv       s1, s2, s1 };
            asm{ fadd       s0, s0, s1 };
            asm{ fcvtzs     x22, s0 };
            [r21 release];
            asm{ ccmp       w23, #0x0, #0x4, ge };
            if (r22 != 0xc9) {
                    asm{ movz       x3, #0x0 };
                    [r20 safePerformSelector:@selector(onTouchDown) withObject:r3 afterDelay:STK-1];
            }
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)onTouchDown
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    [self hideToolViewAnimated:0x1];
    r0 = [UIMenuController sharedMenuController];
    r0 = [r0 retain];
    r19 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setMenuVisible:0x1 animated:0x1];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (id)captureViewParams
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    r0 = [r0 getExtraInfo];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 objectForKey:@"inputToolViewPreviewData"];
    r21 = [r0 retain];
    [r20 release];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r21 autorelease];
    return r0;
}

- (void)clearCaptureViewParams
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    r0 = [r0 getExtraInfo];
    r0 = [r0 retain];
    r20 = r0;
    [r0 removeObjectForKey:@"inputToolViewPreviewData"];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (id)shouldInitWXEmoticonView
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r19 = r0;
    r21 = @selector(CanSendEmoticonMessage);
    if (([r0 respondsToSelector:r21] & 0x1 << 0x0) != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r21 = [r0 CanSendEmoticonMessage];
            [r0 release];
            r0 = [r19 release];
            if ((r21 & 0x1 << 0x0) != 0x0) {
                    r0 = 0x1;
            }
            else {
                    asm{ movz       w0, #0x0 };
            }
    }
    else {
            r0 = [r19 release];
            asm{ movz       w0, #0x0 };
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (void)pasteImage:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r23 = [r0 CanSendImageMsg:r19];
    [r0 release];
    if ((r23 & 0x1 << 0x0) != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r22 = r0;
            r0 = [r0 GetMessageFromImage:r19];
            r21 = [r0 retain];
            [r22 release];
            [r21 setM_forwardType:0x2];
            r0 = [ShareMessageConfirmLogicHelper alloc];
            asm{ movz       w3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [r0 initWithMessageWrap:r21 isShowTextView:r3 andAppScene:STK-1];
            asm{ ldrsw      x22, [x8, #0xe50] };
            r8 = *(int32_t *)(r20 + r22);
            *(int32_t *)(r20 + r22) = r0;
            [r8 release];
            r0 = *(int32_t *)(r20 + r22);
            [r0 setDelegate:r20];
            r0 = *(int32_t *)(r20 + r22);
            asm{ movz       w2, #0x0 };
            [r0 setConfirmViewStyle:r20];
            r0 = *(int32_t *)(r20 + r22);
            [r0 showConfirmView];
            r0 = *(int32_t *)(r20 + r22);
            [r0 rotateToCurrentOrietation];
            [r21 release];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)sendCaptruedImage:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    asm{ movz       x2, #0x0 };
    r22 = [r0 CanSendImageMsg:r2];
    [r0 release];
    if ((r22 & 0x1 << 0x0) != 0x0) {
            r21 = objc_loadWeakRetained(r20);
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(onSendCaptrueImage:);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r21 = r0;
                            [r0 onSendCaptrueImage:r2];
                            [r21 release];
                    }
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (id)getCurrentChatName
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsUsrName];
    r21 = [r0 retain];
    [r20 release];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r21 autorelease];
    return r0;
}

- (void)AsyncSendMessage:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = [arg2 retain];
    r19 = objc_loadWeakRetained(self + 0x1039e8000);
    r21 = [CUtility ReplaceInvalidChar:r20];
    [r20 release];
    r20 = [r21 retain];
    [r19 SendTextMessage:r20];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)SendTextMessageToolView:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
    r22 = [r0 CanSendTextMsg:r19];
    [r0 release];
    if (r22 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 setText:@""];
            [r20 safePerformSelector:@selector(AsyncSendMessage:) withObject:r19 afterDelay:STK-1];
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)SendEmojiArtMessageToolView:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r22 = [r0 CanSendTextMsg:r19];
    [r0 release];
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r21 = r0;
            [r0 SendEmojiArtMessage:r19];
            [r21 release];
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)updateTableLayoutAnimateDuration:(id)arg2 Orientation:(id)arg3 
{
    r0 = self;
    asm{ stp        d13, d12, [sp, #0xffffff80]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r21 = arg2;
    r19 = r0;
    asm{ ldrsw      x24, [x8, #0xd74] };
    if (*(int32_t *)(r19 + r24) != 0x0) {
            r26 = r21 - 0x3;
            r20 = @selector(screenWidthCurOri);
            [UiUtil screenWidthCurOri];
            r22 = @selector(screenHeightCurOri);
            [UiUtil screenHeightCurOri];
            r0 = UiUtil;
            if (r26 <= 0x1) {
                    asm{ fcmp       d9, d0 };
                    if (CPU_FLAGS & NP) {
                            r1 = r20;
                    }
                    else {
                            r1 = r22;
                    }
            }
            else {
                    asm{ fcmp       d9, d0 };
                    if (CPU_FLAGS & P) {
                            r1 = r20;
                    }
                    else {
                            r1 = r22;
                    }
            }
            objc_msgSend(r0, r1);
            [r19 getSearchBarHeight];
            [r19 getTipsHeight];
            asm{ fadd       d12, d9, d0 };
            asm{ fcmp       d12, #0x0 };
            if (CPU_FLAGS & LE) {
                    asm{ ldrsw      x8, [x8, #0xdc8] };
                    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
            }
            if ((r26 <= 0x1) && (([DeviceInfo isiPadUniversal] & 0x1 << 0x0) == 0x0)) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                    [r0 statusBarHeight];
                    asm{ fadd       d12, d12, d0 };
            }
            r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
            [r0 screenHeight:r21];
            r0 = [r19 view];
            r0 = [r0 retain];
            r23 = r0;
            [r0 height];
            [r23 release];
            r0 = [r19 view];
            r0 = [r0 retain];
            r22 = r0;
            [r0 width];
            [r22 release];
            asm{ fcmp       d10, d11 };
            asm{ fcsel      d0, d11, d10, mi };
            asm{ fcmp       d9, d0 };
            asm{ fcsel      d9, d9, d0, mi };
            r2 = r21;
            [r19 getTableViewVisibleHeightWithOrientation:r2];
            asm{ fsub       d10, d9, d0 };
            r0 = [DeviceInfo isiPadUniversal];
            asm{ cset       w8, hi };
            if (((r0 & 0x1 << 0x0) != 0x0) || (0x103953000 != 0x0)) {
                    r0 = [r19 getContentViewY];
                    asm{ fadd       d9, d12, d0 };
            }
            asm{ fsub       d10, d10, d12 };
            asm{ fcmp       d8, #0x0 };
            if (CPU_FLAGS & LE) {
                    r3 = UIGraphicsGetCurrentContext(r0);
                    asm{ movz       x2, #0x0 };
                    [UIView beginAnimations:r2 context:r3];
                    asm{ movz       x2, #0x0 };
                    [UIView setAnimationCurve:r2];
                    [UIView setAnimationDelay:r2];
                    r2 = 0x1;
                    [UIView setAnimationBeginsFromCurrentState:r2];
            }
            r21 = *(int32_t *)(r19 + r24);
            r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
            [r0 screenWidthCurOri];
            [r21 setWidth:r2];
            r0 = *(int32_t *)(r19 + r24);
            asm{ movi.16b   v1, #0x0 };
            asm{ movi.16b   v3, #0x0 };
            [r0 setContentInset:r2];
            r19 = *(int32_t *)(r19 + r24);
            [r19 contentInset];
            r0 = [r19 setScrollIndicatorInsets:r2];
            asm{ fcmp       d8, #0x0 };
            if (CPU_FLAGS & LE) {
                    asm{ ldp        x29, x30, [sp, #0x70] };
                    asm{ ldp        x20, x19, [sp, #0x60] };
                    asm{ ldp        x22, x21, [sp, #0x50] };
                    asm{ ldp        x24, x23, [sp, #0x40] };
                    asm{ ldp        x26, x25, [sp, #0x30] };
                    asm{ ldp        d9, d8, [sp, #0x20] };
                    asm{ ldp        d11, d10, [sp, #0x10] };
                    asm{ ldp        d13, d12, [sp], #0x80 };
                    r0 = [UIView commitAnimations];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x70] };
                    asm{ ldp        x20, x19, [sp, #0x60] };
                    asm{ ldp        x22, x21, [sp, #0x50] };
                    asm{ ldp        x24, x23, [sp, #0x40] };
                    asm{ ldp        x26, x25, [sp, #0x30] };
                    asm{ ldp        d9, d8, [sp, #0x20] };
                    asm{ ldp        d11, d10, [sp, #0x10] };
                    asm{ ldp        d13, d12, [sp], #0x80 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        x26, x25, [sp, #0x30] };
            asm{ ldp        d9, d8, [sp, #0x20] };
            asm{ ldp        d11, d10, [sp, #0x10] };
            asm{ ldp        d13, d12, [sp], #0x80 };
            return;
    }
    return;
}

- (void)scrollTableToBottomAnimated:(id)arg2 init:(id)arg3 
{
    asm{ stp        d15, d14, [sp, #0xffffff60]! };
    asm{ stp        d13, d12, [sp, #0x10] };
    asm{ stp        d11, d10, [sp, #0x20] };
    asm{ stp        d9, d8, [sp, #0x30] };
    asm{ stp        x28, x27, [sp, #0x40] };
    asm{ stp        x26, x25, [sp, #0x50] };
    asm{ stp        x24, x23, [sp, #0x60] };
    asm{ stp        x22, x21, [sp, #0x70] };
    asm{ stp        x20, x19, [sp, #0x80] };
    asm{ stp        x29, x30, [sp, #0x90] };
    0x0 = 0x0 - 0x180;
    r22 = arg3;
    r19 = self;
    r0 = [self navigationController];
    r0 = [r0 retain];
    r21 = r0;
    [r0 release];
    asm{ cset       w8, ne };
    *(int32_t *)(r31 + 0xb0) = 0x103950000;
    asm{ ldrsw      x20, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + r20);
    r21 = @selector(contentSize);
    [r0 contentSize];
    [r19 getTipsHeight];
    r23 = @selector(getContentViewY);
    [r19 getContentViewY];
    *(int32_t *)(r31 + 0xa0) = @selector(sharedApplication);
    r0 = [UIApplication sharedApplication];
    r29 = 0x90;
    r0 = [r0 retain];
    r27 = r0;
    r25 = @selector(statusBarOrientation);
    [r0 statusBarOrientation];
    r26 = @selector(getTableViewVisibleHeightWithOrientation:);
    [r19 getTableViewVisibleHeightWithOrientation:r2];
    *(int32_t *)(r31 + 0xa8) = arg2;
    asm{ fadd       d1, d8, d9 };
    asm{ fneg       d8, d10 };
    asm{ fsub       d9, d1, d0 };
    [r27 release];
    asm{ fcmp       d9, d8 };
    asm{ fcsel      d0, d9, d8, gt };
    asm{ fcvtzs     x27, d0 };
    r0 = *(int32_t *)(r19 + r20);
    [r0 contentOffset];
    r0 = *(int32_t *)(r19 + r20);
    [r0 contentSize];
    asm{ fcvtzs     x28, d1 };
    asm{ ldrsw      x8, [x8, #0xd8c] };
    [r19 getTableViewVisibleHeightWithOrientation:r2];
    asm{ fcvtzs     x26, d0 };
    if (r22 != 0x0) {
            *(int32_t *)(r31 + 0x90) = r20;
            r24 = r26;
            asm{ ldrsw      x20, [x8, #0xd70] };
            r0 = *(int32_t *)(r19 + r20);
            r0 = [r0 lastObject];
            r29 = 0x90;
            r0 = [r0 retain];
            r22 = r0;
            r26 = @selector(sectionHeight);
            [r0 sectionHeight];
            asm{ scvtf      d1, x24 };
            asm{ fcmp       d0, d1 };
            if (CPU_FLAGS & LE) {
                    r2 = NSClassFromString(@"ReaderMessageViewModel");
                    if ([r22 isKindOfClass:r2] != 0x0) {
                            [r22 sectionHeight];
                            r0 = *(int32_t *)(r19 + r20);
                            r27 = @selector(count);
                            r0 = [r0 count];
                            asm{ fcvtzs     x9, d8 };
                            if (r0 >= 0x2) {
                                    *(int32_t *)(r31 + 0x98) = r9;
                                    r20 = *(int32_t *)(r19 + r20);
                                    r2 = [r20 count] - 0x2;
                                    r0 = [r20 objectAtIndexedSubscript:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r27 = r0;
                                    if ([r0 modelType] == 0x2) {
                                            [r27 sectionHeight];
                                            r8 = *(int32_t *)(r31 + 0x98);
                                            asm{ scvtf      d1, x8 };
                                            asm{ fadd       d0, d1, d0 };
                                            asm{ fcvtzs     x8, d0 };
                                            *(int32_t *)(r31 + 0x98) = r8;
                                    }
                                    [r27 release];
                                    r9 = *(int32_t *)(r31 + 0x98);
                            }
                    }
            }
            [r22 release];
            r26 = r24;
            r20 = *(int32_t *)(r31 + 0x90);
    }
    [r19 getContentViewY];
    asm{ fneg       d0, d0 };
    asm{ scvtf      d1, x27 };
    asm{ fcmp       d1, d0 };
    asm{ fcsel      d0, d1, d0, gt };
    asm{ fcvtzs     x22, d0 };
    r0 = *(int32_t *)(r19 + r20);
    r24 = @selector(contentInset);
    [r0 contentInset];
    asm{ fcmp       d0, #0x0 };
    if (CPU_FLAGS & E) {
            r0 = *(int32_t *)(r19 + r20);
            [r0 contentInset];
            asm{ scvtf      d1, x22 };
            asm{ fsub       d0, d1, d0 };
            asm{ fcvtzs     x22, d0 };
    }
    *(int32_t *)(r31 + 0x98) = r24;
    r27 = r20;
    if (([DeviceInfo isiPadUniversal] & 0x1 << 0x0) == 0x0) {
            r0 = objc_msgSend(UIApplication, *(int32_t *)(r31 + 0xa0));
            r29 = r29;
            r0 = [r0 retain];
            r20 = [r0 statusBarOrientation] - 0x3;
            [r0 release];
            if (r20 >= 0x2) {
                    [r19 getContentViewY];
                    asm{ scvtf      d1, x22 };
                    asm{ fadd       d0, d1, d0 };
                    asm{ fcvtzs     x25, d0 };
            }
            else {
                    r25 = r22;
            }
    }
    else {
            [r19 getContentViewY];
            asm{ scvtf      d1, x22 };
            asm{ fadd       d0, d1, d0 };
            asm{ fcvtzs     x25, d0 };
    }
    r9 = *(int32_t *)(r31 + 0xb0);
    *(int32_t *)(r31 + 0xa0) = r25;
    r24 = r9 & *(int32_t *)(r31 + 0xa8);
    r0 = *(int32_t *)(r19 + r27);
    *(int32_t *)(r31 + 0x80) = @selector(height);
    [r0 height];
    r0 = *(int32_t *)(r19 + r27);
    r0 = [r0 contentSize];
    r0 = NSStringFromCGSize(r0);
    r29 = r29;
    r21 = [r0 retain];
    r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    asm{ stp        x21, x24, [sp, #0x28] };
    *(int32_t *)(r31 + 0x20) = d8;
    asm{ stp        x26, x25, [sp, #0x10] };
    r25 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
    asm{ stp        x8, x28, [sp] };
    r2 = 0x1;
    asm{ movz       w6, #0x1203 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r20);
    r0 = [r21 release];
    if (r28 < 0x1) goto loc_101d23a7c;
    goto loc_101d233c0;

loc_101d23a7c:
    0x0 = r29 - 0x90;
    asm{ ldp        x29, x30, [sp, #0x90] };
    asm{ ldp        x20, x19, [sp, #0x80] };
    asm{ ldp        x22, x21, [sp, #0x70] };
    asm{ ldp        x24, x23, [sp, #0x60] };
    asm{ ldp        x26, x25, [sp, #0x50] };
    asm{ ldp        x28, x27, [sp, #0x40] };
    asm{ ldp        d9, d8, [sp, #0x30] };
    asm{ ldp        d11, d10, [sp, #0x20] };
    asm{ ldp        d13, d12, [sp, #0x10] };
    asm{ ldp        d15, d14, [sp], #0xa0 };
    return;

loc_101d233c0:
    if (r24 == 0x0) goto loc_101d23418;
    goto loc_101d233c4;

loc_101d23418:
    r0 = *(int32_t *)(r19 + r27);
    asm{ scvtf      d1, x8 };
    asm{ movi.16b   v0, #0x0 };
    0x0 = r29 - 0x90;
    asm{ ldp        x29, x30, [sp, #0x90] };
    asm{ ldp        x20, x19, [sp, #0x80] };
    asm{ ldp        x22, x21, [sp, #0x70] };
    asm{ ldp        x24, x23, [sp, #0x60] };
    asm{ ldp        x26, x25, [sp, #0x50] };
    asm{ ldp        x28, x27, [sp, #0x40] };
    asm{ ldp        d9, d8, [sp, #0x30] };
    asm{ ldp        d11, d10, [sp, #0x20] };
    asm{ ldp        d13, d12, [sp, #0x10] };
    asm{ ldp        d15, d14, [sp], #0xa0 };
    r0 = [r0 setContentOffset:r2];

loc_101d233c4:
    asm{ ldrsw      x8, [x8, #0xd84] };
    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
            *(int32_t *)(r31 + 0x78) = r26;
            r0 = *(int32_t *)(0x1039c3000 + 0x380);
            *(int32_t *)r31 = @"isLoadingMoreMsg when scrollingBottom";
            r2 = 0x2;
            asm{ movz       w6, #0x120c };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(r0, r20);
            *(int32_t *)(r31 + 0x74) = 0x1;
    }
    else {
            *(int32_t *)(r31 + 0x78) = r26;
            *(int32_t *)(r31 + 0x74) = 0x0;
    }
    r20 = r27;
    r1 = *(int32_t *)(r31 + 0x98);
    *(int32_t *)(r31 + 0x98) = r1;
    asm{ ldrsw      x8, [x8, #0xe24] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x1;
    r0 = *(int32_t *)(r19 + r20);
    objc_msgSend(r0, r1);
    asm{ stp        d1, d0, [sp, #0x60] };
    *(int32_t *)(r31 + 0x58) = d2;
    r0 = *(int32_t *)(r19 + r20);
    [r0 frame];
    r0 = *(int32_t *)(r19 + r20);
    *(int32_t *)(r31 + 0xa8) = [[r0 indexPathsForVisibleRows] retain];
    r0 = *(int32_t *)(r19 + r20);
    asm{ scvtf      d8, x8 };
    *(int32_t *)(r31 + 0x50) = @selector(setContentOffset:animated:);
    asm{ movi.16b   v0, #0x0 };
    asm{ movz       w2, #0x0 };
    [r0 setContentOffset:r2 animated:r3];
    r21 = [[*(int32_t *)(r19 + r20) indexPathsForVisibleRows] retain];
    r0 = *(int32_t *)(r31 + 0xa8);
    r0 = [r0 lastObject];
    r0 = [r0 retain];
    r25 = r0;
    r23 = @selector(section);
    r26 = [r0 section];
    r28 = @selector(firstObject);
    r0 = [r21 firstObject];
    r29 = r29;
    r0 = [r0 retain];
    r22 = [r0 section];
    asm{ fcvtzs     x24, d9 };
    [r0 release];
    [r25 release];
    if (r26 < r22) {
            *(int32_t *)(r31 + 0x40) = r24;
            r0 = *(int32_t *)(r31 + 0xa8);
            r0 = [r0 firstObject];
            *(int32_t *)(r31 + 0x48) = r28;
            *(int32_t *)(r31 + 0x90) = r20;
            r29 = r29;
            r0 = [r0 retain];
            r27 = [r0 section];
            [r0 release];
            r28 = @selector(lastObject);
            r26 = @selector(section);
            r23 = @selector(objectAtIndexedSubscript:);
            r25 = @selector(sectionHeight);
            asm{ movi.16b   v0, #0x0 };
            *(int32_t *)(r31 + 0xb0) = q0;
            r20 = 0x1039e8000;
            do {
                    r0 = *(int32_t *)(r31 + 0xa8);
                    r0 = [r0 lastObject];
                    r29 = r29;
                    r0 = [r0 retain];
                    r24 = [r0 section];
                    [r0 release];
                    if (r27 > r24) {
                        break;
                    }
                    asm{ ldrsw      x8, [x20, #0xd70] };
                    r0 = *(int32_t *)(r19 + 0x10399f000);
                    r2 = r27;
                    r0 = [r0 objectAtIndexedSubscript:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r22 = r0;
                    [r0 sectionHeight];
                    q1 = *(int32_t *)(r31 + 0xb0);
                    asm{ fadd       d1, d1, d0 };
                    *(int32_t *)(r31 + 0xb0) = q1;
                    [r22 release];
                    r27 = r27 + 0x1;
            } while (true);
            r0 = objc_msgSend(r21, *(int32_t *)(r31 + 0x48));
            r29 = r29;
            r0 = [r0 retain];
            r28 = [r0 section];
            [r0 release];
            r27 = @selector(lastObject);
            r26 = @selector(section);
            r23 = @selector(objectAtIndexedSubscript:);
            r25 = @selector(sectionHeight);
            do {
                    r0 = [r21 lastObject];
                    r29 = r29;
                    r0 = [r0 retain];
                    r24 = [r0 section];
                    [r0 release];
                    if (r28 > r24) {
                        break;
                    }
                    asm{ ldrsw      x8, [x20, #0xd70] };
                    r0 = *(int32_t *)(r19 + 0x10399f000);
                    r2 = r28;
                    r0 = [r0 objectAtIndexedSubscript:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r22 = r0;
                    [r0 sectionHeight];
                    q1 = *(int32_t *)(r31 + 0xb0);
                    asm{ fadd       d1, d1, d0 };
                    *(int32_t *)(r31 + 0xb0) = q1;
                    [r22 release];
                    r28 = r28 + 0x1;
            } while (true);
            r24 = *(int32_t *)(r31 + 0x90);
            r0 = *(int32_t *)(r19 + r24);
            objc_msgSend(r0, *(int32_t *)(r31 + 0x80));
            r25 = *(int32_t *)(r31 + 0x48);
            asm{ fsub       d0, d1, d0 };
            *(int32_t *)(r31 + 0x80) = q0;
            asm{ fcmp       d0, #0x0 };
            if (CPU_FLAGS & LE) {
                    r0 = *(int32_t *)(r31 + 0xa8);
                    r0 = [r0 lastObject];
                    r0 = [r0 retain];
                    r23 = r0;
                    r0 = [r0 section];
                    asm{ ldrsw      x9, [x9, #0xe30] };
                    r22 = r19 + 0x1039e8000;
                    *(int32_t *)r22 = r0 + 0x1;
                    [r23 release];
                    r0 = objc_msgSend(r21, r25);
                    r28 = r24;
                    r0 = [r0 retain];
                    r23 = r0;
                    r24 = [r0 section];
                    r0 = *(int32_t *)(r31 + 0xa8);
                    r0 = [r0 lastObject];
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    r0 = [r0 section];
                    r27 = *(int32_t *)(r31 + 0xa0);
                    *(int32_t *)(r22 + 0x8) = r0 - r24 - 0x1;
                    [r25 release];
                    [r23 release];
                    if (*(int32_t *)(r22 + 0x8) != 0x0) {
                            asm{ movz       x26, #0x0 };
                            asm{ ldrsw      x20, [x20, #0xd70] };
                            r23 = @selector(objectAtIndexedSubscript:);
                            r24 = @selector(sectionHeight);
                            do {
                                    r20 = 0x1039e8000;
                                    r0 = *(int32_t *)(r19 + r20);
                                    r2 = r26 + *(int32_t *)r22;
                                    r0 = [r0 objectAtIndexedSubscript:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r25 = r0;
                                    [r0 sectionHeight];
                                    asm{ scvtf      d1, x27 };
                                    asm{ fsub       d0, d1, d0 };
                                    asm{ fcvtzs     x27, d0 };
                                    [r25 release];
                                    r26 = r26 + 0x1;
                            } while (r26 < *(int32_t *)(r22 + 0x8));
                    }
                    *(int32_t *)(r31 + 0xa0) = r27;
                    r23 = *(int32_t *)(r19 + r28);
                    [r23 x];
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 y];
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 width];
                    asm{ fsub       d1, d10, d0 };
                    [r23 setFrame:r2];
                    r0 = *(int32_t *)(r19 + r28);
                    objc_msgSend(r0, *(int32_t *)(r31 + 0x98));
                    asm{ fadd       d0, d4, d0 };
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 setContentInset:r2];
                    r0 = *(int32_t *)(r19 + r28);
                    [r0 reloadData];
                    r0 = *(int32_t *)(r19 + r28);
                    asm{ scvtf      d0, x8 };
                    asm{ fsub       d1, d0, d1 };
                    asm{ movi.16b   v0, #0x0 };
                    r1 = *(int32_t *)(r31 + 0x50);
                    asm{ movz       w2, #0x0 };
                    objc_msgSend(r0, r1);
            }
    }
    else {
            r0 = *(int32_t *)(r19 + r20);
            asm{ scvtf      d1, x24 };
            asm{ movi.16b   v0, #0x0 };
            *(int32_t *)(r31 + 0x80) = q0;
            asm{ movi.16b   v0, #0x0 };
            r1 = *(int32_t *)(r31 + 0x50);
            asm{ movz       w2, #0x0 };
            objc_msgSend(r0, r1);
    }
    asm{ ldrsw      x20, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + r20);
    [r0 fKeyboardAnimationDuration];
    r0 = *(int32_t *)(r19 + r20);
    r23 = [r0 iKeyboardAnimationCurve] << 0x10;
    r20 = *(int32_t *)_NSConcreteStackBlock;
    asm{ stur       x20, [x29, #0xffffff38] };
    asm{ movz       w24, #0xc200, lsl #16 };
    asm{ stp        w24, wzr, [x29, #0xffffff40] };
    asm{ nop         };
    asm{ stur       x8, [x29, #0xffffff48] };
    asm{ stur       x8, [x29, #0xffffff50] };
    r0 = [r19 retain];
    asm{ stur       x0, [x29, #0xffffff58] };
    asm{ stur       x8, [x29, #0xffffff60] };
    asm{ stur       d0, [x29, #0xffffff68] };
    *(int32_t *)(r31 + 0xc0) = r20;
    asm{ stp        w24, wzr, [sp, #0xc8] };
    asm{ nop         };
    *(int32_t *)(r31 + 0xd0) = 0x101d23bf0;
    *(int32_t *)(r31 + 0xd8) = 0x1032187e0;
    *(int32_t *)(r31 + 0xe8) = d0;
    *(int32_t *)(r31 + 0xe0) = [r0 retain];
    asm{ stp        d12, d13, [sp, #0xf0] };
    asm{ stp        d14, d15, [sp, #0x100] };
    *(int32_t *)(r31 + 0x110) = *(int32_t *)(r31 + 0x68);
    *(int32_t *)(r31 + 0x118) = *(int32_t *)(r31 + 0x60);
    asm{ stp        d0, d11, [sp, #0x120] };
    *(int32_t *)(r31 + 0x130) = d8;
    *(int8_t *)(r31 + 0x140) = *(int32_t *)(r31 + 0x74);
    *(int32_t *)(r31 + 0x138) = *(int32_t *)(r31 + 0x78);
    asm{ movi.16b   v1, #0x0 };
    [UIView animateWithDuration:r23 delay:r29 - 0xc8 options:STK1 animations:STK0 completion:STK-1];
    r0 = *(int32_t *)(r31 + 0xe0);
    r0 = [r0 release];
    asm{ ldur       x0, [x29, #0xffffff58] };
    [r0 release];
    [r21 release];
    r0 = *(int32_t *)(r31 + 0xa8);
    r0 = [r0 release];
    goto loc_101d23a7c;
}

- (void)updateTableContentOffsetAnimated:(id)arg2 OffsetDelta:(id)arg3 
{
    r3 = arg3;
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = arg2;
    r19 = self;
    if ((r20 & 0x1 << 0x0) != 0x0) {
            asm{ ldrsw      x23, [x8, #0xdd4] };
            r0 = *(int32_t *)(r19 + r23);
            r21 = @selector(fKeyboardAnimationDuration);
            [r0 fKeyboardAnimationDuration];
            asm{ fcmp       d0, #0x0 };
            if (CPU_FLAGS & LE) {
                    asm{ movz       x2, #0x0 };
                    asm{ movz       x3, #0x0 };
                    [UIView beginAnimations:r2 context:r3];
                    r0 = *(int32_t *)(r19 + r23);
                    [r0 fKeyboardAnimationDuration];
                    [UIView setAnimationDuration:r2];
                    r0 = *(int32_t *)(r19 + r23);
                    r2 = [r0 iKeyboardAnimationCurve];
                    [UIView setAnimationCurve:r2];
                    r2 = 0x1;
                    [UIView setAnimationBeginsFromCurrentState:r2];
            }
    }
    asm{ ldrsw      x8, [x8, #0xd74] };
    r21 = *(int32_t *)(r19 + 0x1039e8000);
    [r21 contentOffset];
    asm{ fadd       d1, d1, d8 };
    asm{ movi.16b   v0, #0x0 };
    r0 = [r21 setContentOffset:r2];
    if (r20 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r0 fKeyboardAnimationDuration];
            asm{ fcmp       d0, #0x0 };
            if (CPU_FLAGS & LE) {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        d9, d8, [sp], #0x50 };
                    r0 = [UIView commitAnimations];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        d9, d8, [sp], #0x50 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x50 };
            return;
    }
    return;
}

- (void)adjustTableViewRect
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ csel       x2, x9, x8, ne };
    asm{ movi.16b   v0, #0x0 };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [self updateTableLayoutAnimateDuration:r2 Orientation:r3];
    return;
}

- (void)ToolViewPositionDidChanged:(id)arg2 animated:(id)arg3 
{
    asm{ stp        d11, d10, [sp, #0xffffffa0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = arg3;
    r20 = self;
    r0 = [NewUserGuideLogic shareLogic];
    r0 = [r0 retain];
    r22 = r0;
    asm{ movz       w2, #0x0 };
    [r0 removeVoipAndPhoneTip:arg2];
    [r22 release];
    r0 = [NewUserGuideLogic shareLogic];
    r0 = [r0 retain];
    r21 = r0;
    asm{ movz       w2, #0x0 };
    [r0 removeVoiceTip:arg2];
    [r21 release];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r20 + 0x1039e8000);
    [r20 getTableViewVisibleHeightWithOrientation:r2];
    asm{ ldrsw      x22, [x8, #0xd74] };
    r0 = *(int32_t *)(r20 + r22);
    [r0 contentOffset];
    asm{ fadd       d10, d8, d1 };
    r0 = *(int32_t *)(r20 + r22);
    [r0 contentSize];
    r0 = *(int32_t *)(r20 + r22);
    [r0 contentInset];
    r2 = [UiUtil getRotatedOrientation];
    asm{ movi.16b   v0, #0x0 };
    [r20 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    r0 = *(int32_t *)(r20 + r22);
    [r0 contentInset];
    asm{ fcmp       d10, d9 };
    if (CPU_FLAGS & GE) {
            asm{ fsub       d0, d2, d8 };
            r21 = @selector(updateTableContentOffsetAnimated:OffsetDelta:);
    }
    else {
            r21 = @selector(updateTableContentOffsetAnimated:OffsetDelta:);
            asm{ movz       w2, #0x0 };
            asm{ fmov       d0, #0xffffffffffffffff };
            [r20 updateTableContentOffsetAnimated:r2 OffsetDelta:r1];
            asm{ fmov       d0, #0x1 };
    }
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x60 };
    r0 = objc_msgSend(r20, r21);
    return;
}

- (void)HasCustomInputToolViewAndDontNeedShowToolView:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = arg2;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r21 = r0;
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(HasCustomInputToolViewAndDontNeedShowToolView:);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            r0 = [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = r0;
                    [r0 HasCustomInputToolViewAndDontNeedShowToolView:r2];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onPositionModeChangeTo:(id)arg2 Animated:(id)arg3 
{
    r3 = arg3;
    asm{ stp        d13, d12, [sp, #0xffffff90]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r20 = arg2;
    r19 = self;
    r0 = [NewUserGuideLogic shareLogic];
    r0 = [r0 retain];
    r22 = r0;
    asm{ movz       w2, #0x0 };
    [r0 removeVoipAndPhoneTip:r2];
    [r22 release];
    r0 = [NewUserGuideLogic shareLogic];
    r0 = [r0 retain];
    r21 = r0;
    asm{ movz       w2, #0x0 };
    [r0 removeVoiceTip:r2];
    [r21 release];
    asm{ ldrsw      x24, [x8, #0xd74] };
    if (r20 != 0x2) {
            r0 = *(int32_t *)(r19 + r24);
            r2 = [r0 isEditing] ^ 0x1;
    }
    else {
            asm{ movz       w2, #0x0 };
    }
    asm{ ldrsw      x8, [x8, #0xe18] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 setGestureIsEnable:r2];
    r0 = *(int32_t *)(r19 + r24);
    [r0 contentOffset];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r19 + 0x1039e8000);
    [r19 getTableViewVisibleHeightWithOrientation:r2];
    r0 = *(int32_t *)(r19 + r24);
    [r0 contentSize];
    r0 = *(int32_t *)(r19 + r24);
    [r0 contentOffset];
    r0 = *(int32_t *)(r19 + r24);
    r21 = @selector(contentInset);
    [r0 contentInset];
    r0 = [UIApplication sharedApplication];
    r0 = [r0 retain];
    r22 = r0;
    r2 = [r0 statusBarOrientation];
    asm{ movi.16b   v0, #0x0 };
    [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    [r22 release];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r23 = [r0 hasDownMoreMsg];
    r0 = [r0 release];
    if ((r20 != 0x2) || ((r23 ^ 0x1) != 0x0)) {
            if (((r20 | 0x1) == 0x3) || (r20 == 0x4)) {
                    r0 = *(int32_t *)(r19 + r24);
                    [r0 contentInset];
                    asm{ fsub       d0, d0, d13 };
                    r0 = *(int32_t *)(r19 + r24);
                    asm{ fadd       d1, d11, d0 };
                    [r0 setContentOffset:r2];
                    asm{ movz       w3, #0x0 };
                    asm{ ldp        x29, x30, [sp, #0x60] };
                    asm{ ldp        x20, x19, [sp, #0x50] };
                    asm{ ldp        x22, x21, [sp, #0x40] };
                    asm{ ldp        x24, x23, [sp, #0x30] };
                    asm{ ldp        d9, d8, [sp, #0x20] };
                    asm{ ldp        d11, d10, [sp, #0x10] };
                    asm{ ldp        d13, d12, [sp], #0x70 };
                    r0 = [r19 scrollTableToBottomAnimated:0x1 init:r3];
            }
            else {
                    asm{ fadd       d0, d8, d10 };
                    asm{ fcmp       d0, d12 };
                    if (CPU_FLAGS & GE) {
                            asm{ ldp        x29, x30, [sp, #0x60] };
                            asm{ ldp        x20, x19, [sp, #0x50] };
                            asm{ ldp        x22, x21, [sp, #0x40] };
                            asm{ ldp        x24, x23, [sp, #0x30] };
                            asm{ ldp        d9, d8, [sp, #0x20] };
                            asm{ ldp        d11, d10, [sp, #0x10] };
                            asm{ ldp        d13, d12, [sp], #0x70 };
                            return;
                    }
                    else {
                            r0 = *(int32_t *)(r19 + r24);
                            [r0 contentInset];
                            asm{ fsub       d0, d0, d13 };
                            r0 = *(int32_t *)(r19 + r24);
                            asm{ fadd       d1, d11, d0 };
                            [r0 setContentOffset:r2];
                            asm{ movz       w3, #0x0 };
                            asm{ ldp        x29, x30, [sp, #0x60] };
                            asm{ ldp        x20, x19, [sp, #0x50] };
                            asm{ ldp        x22, x21, [sp, #0x40] };
                            asm{ ldp        x24, x23, [sp, #0x30] };
                            asm{ ldp        d9, d8, [sp, #0x20] };
                            asm{ ldp        d11, d10, [sp, #0x10] };
                            asm{ ldp        d13, d12, [sp], #0x70 };
                            r0 = [r19 scrollTableToBottomAnimated:0x1 init:r3];
                    }
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        d9, d8, [sp, #0x20] };
            asm{ ldp        d11, d10, [sp, #0x10] };
            asm{ ldp        d13, d12, [sp], #0x70 };
            r0 = [r19 reloadMessagesInternal];
    }
    return;
}

- (void)reloadMessagesInternal
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x110;
    r19 = self;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffffa8] };
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 removeAllObjects];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = r0;
    [r0 clearLastCreateTime];
    [r21 release];
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = r0;
    [r0 clearDownLeftCount];
    [r21 release];
    asm{ ldrsw      x8, [x8, #0xdf0] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r20 = r0;
    r0 = [r0 GetMessageArray];
    r21 = [r0 retain];
    [r20 release];
    asm{ stp        xzr, xzr, [sp, #0x78] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    r0 = [r21 retain];
    r20 = r0;
    r22 = [r0 countByEnumeratingWithState:0x48 objects:0x88 count:STK-1];
    if (r22 != 0x0) {
            r21 = 0x103950000;
            r28 = **(int32_t *)(r31 + 0x58);
            *(int32_t *)(r31 + 0x10) = *(int32_t *)(r21 + 0xa18);
            r23 = "-[BaseMsgContentViewController reloadMessagesInternal]";
            r24 = "LoadMessageUIOne";
            do {
                    asm{ movz       x21, #0x0 };
                    r25 = @selector(m_uiMessageType);
                    r26 = @selector(addMessageNode:layout:addMoreMsg:);
                    do {
                            if (**(int32_t *)(r31 + 0x58) != r28) {
                                    objc_enumerationMutation(r20);
                            }
                            r27 = *(int32_t *)(*(int32_t *)(r31 + 0x50) + r21 * 0x8);
                            if ([r27 m_uiMessageType] != 0x2e) {
                                    asm{ movz       x3, #0x0 };
                                    sub_100a60a28(0x18);
                                    asm{ movz       w3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    [r19 addMessageNode:r2 layout:r1 addMoreMsg:r8];
                                    sub_100a60a58(0x18);
                                    sub_100a60a98(0x18);
                            }
                            r21 = r21 + 0x1;
                    } while (r21 < r22);
                    r22 = objc_msgSend(r20, *(int32_t *)(r31 + 0x10));
            } while (r22 != 0x0);
    }
    [r20 release];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 reloadData];
    r0 = [r20 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (**(int32_t *)__stack_chk_guard == 0x103950000) {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)onToolViewDidMoveToWindow
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r0 = [DeviceInfo isiOS8plus];
    if (r0 != 0x0) {
            r21 = @selector(navigationController);
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 topViewController];
            r29 = 0x30;
            r22 = [r0 retain];
            if (r22 != r19) {
                    [r22 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldrsw      x8, [x8, #0xdd4] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    r0 = [r0 window];
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = r0;
                    [r0 release];
                    [r22 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = [r19 navigationController];
                            r0 = [r0 retain];
                            r20 = r0;
                            r23 = @selector(interactivePopGestureRecognizer_internal);
                            r0 = [r0 interactivePopGestureRecognizer_internal];
                            r29 = r29;
                            r22 = [r0 retain];
                            if (r22 != 0x0) {
                                    r0 = [r19 navigationController];
                                    r0 = [r0 retain];
                                    r21 = r0;
                                    r0 = [r0 interactivePopGestureRecognizer_internal];
                                    r0 = [r0 retain];
                                    r24 = [r0 state];
                                    [r0 release];
                                    [r21 release];
                                    [r22 release];
                                    r0 = [r20 release];
                                    if (r24 == 0x1) {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            r0 = [r19 trySetInputToolviewFirstResponder];
                                    }
                            }
                            else {
                                    [r22 release];
                                    [r20 release];
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    r0 = [r19 trySetInputToolviewFirstResponder];
                            }
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)shouldHideToolViewOnKeyboardHide
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r21 = @selector(navigationController);
    r0 = [self navigationController];
    r19 = [r0 retain];
    if (r19 != 0x0) {
            r0 = [r20 navigationController];
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 viewControllers];
            r0 = [r0 retain];
            r23 = [r0 containsObject:r20];
            [r0 release];
            [r21 release];
            r0 = [r19 release];
            if ((r23 & 0x1 << 0x0) != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r19 = r20 + 0x1039e8000;
                    r0 = objc_loadWeakRetained(r19);
                    r20 = @selector(shouldHideToolViewWhenKeyboardHide);
                    r22 = [r0 respondsToSelector:r20];
                    [r0 release];
                    if (r22 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = [r0 shouldHideToolViewWhenKeyboardHide];
                            r0 = [r0 release];
                            if ((r20 & 0x1 << 0x0) != 0x0) {
                                    r0 = 0x1;
                            }
                            else {
                                    asm{ movz       w0, #0x0 };
                            }
                    }
                    else {
                            r0 = 0x1;
                    }
            }
            else {
                    asm{ movz       w0, #0x0 };
            }
    }
    else {
            r0 = [r19 release];
            asm{ movz       w0, #0x0 };
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return r0;
}

- (void)keyboardWillHide
{
    r0 = self;
    return;
}

- (void)filterShowMenuItem:(id)arg2 sender:(id)arg3 
{
    r0 = self;
    return;
}

- (void)willShowMenuController:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x24, [x8, #0xdd4] };
    r0 = *(int32_t *)(r20 + r24);
    r21 = @selector(textView);
    r0 = [r0 textView];
    r0 = [r0 retain];
    r23 = [r0 isFirstResponder];
    [r0 release];
    if ((r23 & 0x1 << 0x0) != 0x0) {
            r2 = [UIResponder class];
            if ([r19 isKindOfClass:r2] != 0x0) {
                    r0 = *(int32_t *)(r20 + r24);
                    r0 = [r0 textView];
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 setMenuResponder:r19];
                    [r21 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)TextDidChanged:(id)arg2 selectedRange:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = r4;
    r21 = r3;
    r22 = self;
    r0 = [arg2 retain];
    r19 = r0;
    if ([r0 length] != 0x0) {
            r23 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMConfigMgr class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r25 = [r0 IsShouldSendSignalInScene:@"SendMsg"];
            [r0 release];
            [r23 release];
            if (r25 != 0x0) {
                    sub_1009516ac();
            }
    }
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r22 = r22 + 0x1039e8000;
    r23 = objc_loadWeakRetained(r22);
    if (r23 != 0x0) {
            r0 = objc_loadWeakRetained(r22);
            r24 = @selector(onTextChange:selectedRange:);
            r26 = [r0 respondsToSelector:r24];
            [r0 release];
            [r23 release];
            if (r26 != 0x0) {
                    r0 = objc_loadWeakRetained(r22);
                    r22 = r0;
                    [r0 onTextChange:r2 selectedRange:r1];
                    [r22 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)StartRecording
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    if ([MonoServiceLogic isAudioMonoServiceWorking] != 0x0) {
            r0 = *(int32_t *)(0x1039c3000 + 0x988);
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            r0 = [r0 showMonoServiceWorkingConflict];
    }
    else {
            asm{ movz       w2, #0x0 };
            asm{ movz       w3, #0x0 };
            [r19 scrollTableToBottomAnimated:r2 init:r3];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r19 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(StartRecording);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 StartRecording];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    return;
}

- (void)StopRecording
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(StopRecording);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 StopRecording];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)CancelRecording
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(CancelRecording);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 CancelRecording];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)openMediaBrowser
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    asm{ movz       x2, #0x0 };
    r21 = [r0 CanSendImageMsg:r2];
    r0 = [r0 release];
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onOpenMediaBrowser);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onOpenMediaBrowser];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)openCameraController
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    asm{ movz       x2, #0x0 };
    r21 = [r0 CanSendImageMsg:r2];
    r0 = [r0 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = r0;
            r22 = @selector(CanOpenCamera);
            r20 = @selector(respondsToSelector:);
            if (([r0 respondsToSelector:r2] & 0x1 << 0x0) != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r22 = [r0 CanOpenCamera];
                    [r0 release];
                    r0 = [r21 release];
                    if ((r22 & 0x1 << 0x0) == 0x0) {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
                    else {
                            r0 = objc_loadWeakRetained(r19);
                            r21 = r0;
                            if (r21 != 0x0) {
                                    r0 = objc_loadWeakRetained(r19);
                                    r22 = @selector(onOpenCameraController);
                                    r20 = [r0 respondsToSelector:r2];
                                    [r0 release];
                                    r0 = [r21 release];
                                    if (r20 != 0x0) {
                                            r0 = objc_loadWeakRetained(r19);
                                            r20 = r0;
                                            [r0 onOpenCameraController];
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            r0 = [r20 release];
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    return;
                            }
                    }
            }
            else {
                    [r21 release];
                    r0 = objc_loadWeakRetained(r19);
                    r21 = r0;
                    if (r21 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r22 = @selector(onOpenCameraController);
                            r20 = [r0 respondsToSelector:r2];
                            [r0 release];
                            r0 = [r21 release];
                            if (r20 != 0x0) {
                                    r0 = objc_loadWeakRetained(r19);
                                    r20 = r0;
                                    [r0 onOpenCameraController];
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    r0 = [r20 release];
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    return;
                            }
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)SendEmoticonMesssageToolView:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r22 = r0;
    r23 = @selector(CanSendEmoticonMessage);
    r21 = @selector(respondsToSelector:);
    if (([r0 respondsToSelector:r2] & 0x1 << 0x0) == 0x0) goto loc_101d2536c;
    goto loc_101d252d8;

loc_101d2536c:
    r0 = r22;

loc_101d25370:
    [r0 release];

loc_101d25374:
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;

loc_101d252d8:
    r0 = objc_loadWeakRetained(r20);
    r23 = [r0 CanSendEmoticonMessage];
    [r0 release];
    [r22 release];
    if ((r23 & 0x1 << 0x0) == 0x0) goto loc_101d25374;
    r22 = objc_loadWeakRetained(r20);
    if (r22 == 0x0) goto loc_101d25374;
    r0 = objc_loadWeakRetained(r20);
    r23 = @selector(SendEmoticonMessage:);
    r21 = [r0 respondsToSelector:r23];
    [r0 release];
    [r22 release];
    if (r21 == 0x0) goto loc_101d25374;
    r0 = objc_loadWeakRetained(r20);
    r21 = r0;
    [r0 SendEmoticonMessage:r2];
    r0 = r21;
    goto loc_101d25370;
}

- (void)onShareCard
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(ShareCard);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 ShareCard];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onMultiTalkButtonClick
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x60;
    r22 = @selector(defaultCenter);
    r25 = [[MMServiceCenter defaultCenter] retain];
    *(int32_t *)(r31 + 0x30) = @selector(class);
    [TrackPresentMgr class];
    r21 = @selector(getService:);
    r19 = [[r25 getService:r2] retain];
    r23 = @selector(GetContact);
    r0 = [self GetContact];
    *(int32_t *)(r31 + 0x28) = self;
    r0 = [r0 retain];
    r26 = r0;
    r24 = @selector(m_nsUsrName);
    r0 = [r0 m_nsUsrName];
    r27 = [r0 retain];
    r28 = [r19 isTrackRoomEmpty:r27];
    [r27 release];
    [r26 release];
    [r19 release];
    [r25 release];
    if (r28 == 0x0) goto loc_101d2560c;
    goto loc_101d25598;

loc_101d2560c:
    r26 = [MMUIAlertView alloc];
    r23 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = [r23 getService:r2];
    r0 = [r0 retain];
    r24 = r0;
    r25 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"MultiTalk_Conflict_ShareLocation"] retain];
    r19 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103267000 defaultTo:@"Common_I_Know"];
    r29 = 0x50;
    r27 = [r0 retain];
    asm{ movz       x2, #0x0 };
    asm{ movz       x5, #0x0 };
    *(int32_t *)r31 = 0x0;
    r22 = [r26 initWithTitle:0x103267000 message:r25 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
    [r27 release];
    [r21 release];
    [r19 release];
    [r25 release];
    [r24 release];
    [r23 release];
    asm{ movz       w2, #0x41a4 };
    [r22 setTag:0x103267000];
    [r22 show];

loc_101d259ec:
    r0 = r22;

loc_101d259f0:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r0 release];
    return;

loc_101d25598:
    r19 = 0x1039c3000;
    r25 = [objc_msgSend(*(int32_t *)(r19 + 0x310), r22) retain];
    objc_msgSend(VoipUIManager, *(int32_t *)(r31 + 0x30));
    r20 = r21;
    r0 = objc_msgSend(r25, r20);
    r29 = 0x50;
    r0 = [r0 retain];
    r26 = r0;
    r28 = @selector(isVoipWorking);
    if (([r0 isVoipWorking] & 0x1 << 0x0) == 0x0) goto loc_101d25778;
    goto loc_101d255f8;

loc_101d25778:
    r21 = [objc_msgSend(*(int32_t *)(r19 + 0x310), r22) retain];
    objc_msgSend(MultiTalkMgr, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r21, r20);
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    if (([r0 isMultiTalkActive] & 0x1 << 0x0) == 0x0) goto loc_101d257f4;
    goto loc_101d257cc;

loc_101d257f4:
    r0 = objc_msgSend(MMServiceCenter, r22);
    *(int32_t *)(r31 + 0x20) = r20;
    r20 = [r0 retain];
    objc_msgSend(VoipCSUIManager, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r20, *(int32_t *)(r31 + 0x20));
    r29 = r29;
    r0 = [r0 retain];
    r28 = [r0 isVoipWorking];
    [r0 release];
    [r20 release];
    [r19 release];
    [r21 release];
    [r26 release];
    [r25 release];
    r19 = 0x1039c3000;
    r20 = *(int32_t *)(r31 + 0x20);
    if ((r28 & 0x1 << 0x0) == 0x0) goto loc_101d25a10;
    goto loc_101d25888;

loc_101d25a10:
    r25 = [objc_msgSend(*(int32_t *)(0x1039c3000 + 0x310), r22) retain];
    objc_msgSend(MultiTalkMgr, *(int32_t *)(r31 + 0x30));
    r19 = [objc_msgSend(r25, r20) retain];
    r27 = *(int32_t *)(r31 + 0x28);
    r0 = objc_msgSend(r27, r23);
    r0 = [r0 retain];
    r23 = r0;
    r0 = objc_msgSend(r0, r24);
    r29 = r29;
    r24 = [r0 retain];
    r26 = [r19 isMultiTalkValidWithWxGroupId:r24];
    [r24 release];
    [r23 release];
    [r19 release];
    [r25 release];
    if (r26 == 0x0) goto loc_101d25d90;
    goto loc_101d25ac0;

loc_101d25d90:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = r27 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r21 = r0;
    if (r21 == 0x0) goto loc_101d25e04;
    goto loc_101d25dac;

loc_101d25e04:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;

loc_101d25dac:
    r0 = objc_loadWeakRetained(r19);
    r20 = @selector(onMultiTalkButtonClick);
    r23 = [r0 respondsToSelector:r20];
    [r0 release];
    r0 = [r21 release];
    if (r23 == 0x0) goto loc_101d25e04;
    r0 = objc_loadWeakRetained(r19);
    r19 = r0;
    [r0 onMultiTalkButtonClick];
    r0 = r19;
    goto loc_101d259f0;

loc_101d25ac0:
    if ([DeviceInfo isiOS8plus] == 0x0) goto loc_101d25e24;
    goto loc_101d25ad8;

loc_101d25e24:
    r21 = [objc_msgSend(MMServiceCenter, r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = [r21 onMultiTalkButtonClick];
    r0 = [r0 retain];
    r23 = r0;
    r25 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"MultiTalk_CurrentGroupTalking"] retain];
    r26 = [objc_msgSend(MMServiceCenter, r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = [r26 onMultiTalkButtonClick];
    *(int32_t *)(r31 + 0x18) = r23;
    r0 = [r0 retain];
    r28 = r0;
    r23 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
    r22 = [objc_msgSend(MMServiceCenter, r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = [r22 onMultiTalkButtonClick];
    r20 = r21;
    r0 = [r0 retain];
    r19 = r0;
    r21 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"MultiTalk_JoinMultiTalk_Button_Title"] retain];
    asm{ movz       x3, #0x0 };
    asm{ movz       x6, #0x0 };
    asm{ stp        x5, x8, [sp] };
    r0 = [WCUIAlertView showAlertWithTitle:r25 message:@"MultiTalk_JoinMultiTalk_Button_Title" cancelBtnTitle:STK4 target:STK3 sel:STK2 btnTitle:STK1 target:STK0 sel:STK-1];
    r29 = r29;
    r0 = [r0 retain];
    [r0 release];
    [r21 release];
    [r19 release];
    [r22 release];
    [r23 release];
    [r28 release];
    [r26 release];
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x18);
    [r0 release];
    r0 = r20;
    goto loc_101d259f0;

loc_101d25ad8:
    r24 = [objc_msgSend(MMServiceCenter, r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r24, r20);
    r0 = [r0 retain];
    r26 = r0;
    r27 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"MultiTalk_CurrentGroupTalking"] retain];
    asm{ movz       x3, #0x0 };
    r23 = [[UIAlertController alertControllerWithTitle:r27 message:@"MultiTalk_CurrentGroupTalking" preferredStyle:STK-1] retain];
    [r27 release];
    [r26 release];
    [r24 release];
    r19 = [objc_msgSend(MMServiceCenter, r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r19, r20);
    r0 = [r0 retain];
    r27 = r0;
    r28 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
    asm{ movz       x3, #0x0 };
    r24 = [[UIAlertAction actionWithTitle:r28 style:@"Common_Cancel" handler:STK-1] retain];
    [r28 release];
    [r27 release];
    [r19 release];
    r22 = [objc_msgSend(MMServiceCenter, r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r22, r20);
    r0 = [r0 retain];
    r19 = r0;
    r25 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"MultiTalk_JoinMultiTalk_Button_Title"] retain];
    *(int32_t *)(r31 + 0x38) = *(int32_t *)_NSConcreteStackBlock;
    asm{ movz       w8, #0xc200, lsl #16 };
    asm{ stp        w8, wzr, [sp, #0x40] };
    asm{ nop         };
    *(int32_t *)(r31 + 0x48) = 0x101d262e0;
    *(int32_t *)(r31 + 0x50) = 0x103218850;
    r20 = [*(int32_t *)(r31 + 0x28) retain];
    *(int32_t *)(r31 + 0x58) = r20;
    asm{ movz       x3, #0x0 };
    r0 = [UIAlertAction actionWithTitle:r25 style:@"MultiTalk_JoinMultiTalk_Button_Title" handler:STK-1];
    r29 = r29;
    r21 = [r0 retain];
    [r25 release];
    [r19 release];
    [r22 release];
    [r23 addAction:r24];
    [r23 addAction:r21];
    asm{ movz       x4, #0x0 };
    [r20 presentViewController:r23 animated:0x1 completion:STK-1];
    [r21 release];
    r0 = *(int32_t *)(r31 + 0x58);
    [r0 release];
    [r24 release];
    r0 = [r23 release];
    goto loc_101d25e04;

loc_101d25888:
    r26 = [MMUIAlertView alloc];
    r23 = [objc_msgSend(*(int32_t *)(r19 + 0x310), r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r23, r20);
    r0 = [r0 retain];
    r24 = r0;
    r25 = [[r0 getStringForCurLanguage:0x103318000 defaultTo:@"MultiTalk_Conflict_Wording"] retain];
    r19 = [objc_msgSend(*(int32_t *)(r19 + 0x310), r22) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x30));
    r0 = objc_msgSend(r19, r20);
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103267000 defaultTo:@"Common_I_Know"];
    r29 = r29;
    r27 = [r0 retain];
    asm{ movz       x2, #0x0 };
    asm{ movz       x5, #0x0 };
    *(int32_t *)r31 = 0x0;
    r22 = [r26 initWithTitle:0x103267000 message:r25 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
    [r27 release];
    [r21 release];
    [r19 release];
    [r25 release];
    [r24 release];
    [r23 release];
    asm{ movz       w2, #0x41a4 };
    [r22 setTag:0x103267000];
    [r22 show];
    goto loc_101d259ec;

loc_101d257cc:
    [r19 release];
    [r21 release];
    [r26 release];
    [r25 release];
    r19 = 0x1039c3000;
    goto loc_101d25888;

loc_101d255f8:
    [r26 release];
    [r25 release];
    goto loc_101d25888;
}

- (void)doJoinExistMultiTalk
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r21 = self;
    asm{ ldrsw      x8, [x8, #0xe28] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    if (r0 != 0x0) {
            0x0 = 0x20 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r0 joinCurrentBannerMultiTalk];
    }
    else {
            r19 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MultiTalkMgr class];
            r20 = [[r19 getService:r2] retain];
            r0 = [r21 GetContact];
            r0 = [r0 retain];
            r21 = r0;
            r22 = [[r0 m_nsUsrName] retain];
            [r20 joinMultiTalkWithGroupUserName:r22];
            [r22 release];
            [r21 release];
            [r20 release];
            [r19 release];
            *(int32_t *)r31 = @"MultiTalkMgr: Error! There is no banner exists! Use another method to join!";
            asm{ movz       w6, #0x1392 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            0x0 = 0x20 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    return;
}

- (void)onVoipInvite
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r21 = [r0 CanSendVoipMsg];
    r0 = [r0 release];
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onVoipInvite);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onVoipInvite];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onVideoVoipInvite
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r21 = [r0 CanSendVoipMsg];
    r0 = [r0 release];
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onVideoVoipInvite);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onVideoVoipInvite];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onSelectLocation
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r21 = [r0 CanSendLocationMsg];
    r0 = [r0 release];
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(SelectLocation:);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            asm{ movz       w2, #0x0 };
                            [r0 SelectLocation:r2];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onGroupPayButtonClick
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(onGroupPayButtonClick);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 onGroupPayButtonClick];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)shouldShowOpenTrackRoom
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r20 = [r0 CanOpenTrackRoom];
    [r0 release];
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)onOpenTrackRoom:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x30;
    r20 = self;
    asm{ ldrsw      x28, [x8, #0xe54] };
    *(int32_t *)(r20 + r28) = arg2;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r24 = r20 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r24);
    r19 = r0;
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x28) = [[r0 m_nsUsrName] retain];
    [r0 release];
    [r19 release];
    r23 = @selector(defaultCenter);
    r19 = [[MMServiceCenter defaultCenter] retain];
    r22 = @selector(class);
    [TrackRoomMgr class];
    r21 = @selector(getService:);
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 chatname];
    r29 = 0x50;
    r0 = [r0 retain];
    r27 = [r0 isEqualToString:*(int32_t *)(r31 + 0x28)];
    [r0 release];
    [r25 release];
    [r19 release];
    if ((r27 & 0x1 << 0x0) != 0x0) goto loc_101d26cb8;
    goto loc_101d26a04;

loc_101d26cb8:
    r0 = [SettingUtil getMainSettingExt];
    r29 = r29;
    r0 = [r0 retain];
    r25 = [r0 m_bShowShareLocationTip];
    [r0 release];
    if (r25 == 0x0) goto loc_101d26ef4;
    goto loc_101d26cf4;

loc_101d26ef4:
    r21 = objc_loadWeakRetained(r24);
    if (r21 == 0x0) goto loc_101d270f8;
    goto loc_101d26f04;

loc_101d270f8:
    r0 = *(int32_t *)(r31 + 0x28);
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r0 release];
    return;

loc_101d26f04:
    r0 = objc_loadWeakRetained(r24);
    r19 = @selector(openTrackRoom:);
    r23 = [r0 respondsToSelector:r19];
    [r0 release];
    [r21 release];
    if (r23 == 0x0) goto loc_101d270f8;
    r21 = objc_loadWeakRetained(r24);
    r2 = *(int32_t *)(r20 + r28);
    r0 = [NSNumber numberWithUnsignedInteger:r2];
    r29 = r29;
    r22 = [r0 retain];
    [r21 openTrackRoom:r2];
    [r22 release];

loc_101d26f88:
    r0 = r21;

loc_101d270f4:
    [r0 release];
    goto loc_101d270f8;

loc_101d26cf4:
    r26 = [MMUIAlertView alloc];
    r19 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r24 = r0;
    *(int32_t *)(r31 + 0x10) = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"ShareLocation_First_Share_Tip"] retain];
    r0 = objc_msgSend(MMServiceCenter, r23);
    *(int32_t *)(r31 + 0x18) = r24;
    r27 = [r0 retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r27, r21);
    *(int32_t *)(r31 + 0x20) = r19;
    r0 = [r0 retain];
    r24 = r0;
    r19 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
    r23 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r23, r21);
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Confirm"];
    r29 = r29;
    r28 = [r0 retain];
    asm{ movz       x2, #0x0 };
    *(int32_t *)r31 = 0x0;
    r25 = *(int32_t *)(r31 + 0x10);
    r21 = [r26 initWithTitle:0x10325c000 message:r25 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
    [r28 release];
    [r22 release];
    [r23 release];
    [r19 release];
    [r24 release];
    [r27 release];
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x18);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 release];
    asm{ movz       w2, #0x41a4 };
    [r21 setTag:0x10325c000];
    [r21 show];
    goto loc_101d26f88;

loc_101d26a04:
    r25 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(WXTalkPresentMgr, r22);
    r0 = objc_msgSend(r25, r21);
    r0 = [r0 retain];
    r19 = [r0 isTalkRoomEmpty:*(int32_t *)(r31 + 0x28)];
    [r0 release];
    [r25 release];
    r25 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(WXTalkPresentMgr, r22);
    r0 = objc_msgSend(r25, r21);
    r29 = 0x50;
    r0 = [r0 retain];
    r27 = [r0 isTrackMode:*(int32_t *)(r31 + 0x28)];
    [r0 release];
    [r25 release];
    if (((r19 | r27) & 0x1 << 0x0) == 0x0) goto loc_101d26f90;
    goto loc_101d26ae0;

loc_101d26f90:
    r19 = [MMUIAlertView alloc];
    r24 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r24, r21);
    *(int32_t *)(r31 + 0x20) = r24;
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 getStringForCurLanguage:0x103338000 defaultTo:@"ShareLocation_Alert_Someone_Is_Talking"];
    r24 = r19;
    r27 = [r0 retain];
    r19 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103267000 defaultTo:@"Common_I_Know"];
    r29 = r29;
    r23 = [r0 retain];
    asm{ movz       x2, #0x0 };
    asm{ movz       x5, #0x0 };
    *(int32_t *)r31 = 0x0;
    r22 = [r24 initWithTitle:0x103267000 message:r27 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
    [r23 release];
    [r21 release];
    [r19 release];
    [r27 release];
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 release];
    [r22 show];

loc_101d270f0:
    r0 = r22;
    goto loc_101d270f4;

loc_101d26ae0:
    r19 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MultiTalkMgr, r22);
    r0 = objc_msgSend(r19, r21);
    r29 = r29;
    r0 = [r0 retain];
    r26 = [r0 isMultiTalkValidWithWxGroupId:*(int32_t *)(r31 + 0x28)];
    [r0 release];
    [r19 release];
    if (r26 == 0x0) goto loc_101d26cb8;
    r19 = [MMUIAlertView alloc];
    r24 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r24, r21);
    *(int32_t *)(r31 + 0x20) = r24;
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 getStringForCurLanguage:0x103338000 defaultTo:@"ShareLocation_Alert_Is_MultiTalking"];
    r24 = r19;
    r27 = [r0 retain];
    r19 = [objc_msgSend(MMServiceCenter, r23) retain];
    objc_msgSend(MMLanguageMgr, r22);
    r0 = objc_msgSend(r19, r21);
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103267000 defaultTo:@"Common_I_Know"];
    r29 = r29;
    r23 = [r0 retain];
    asm{ movz       x2, #0x0 };
    asm{ movz       x5, #0x0 };
    *(int32_t *)r31 = 0x0;
    r22 = [r24 initWithTitle:0x103267000 message:r27 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
    [r23 release];
    [r21 release];
    [r19 release];
    [r27 release];
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x20);
    [r0 release];
    [r22 show];
    goto loc_101d270f0;
}

- (id)canShowSight
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = @selector(CanShowSight);
    r22 = [r0 respondsToSelector:r20];
    [r0 release];
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = [r0 CanShowSight];
            [r0 release];
    }
    else {
            asm{ movz       w20, #0x0 };
    }
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (void)openMyFavoritesListController
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r21 = [r0 CanSelectMyFavoritesItemForSendingMsg];
    r0 = [r0 release];
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onOpenMyFavoritesListController);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onOpenMyFavoritesListController];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onOpenMyCardPkgViewController
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(onOpenMyCardPkgViewController);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 onOpenMyCardPkgViewController];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)openServiceAppListController
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r21 = [r0 CanOpenServiceAppList];
    r0 = [r0 release];
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onOpenServiceAppListController);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onOpenServiceAppListController];
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)transferMoneyLogic
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(onTransferMoneyControlLogic);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 onTransferMoneyControlLogic];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)redEnvelopesLogic
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(onRedEnvelopesControlLogic);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 onRedEnvelopesControlLogic];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)openServiceApp:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r22 = [r0 CanOpenServiceAppList];
    [r0 release];
    if (r22 != 0x0) {
            r21 = objc_loadWeakRetained(r20);
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(onOpenServiceApp:);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r21 = r0;
                            [r0 onOpenServiceApp:r2];
                            [r21 release];
                    }
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (id)getAttachmentViewServiceAppList
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r0 = [self GetContact];
    r19 = [r0 retain];
    if (r19 != 0x0) {
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [AppDataMgr class];
            r21 = [[r20 getService:r2] retain];
            r22 = [[r19 m_nsUsrName] retain];
            r0 = [r21 getAttachmentViewServiceAppsList:r22];
            r23 = [r0 retain];
            [r22 release];
            [r21 release];
            [r20 release];
    }
    else {
            asm{ movz       x23, #0x0 };
    }
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r23 autorelease];
    return r0;
}

- (id)getServiceAppList
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r0 = [self GetContact];
    r19 = [r0 retain];
    if (r19 != 0x0) {
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [AppDataMgr class];
            r21 = [[r20 getService:r2] retain];
            r22 = [[r19 m_nsUsrName] retain];
            r0 = [r21 getServiceAppArray:r22];
            r23 = [r0 retain];
            [r22 release];
            [r21 release];
            [r20 release];
    }
    else {
            asm{ movz       x23, #0x0 };
    }
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r23 autorelease];
    return r0;
}

- (id)hasServiceEntry
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x120;
    r25 = *(int32_t *)__stack_chk_guard;
    r25 = *(int32_t *)r25;
    asm{ stur       x25, [x29, #0xffffffa8] };
    r28 = [[self GetContact] retain];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [AppDataMgr class];
    r22 = [[r20 getService:r2] retain];
    r0 = [r28 m_nsUsrName];
    *(int32_t *)(r31 + 0x38) = self;
    asm{ stp        x19, x21, [sp, #0x20] };
    r19 = [r0 retain];
    r8 = 0x103960000;
    *(int32_t *)(r31 + 0x18) = @selector(getServiceAppArray:);
    r0 = [r22 getServiceAppArray:r19];
    r29 = 0x50;
    r21 = [r0 retain];
    [r19 release];
    [r22 release];
    [r20 release];
    asm{ stp        xzr, xzr, [sp, #0x88] };
    asm{ stp        xzr, xzr, [sp, #0x78] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    r0 = [r21 retain];
    r23 = r0;
    r27 = [r0 countByEnumeratingWithState:0x58 objects:0x98 count:STK-1];
    if (r27 != 0x0) {
            asm{ stp        x26, x24, [sp, #0x8] };
            *(int32_t *)(r31 + 0x30) = r28;
            *(int32_t *)(r31 + 0x54) = 0x0;
            r26 = **(int32_t *)(r31 + 0x68);
            *(int32_t *)(r31 + 0x40) = *(int32_t *)(0x103950000 + 0xa18);
            r20 = 0x1039c5000;
            do {
                    r24 = r23;
                    asm{ movz       x25, #0x0 };
                    r21 = @selector(IsWCPayTransferAppServiceInPlane:);
                    asm{ nop         };
                    r22 = @selector(IsWCCardTransferAppServiceInPlane:);
                    r23 = @selector(IsWCRedEnvelopesAppServiceInPlane:);
                    *(int32_t *)(r31 + 0x48) = @selector(IsWCGroupPayAppServiceInPlane:);
                    do {
                            if (**(int32_t *)(r31 + 0x68) != r26) {
                                    objc_enumerationMutation(r24);
                            }
                            r19 = *(int32_t *)(*(int32_t *)(r31 + 0x60) + r25 * 0x8);
                            r0 = *(int32_t *)(0x1039c3000 + 0xab0);
                            if (([r0 IsWCPayTransferAppServiceInPlane:r2] & 0x1 << 0x0) == 0x0) {
                                    r20 = 0x1039c5000;
                                    r0 = *(int32_t *)(r20 + 0x460);
                                    if (([r0 IsWCCardTransferAppServiceInPlane:r2] & 0x1 << 0x0) == 0x0) {
                                            r0 = *(int32_t *)(0x1039c3000 + 0xab0);
                                            if (([r0 IsWCRedEnvelopesAppServiceInPlane:r2] & 0x1 << 0x0) == 0x0) {
                                                    r0 = *(int32_t *)(0x1039c3000 + 0xab0);
                                                    r1 = *(int32_t *)(r31 + 0x48);
                                                    *(int32_t *)(r31 + 0x54) = *(int32_t *)(r31 + 0x54) | objc_msgSend(r0, r1) ^ 0x1;
                                            }
                                    }
                            }
                            r25 = r25 + 0x1;
                    } while (r25 < r27);
                    r23 = r24;
                    r27 = objc_msgSend(r23, *(int32_t *)(r31 + 0x40));
            } while (r27 != 0x0);
            [r23 release];
            r8 = *(int32_t *)(r31 + 0x54);
            if ((r8 & 0x1 << 0x0) != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r19 = *(int32_t *)(r31 + 0x38) + 0x1039e8000;
                    r0 = objc_loadWeakRetained(r19);
                    r22 = r0;
                    r21 = @selector(CanOpenServiceAppList);
                    r8 = 0x103950000;
                    r28 = *(int32_t *)(r31 + 0x30);
                    r0 = [r0 respondsToSelector:r21];
                    r25 = *(int32_t *)__stack_chk_guard;
                    r25 = *(int32_t *)r25;
                    r24 = *(int32_t *)(r31 + 0x10);
                    if (r0 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = [r0 CanOpenServiceAppList] ^ 0x1;
                            [r0 release];
                    }
                    else {
                            asm{ movz       w20, #0x0 };
                    }
                    [r22 release];
                    asm{ movz       w21, #0x0 };
                    if ((r28 != 0x0) && ((r20 & 0x1 << 0x0) == 0x0)) {
                            r21 = *(int32_t *)(r31 + 0x28);
                            r0 = objc_msgSend(r28, r21);
                            r29 = 0x50;
                            r22 = [r0 retain];
                            r8 = 0x103952000;
                            r19 = [PluginUtil isPluginUserName:r22];
                            [r22 release];
                            if ((r19 & 0x1 << 0x0) == 0x0) {
                                    r8 = 0x103968000;
                                    if (([r28 m_isPlugin] & 0x1 << 0x0) == 0x0) {
                                            r8 = 0x103969000;
                                            if (([r28 isBlack] & 0x1 << 0x0) != 0x0) {
                                                    asm{ movz       w21, #0x0 };
                                            }
                                            else {
                                                    r26 = [objc_msgSend(MMServiceCenter, r24) retain];
                                                    objc_msgSend(AppDataMgr, *(int32_t *)(r31 + 0x8));
                                                    r0 = objc_msgSend(r26, *(int32_t *)(r31 + 0x20));
                                                    r20 = r23;
                                                    r22 = [r0 retain];
                                                    r23 = [objc_msgSend(r28, r21) retain];
                                                    r1 = *(int32_t *)(r31 + 0x18);
                                                    r0 = objc_msgSend(r22, r1);
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r8 = 0x103950000;
                                                    asm{ cset       w21, ne };
                                                    [r0 release];
                                                    [r23 release];
                                                    [r22 release];
                                                    [r26 release];
                                                    r23 = r20;
                                            }
                                    }
                                    else {
                                            asm{ movz       w21, #0x0 };
                                    }
                            }
                            else {
                                    asm{ movz       w21, #0x0 };
                            }
                    }
            }
            else {
                    asm{ movz       w21, #0x0 };
                    r28 = *(int32_t *)(r31 + 0x30);
                    r25 = *(int32_t *)__stack_chk_guard;
                    r25 = *(int32_t *)r25;
            }
    }
    else {
            [r23 release];
            asm{ movz       w21, #0x0 };
    }
    [r23 release];
    r0 = [r28 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r25 == r8) {
            r0 = r21;
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;
}

- (id)hasTransferMoneyEntry
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xf0;
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    asm{ stur       x26, [x29, #0xffffffa8] };
    r0 = [self GetContact];
    r29 = 0x50;
    r28 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r20 = r0;
    r22 = @selector(CanOpenServiceAppList);
    r8 = 0x103950000;
    if (([r0 respondsToSelector:r22] & 0x1 << 0x0) == 0x0) goto loc_101d28228;
    goto loc_101d281f4;

loc_101d28228:
    [r20 release];

loc_101d28230:
    r24 = @selector(defaultCenter);
    r20 = [[MMServiceCenter defaultCenter] retain];
    [AppDataMgr class];
    r23 = @selector(getService:);
    r25 = [[r20 getService:r2] retain];
    r26 = [[r28 m_nsUsrName] retain];
    r8 = 0x103960000;
    r0 = [r25 getServiceAppArray:r26];
    *(int32_t *)(r31 + 0x20) = @selector(class);
    r29 = 0x50;
    r27 = [r0 retain];
    [r26 release];
    [r25 release];
    [r20 release];
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    r0 = [r27 retain];
    r20 = r0;
    r21 = 0x103950000;
    r25 = [r0 countByEnumeratingWithState:0x28 objects:0x68 count:STK-1];
    if (r25 == 0x0) goto loc_101d28568;
    goto loc_101d28328;

loc_101d28568:
    [r20 release];
    asm{ movz       w21, #0x0 };

loc_101d28580:
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;

loc_101d2859c:
    [r20 release];

loc_101d285a4:
    r0 = [r28 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r26 == r8) {
            r0 = r21;
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d28328:
    asm{ stp        x23, x19, [sp, #0x8] };
    *(int32_t *)(r31 + 0x18) = r28;
    asm{ movz       w28, #0x0 };
    r19 = **(int32_t *)(r31 + 0x38);
    r26 = *(int32_t *)(0x103950000 + 0xa18);

loc_101d28348:
    r21 = 0x103960000;
    asm{ movz       x23, #0x0 };
    r27 = *(int32_t *)(r21 + 0xaa0);

loc_101d28350:
    if (**(int32_t *)(r31 + 0x38) != r19) {
            objc_enumerationMutation(r20);
    }
    r8 = *(int32_t *)(r31 + 0x30);
    r0 = *(int32_t *)(0x1039c3000 + 0xab0);
    r0 = objc_msgSend(r0, r27);
    r28 = r28 | r0;
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d283b0;
    goto loc_101d28384;

loc_101d283b0:
    [r20 release];
    if ((r28 & 0x1 << 0x0) == 0x0) goto loc_101d28578;
    goto loc_101d283bc;

loc_101d28578:
    asm{ movz       w21, #0x0 };
    r28 = *(int32_t *)(r31 + 0x18);
    goto loc_101d28580;

loc_101d283bc:
    r0 = [MMServiceCenter defaultCenter];
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    r25 = [r0 retain];
    asm{ ldp        x28, x1, [sp, #0x18] };
    [CContactMgr defaultCenter];
    asm{ ldp        x1, x19, [sp, #0x8] };
    r23 = [[r25 defaultCenter] retain];
    r24 = [objc_msgSend(r28, r19) retain];
    r8 = 0x103950000;
    r0 = [r23 getContactByName:r24];
    r29 = r29;
    r22 = [r0 retain];
    [r24 release];
    [r23 release];
    [r25 release];
    if (r22 != 0x0) {
            r21 = r19;
            r8 = 0x103952000;
            if (([r22 isChatroom] & 0x1 << 0x0) == 0x0) {
                    r8 = 0x103952000;
                    if (([r22 isWeixinTeamContact] & 0x1 << 0x0) == 0x0) {
                            r8 = 0x10396a000;
                            if (([PluginUtil isOfficialContact:r22] & 0x1 << 0x0) == 0x0) {
                                    r23 = *(int32_t *)(0x1039c3000 + 0x810);
                                    r0 = objc_msgSend(r22, r21);
                                    r29 = r29;
                                    r24 = [r0 retain];
                                    r8 = 0x103952000;
                                    r21 = [r23 isPluginUserName:r24];
                                    [r24 release];
                                    if ((r21 & 0x1 << 0x0) == 0x0) {
                                            r8 = 0x103952000;
                                            if (([r22 isBrandContact] & 0x1 << 0x0) == 0x0) {
                                                    r8 = 0x103975000;
                                                    if (([r22 isBrandSessionHolder] & 0x1 << 0x0) == 0x0) {
                                                            r8 = 0x103952000;
                                                            if (([r22 isSelf] & 0x1 << 0x0) == 0x0) {
                                                                    r8 = 0x103968000;
                                                                    if (([r22 m_isPlugin] & 0x1 << 0x0) == 0x0) {
                                                                            r8 = 0x10395e000;
                                                                            if ([r22 isMMContact] != 0x0) {
                                                                                    r8 = 0x103969000;
                                                                                    r21 = [r22 isBlack] ^ 0x1;
                                                                            }
                                                                            else {
                                                                                    asm{ movz       w21, #0x0 };
                                                                            }
                                                                    }
                                                                    else {
                                                                            asm{ movz       w21, #0x0 };
                                                                    }
                                                            }
                                                            else {
                                                                    asm{ movz       w21, #0x0 };
                                                            }
                                                    }
                                                    else {
                                                            asm{ movz       w21, #0x0 };
                                                    }
                                            }
                                            else {
                                                    asm{ movz       w21, #0x0 };
                                            }
                                    }
                                    else {
                                            asm{ movz       w21, #0x0 };
                                    }
                            }
                            else {
                                    asm{ movz       w21, #0x0 };
                            }
                    }
                    else {
                            asm{ movz       w21, #0x0 };
                    }
            }
            else {
                    asm{ movz       w21, #0x0 };
            }
    }
    else {
            asm{ movz       w21, #0x0 };
    }
    [r22 release];
    goto loc_101d2859c;

loc_101d28384:
    r23 = r23 + 0x1;
    if (r23 < r25) goto loc_101d28350;
    r25 = objc_msgSend(r20, r26);
    if (r25 != 0x0) goto loc_101d28348;
    goto loc_101d283b0;

loc_101d281f4:
    r0 = objc_loadWeakRetained(r21);
    r21 = objc_msgSend(r0, r22);
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) goto loc_101d28230;
    asm{ movz       w21, #0x0 };
    goto loc_101d285a4;
}

- (id)hasRedEnvelopesEntry
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x100;
    r28 = *(int32_t *)__stack_chk_guard;
    r28 = *(int32_t *)r28;
    asm{ stur       x28, [x29, #0xffffffa8] };
    r19 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    *(int32_t *)r31 = @"check.";
    r20 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
    asm{ movz       w6, #0x148b };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r19);
    r0 = [self GetContact];
    r29 = 0x50;
    r27 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r22 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r22);
    r21 = r0;
    r23 = @selector(CanOpenServiceAppList);
    if (([r0 respondsToSelector:r23] & 0x1 << 0x0) == 0x0) goto loc_101d287ec;
    goto loc_101d2877c;

loc_101d287ec:
    [r21 release];

loc_101d287f4:
    r25 = @selector(defaultCenter);
    r21 = [[MMServiceCenter defaultCenter] retain];
    [AppDataMgr class];
    r24 = @selector(getService:);
    r26 = [[r21 getService:r2] retain];
    r20 = @selector(m_nsUsrName);
    r0 = [r27 m_nsUsrName];
    *(int32_t *)(r31 + 0x30) = r27;
    r27 = [r0 retain];
    r0 = [r26 getServiceAppArray:r27];
    asm{ stp        x22, x19, [sp, #0x20] };
    r29 = 0x50;
    r28 = [r0 retain];
    [r27 release];
    [r26 release];
    [r21 release];
    asm{ stp        xzr, xzr, [sp, #0x68] };
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    r0 = [r28 retain];
    r21 = r0;
    r1 = @selector(countByEnumeratingWithState:objects:count:);
    r26 = [r0 countByEnumeratingWithState:r2 objects:r1 count:r8];
    if (r26 == 0x0) goto loc_101d28a8c;
    goto loc_101d288f0;

loc_101d28a8c:
    [r21 release];
    *(int32_t *)r31 = @"no red envelopes service.";
    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
    asm{ movz       w6, #0x14a0 };
    asm{ ldp        x1, x27, [sp, #0x28] };
    asm{ movz       w4, #0x0 };
    [iConsole countByEnumeratingWithState:r2 objects:r1 count:r8];
    asm{ movz       w20, #0x0 };
    r28 = *(int32_t *)__stack_chk_guard;
    r28 = *(int32_t *)r28;

loc_101d28ed4:
    [r21 release];

loc_101d28edc:
    r0 = [r27 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r28 == r8) {
            r0 = r20;
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d288f0:
    asm{ stp        x24, x20, [sp, #0x10] };
    asm{ movz       w19, #0x0 };
    r20 = **(int32_t *)(r31 + 0x48);
    r27 = *(int32_t *)(0x103950000 + 0xa18);

loc_101d2890c:
    asm{ movz       x24, #0x0 };
    r28 = *(int32_t *)(0x103960000 + 0xaa8);

loc_101d28914:
    if (**(int32_t *)(r31 + 0x48) != r20) {
            objc_enumerationMutation(r21);
    }
    r0 = *(int32_t *)(0x1039c3000 + 0xab0);
    r1 = r28;
    r0 = objc_msgSend(r0, r1);
    r19 = r19 | r0;
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d28974;
    goto loc_101d28948;

loc_101d28974:
    [r21 release];
    if ((r19 & 0x1 << 0x0) != 0x0) {
            r27 = *(int32_t *)(r31 + 0x30);
            r0 = [MMServiceCenter defaultCenter];
            r28 = *(int32_t *)__stack_chk_guard;
            r28 = *(int32_t *)r28;
            r26 = [r0 retain];
            r1 = *(int32_t *)(r31 + 0x20);
            objc_msgSend(CContactMgr, r1);
            asm{ ldp        x1, x20, [sp, #0x10] };
            r24 = [objc_msgSend(r26, r1) retain];
            r25 = [objc_msgSend(r27, r20) retain];
            r0 = [r24 getContactByName:r25];
            r29 = r29;
            r22 = [r0 retain];
            [r25 release];
            [r24 release];
            [r26 release];
            if (r22 != 0x0) {
                    if ([r22 isWeixinTeamContact] != 0x0) {
                            *(int32_t *)r31 = @"current contact is WeChat Team.";
                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                            asm{ movz       w6, #0x14ac };
                            r1 = *(int32_t *)(r31 + 0x28);
                            asm{ movz       w4, #0x0 };
                            objc_msgSend(iConsole, r1);
                            asm{ movz       w20, #0x0 };
                    }
                    else {
                            if ([PluginUtil isOfficialContact:r22] != 0x0) {
                                    *(int32_t *)r31 = @"current contact is Official Contact.";
                                    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                    asm{ movz       w6, #0x14b1 };
                                    r1 = *(int32_t *)(r31 + 0x28);
                                    asm{ movz       w4, #0x0 };
                                    objc_msgSend(iConsole, r1);
                                    asm{ movz       w20, #0x0 };
                            }
                            else {
                                    r24 = *(int32_t *)(0x1039c3000 + 0x810);
                                    r0 = objc_msgSend(r22, r20);
                                    r29 = r29;
                                    r23 = [r0 retain];
                                    r24 = [r24 isPluginUserName:r23];
                                    [r23 release];
                                    if (r24 != 0x0) {
                                            *(int32_t *)r31 = @"current contact is Plugin.";
                                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                            asm{ movz       w6, #0x14b6 };
                                            r1 = *(int32_t *)(r31 + 0x28);
                                            asm{ movz       w4, #0x0 };
                                            objc_msgSend(iConsole, r1);
                                            asm{ movz       w20, #0x0 };
                                    }
                                    else {
                                            if ([r22 isBrandContact] != 0x0) {
                                                    *(int32_t *)r31 = @"current contact is Brand Contact.";
                                                    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                    asm{ movz       w6, #0x14bb };
                                                    r1 = *(int32_t *)(r31 + 0x28);
                                                    asm{ movz       w4, #0x0 };
                                                    objc_msgSend(iConsole, r1);
                                                    asm{ movz       w20, #0x0 };
                                            }
                                            else {
                                                    if ([r22 isBrandSessionHolder] != 0x0) {
                                                            *(int32_t *)r31 = @"current contact is Brand Session Holder.";
                                                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                            asm{ movz       w6, #0x14c0 };
                                                            r1 = *(int32_t *)(r31 + 0x28);
                                                            asm{ movz       w4, #0x0 };
                                                            objc_msgSend(iConsole, r1);
                                                            asm{ movz       w20, #0x0 };
                                                    }
                                                    else {
                                                            if ([r22 isSelf] != 0x0) {
                                                                    *(int32_t *)r31 = @"current contact is self.";
                                                                    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                                    asm{ movz       w6, #0x14c5 };
                                                                    r1 = *(int32_t *)(r31 + 0x28);
                                                                    asm{ movz       w4, #0x0 };
                                                                    objc_msgSend(iConsole, r1);
                                                                    asm{ movz       w20, #0x0 };
                                                            }
                                                            else {
                                                                    if ([r22 m_isPlugin] != 0x0) {
                                                                            *(int32_t *)r31 = @"current contact has Plugin attribute.";
                                                                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                                            asm{ movz       w6, #0x14ca };
                                                                            r1 = *(int32_t *)(r31 + 0x28);
                                                                            asm{ movz       w4, #0x0 };
                                                                            objc_msgSend(iConsole, r1);
                                                                            asm{ movz       w20, #0x0 };
                                                                    }
                                                                    else {
                                                                            if ([r22 isBlack] != 0x0) {
                                                                                    *(int32_t *)r31 = @"current contact is in black list.";
                                                                                    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                                                    asm{ movz       w6, #0x14cf };
                                                                                    r1 = *(int32_t *)(r31 + 0x28);
                                                                                    asm{ movz       w4, #0x0 };
                                                                                    objc_msgSend(iConsole, r1);
                                                                                    asm{ movz       w20, #0x0 };
                                                                            }
                                                                            else {
                                                                                    if ((([r22 isChatroom] & 0x1 << 0x0) != 0x0) || (([r22 isMMContact] & 0x1 << 0x0) != 0x0)) {
                                                                                            *(int32_t *)r31 = @"check clear.";
                                                                                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                                                            asm{ movz       w6, #0x14d8 };
                                                                                            r1 = *(int32_t *)(r31 + 0x28);
                                                                                            asm{ movz       w4, #0x0 };
                                                                                            objc_msgSend(iConsole, r1);
                                                                                            r20 = 0x1;
                                                                                    }
                                                                                    else {
                                                                                            *(int32_t *)r31 = @"current contact is not chat room and is not MMContact.";
                                                                                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                                                                            asm{ movz       w6, #0x14d4 };
                                                                                            r1 = *(int32_t *)(r31 + 0x28);
                                                                                            asm{ movz       w4, #0x0 };
                                                                                            objc_msgSend(iConsole, r1);
                                                                                            asm{ movz       w20, #0x0 };
                                                                                    }
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                    }
                            }
                    }
            }
            else {
                    *(int32_t *)r31 = @"current contact not valid.";
                    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                    asm{ movz       w6, #0x14a7 };
                    r1 = *(int32_t *)(r31 + 0x28);
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(iConsole, r1);
                    asm{ movz       w20, #0x0 };
            }
            [r22 release];
    }
    else {
            *(int32_t *)r31 = @"no red envelopes service.";
            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
            asm{ movz       w6, #0x14a0 };
            asm{ ldp        x1, x27, [sp, #0x28] };
            asm{ movz       w4, #0x0 };
            objc_msgSend(iConsole, r1);
            asm{ movz       w20, #0x0 };
            r28 = *(int32_t *)__stack_chk_guard;
            r28 = *(int32_t *)r28;
    }
    goto loc_101d28ed4;

loc_101d28948:
    r24 = r24 + 0x1;
    if (r24 < r26) goto loc_101d28914;
    r1 = r27;
    r26 = objc_msgSend(r21, r1);
    if (r26 != 0x0) goto loc_101d2890c;
    goto loc_101d28974;

loc_101d2877c:
    r0 = objc_loadWeakRetained(r22);
    r23 = [r0 CanOpenServiceAppList];
    [r0 release];
    [r21 release];
    if ((r23 & 0x1 << 0x0) != 0x0) goto loc_101d287f4;
    r0 = *(int32_t *)(0x1039c3000 + 0x380);
    r8 = @"delegate CanOpenServiceAppList not implemented.";
    *(int32_t *)r31 = r8;
    asm{ movz       w6, #0x1490 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(r0, r19);
    asm{ movz       w20, #0x0 };
    goto loc_101d28edc;
}

- (id)hasGroupPayEntry
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xf0;
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    asm{ stur       x26, [x29, #0xffffffa8] };
    r0 = [self GetContact];
    r29 = 0x50;
    r28 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r20 = r0;
    r22 = @selector(CanOpenServiceAppList);
    r8 = 0x103950000;
    if (([r0 respondsToSelector:r22] & 0x1 << 0x0) == 0x0) goto loc_101d29080;
    goto loc_101d2904c;

loc_101d29080:
    [r20 release];

loc_101d29088:
    r24 = @selector(defaultCenter);
    r20 = [[MMServiceCenter defaultCenter] retain];
    [AppDataMgr class];
    r23 = @selector(getService:);
    r25 = [[r20 getService:r2] retain];
    r26 = [[r28 m_nsUsrName] retain];
    r8 = 0x103960000;
    r0 = [r25 getServiceAppArray:r26];
    *(int32_t *)(r31 + 0x20) = @selector(class);
    r29 = 0x50;
    r27 = [r0 retain];
    [r26 release];
    [r25 release];
    [r20 release];
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    r0 = [r27 retain];
    r20 = r0;
    r21 = 0x103950000;
    r25 = [r0 countByEnumeratingWithState:0x28 objects:0x68 count:STK-1];
    if (r25 == 0x0) goto loc_101d293a4;
    goto loc_101d29180;

loc_101d293a4:
    [r20 release];
    asm{ movz       w21, #0x0 };

loc_101d293bc:
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;

loc_101d293c8:
    [r20 release];

loc_101d293d0:
    r0 = [r28 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r26 == r8) {
            r0 = r21;
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d29180:
    asm{ stp        x23, x19, [sp, #0x8] };
    *(int32_t *)(r31 + 0x18) = r28;
    asm{ movz       w28, #0x0 };
    r19 = **(int32_t *)(r31 + 0x38);
    r26 = *(int32_t *)(0x103950000 + 0xa18);

loc_101d291a0:
    r21 = 0x1039b2000;
    asm{ movz       x23, #0x0 };
    r27 = *(int32_t *)(r21 + 0x870);

loc_101d291a8:
    if (**(int32_t *)(r31 + 0x38) != r19) {
            objc_enumerationMutation(r20);
    }
    r8 = *(int32_t *)(r31 + 0x30);
    r0 = *(int32_t *)(0x1039c3000 + 0xab0);
    r0 = objc_msgSend(r0, r27);
    r28 = r28 | r0;
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d29208;
    goto loc_101d291dc;

loc_101d29208:
    [r20 release];
    if ((r28 & 0x1 << 0x0) == 0x0) goto loc_101d293b4;
    goto loc_101d29214;

loc_101d293b4:
    asm{ movz       w21, #0x0 };
    r28 = *(int32_t *)(r31 + 0x18);
    goto loc_101d293bc;

loc_101d29214:
    r0 = [MMServiceCenter defaultCenter];
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    r25 = [r0 retain];
    asm{ ldp        x28, x1, [sp, #0x18] };
    [CContactMgr defaultCenter];
    asm{ ldp        x1, x19, [sp, #0x8] };
    r23 = [[r25 defaultCenter] retain];
    r24 = [objc_msgSend(r28, r19) retain];
    r8 = 0x103950000;
    r0 = [r23 getContactByName:r24];
    r29 = r29;
    r22 = [r0 retain];
    [r24 release];
    [r23 release];
    [r25 release];
    if (r22 != 0x0) {
            r21 = r19;
            r8 = 0x103952000;
            if (([r22 isChatroom] & 0x1 << 0x0) != 0x0) {
                    r8 = 0x103952000;
                    if (([r22 isWeixinTeamContact] & 0x1 << 0x0) == 0x0) {
                            r8 = 0x10396a000;
                            if (([PluginUtil isOfficialContact:r22] & 0x1 << 0x0) == 0x0) {
                                    r23 = *(int32_t *)(0x1039c3000 + 0x810);
                                    r0 = objc_msgSend(r22, r21);
                                    r29 = r29;
                                    r24 = [r0 retain];
                                    r8 = 0x103952000;
                                    r21 = [r23 isPluginUserName:r24];
                                    [r24 release];
                                    if ((r21 & 0x1 << 0x0) == 0x0) {
                                            r8 = 0x103952000;
                                            if (([r22 isBrandContact] & 0x1 << 0x0) == 0x0) {
                                                    r8 = 0x103975000;
                                                    if (([r22 isBrandSessionHolder] & 0x1 << 0x0) == 0x0) {
                                                            r8 = 0x103952000;
                                                            if (([r22 isSelf] & 0x1 << 0x0) == 0x0) {
                                                                    r8 = 0x103968000;
                                                                    if (([r22 m_isPlugin] & 0x1 << 0x0) != 0x0) {
                                                                            asm{ movz       w21, #0x0 };
                                                                    }
                                                                    else {
                                                                            r8 = 0x103969000;
                                                                            r21 = [r22 isBlack] ^ 0x1;
                                                                    }
                                                            }
                                                            else {
                                                                    asm{ movz       w21, #0x0 };
                                                            }
                                                    }
                                                    else {
                                                            asm{ movz       w21, #0x0 };
                                                    }
                                            }
                                            else {
                                                    asm{ movz       w21, #0x0 };
                                            }
                                    }
                                    else {
                                            asm{ movz       w21, #0x0 };
                                    }
                            }
                            else {
                                    asm{ movz       w21, #0x0 };
                            }
                    }
                    else {
                            asm{ movz       w21, #0x0 };
                    }
            }
            else {
                    asm{ movz       w21, #0x0 };
            }
    }
    else {
            asm{ movz       w21, #0x0 };
    }
    [r22 release];
    goto loc_101d293c8;

loc_101d291dc:
    r23 = r23 + 0x1;
    if (r23 < r25) goto loc_101d291a8;
    r25 = objc_msgSend(r20, r26);
    if (r25 != 0x0) goto loc_101d291a0;
    goto loc_101d29208;

loc_101d2904c:
    r0 = objc_loadWeakRetained(r21);
    r21 = objc_msgSend(r0, r22);
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) goto loc_101d29088;
    asm{ movz       w21, #0x0 };
    goto loc_101d293d0;
}

- (id)hasCardPkgEntry
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xf0;
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    asm{ stur       x26, [x29, #0xffffffa8] };
    r0 = [self GetContact];
    r29 = 0x50;
    r28 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r20 = r0;
    r22 = @selector(CanOpenServiceAppList);
    r8 = 0x103950000;
    if (([r0 respondsToSelector:r22] & 0x1 << 0x0) == 0x0) goto loc_101d295a4;
    goto loc_101d29570;

loc_101d295a4:
    [r20 release];

loc_101d295ac:
    r24 = @selector(defaultCenter);
    r20 = [[MMServiceCenter defaultCenter] retain];
    [AppDataMgr class];
    r23 = @selector(getService:);
    r25 = [[r20 getService:r2] retain];
    r26 = [[r28 m_nsUsrName] retain];
    r8 = 0x103960000;
    r0 = [r25 getServiceAppArray:r26];
    *(int32_t *)(r31 + 0x20) = @selector(class);
    r29 = 0x50;
    r27 = [r0 retain];
    [r26 release];
    [r25 release];
    [r20 release];
    asm{ stp        xzr, xzr, [sp, #0x58] };
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    r0 = [r27 retain];
    r20 = r0;
    r21 = 0x103950000;
    r25 = [r0 countByEnumeratingWithState:0x28 objects:0x68 count:STK-1];
    if (r25 == 0x0) goto loc_101d298b4;
    goto loc_101d296a4;

loc_101d298b4:
    [r20 release];
    asm{ movz       w21, #0x0 };

loc_101d298cc:
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;

loc_101d298d8:
    [r20 release];

loc_101d298e0:
    r0 = [r28 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r26 == r8) {
            r0 = r21;
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return r0;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d296a4:
    asm{ stp        x23, x19, [sp, #0x8] };
    *(int32_t *)(r31 + 0x18) = r28;
    asm{ movz       w28, #0x0 };
    r19 = **(int32_t *)(r31 + 0x38);
    r26 = *(int32_t *)(0x103950000 + 0xa18);

loc_101d296c4:
    r21 = 0x103960000;
    asm{ movz       x23, #0x0 };
    r27 = *(int32_t *)(r21 + 0xab0);

loc_101d296cc:
    if (**(int32_t *)(r31 + 0x38) != r19) {
            objc_enumerationMutation(r20);
    }
    r8 = *(int32_t *)(r31 + 0x30);
    r0 = *(int32_t *)(0x1039c5000 + 0x460);
    r0 = objc_msgSend(r0, r27);
    r28 = r28 | r0;
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d2972c;
    goto loc_101d29700;

loc_101d2972c:
    [r20 release];
    if ((r28 & 0x1 << 0x0) == 0x0) goto loc_101d298c4;
    goto loc_101d29738;

loc_101d298c4:
    asm{ movz       w21, #0x0 };
    r28 = *(int32_t *)(r31 + 0x18);
    goto loc_101d298cc;

loc_101d29738:
    r0 = [MMServiceCenter defaultCenter];
    r26 = *(int32_t *)__stack_chk_guard;
    r26 = *(int32_t *)r26;
    r25 = [r0 retain];
    asm{ ldp        x28, x1, [sp, #0x18] };
    [CContactMgr defaultCenter];
    asm{ ldp        x1, x19, [sp, #0x8] };
    r23 = [[r25 defaultCenter] retain];
    r24 = [objc_msgSend(r28, r19) retain];
    r8 = 0x103950000;
    r0 = [r23 getContactByName:r24];
    r29 = r29;
    r22 = [r0 retain];
    [r24 release];
    [r23 release];
    [r25 release];
    if (r22 != 0x0) {
            r21 = r19;
            r8 = 0x103952000;
            if (([r22 isWeixinTeamContact] & 0x1 << 0x0) == 0x0) {
                    r8 = 0x10396a000;
                    if (([PluginUtil isOfficialContact:r22] & 0x1 << 0x0) == 0x0) {
                            r23 = *(int32_t *)(0x1039c3000 + 0x810);
                            r0 = objc_msgSend(r22, r21);
                            r29 = r29;
                            r24 = [r0 retain];
                            r8 = 0x103952000;
                            r21 = [r23 isPluginUserName:r24];
                            [r24 release];
                            if ((r21 & 0x1 << 0x0) == 0x0) {
                                    r8 = 0x103952000;
                                    if (([r22 isBrandContact] & 0x1 << 0x0) == 0x0) {
                                            r8 = 0x103975000;
                                            if (([r22 isBrandSessionHolder] & 0x1 << 0x0) == 0x0) {
                                                    r8 = 0x103952000;
                                                    if (([r22 isSelf] & 0x1 << 0x0) == 0x0) {
                                                            r8 = 0x103968000;
                                                            if (([r22 m_isPlugin] & 0x1 << 0x0) != 0x0) {
                                                                    asm{ movz       w21, #0x0 };
                                                            }
                                                            else {
                                                                    r8 = 0x103969000;
                                                                    r21 = [r22 isBlack] ^ 0x1;
                                                            }
                                                    }
                                                    else {
                                                            asm{ movz       w21, #0x0 };
                                                    }
                                            }
                                            else {
                                                    asm{ movz       w21, #0x0 };
                                            }
                                    }
                                    else {
                                            asm{ movz       w21, #0x0 };
                                    }
                            }
                            else {
                                    asm{ movz       w21, #0x0 };
                            }
                    }
                    else {
                            asm{ movz       w21, #0x0 };
                    }
            }
            else {
                    asm{ movz       w21, #0x0 };
            }
    }
    else {
            asm{ movz       w21, #0x0 };
    }
    [r22 release];
    goto loc_101d298d8;

loc_101d29700:
    r23 = r23 + 0x1;
    if (r23 < r25) goto loc_101d296cc;
    r25 = objc_msgSend(r20, r26);
    if (r25 != 0x0) goto loc_101d296c4;
    goto loc_101d2972c;

loc_101d29570:
    r0 = objc_loadWeakRetained(r21);
    r21 = objc_msgSend(r0, r22);
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) goto loc_101d295ac;
    asm{ movz       w21, #0x0 };
    goto loc_101d298e0;
}

- (void)onTextDeleteAll
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(onInputTextDeleteAll);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 onInputTextDeleteAll];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)chatUserNameForSightStatistics
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [self GetContact];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_nsUsrName];
    r20 = [r0 retain];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 autorelease];
    return r0;
}

- (void)onShortVideoTaken:(id)arg2 thumbImg:(id)arg3 sentImmediately:(id)arg4 isMuted:(id)arg5 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x20;
    r22 = self;
    r19 = [arg2 retain];
    r23 = [arg3 retain];
    if (r4 != 0x0) {
            r0 = [VideoUploadStatInfo alloc];
            r21 = [r0 init];
            [r21 setSendScene:0x2];
            [r22 sendShortVideoMsg:r19 thumbImg:r23 statInfo:STK-1];
            r0 = r21;
    }
    else {
            r20 = [MMUIAlertView alloc];
            r0 = [MMServiceCenter defaultCenter];
            asm{ stp        x23, x19, [sp, #0x10] };
            r23 = [r0 retain];
            r19 = 0x1039c3000;
            r2 = [MMLanguageMgr class];
            r0 = [r23 getService:r2];
            *(int32_t *)(r31 + 0x8) = r23;
            r0 = [r0 retain];
            r23 = r0;
            r25 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
            r26 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r26 getService:[MMLanguageMgr class]];
            r0 = [r0 retain];
            r27 = r0;
            r0 = [r0 getStringForCurLanguage:0x103285000 defaultTo:@"Common_Send"];
            r29 = 0x50;
            r28 = [r0 retain];
            asm{ movz       x2, #0x0 };
            *(int32_t *)r31 = 0x0;
            r24 = [r20 initWithTitle:0x103285000 message:cfstring__f_T_S______ delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
            [r28 release];
            [r27 release];
            [r26 release];
            [r25 release];
            [r23 release];
            r0 = *(int32_t *)(r31 + 0x8);
            [r0 release];
            asm{ movz       w2, #0x41a5 };
            asm{ ldp        x23, x19, [sp, #0x10] };
            [r24 setTag:0x103285000];
            [r24 attachObject:r19 forKey:@"path"];
            [r24 attachObject:r23 forKey:@"thumb"];
            [r24 show];
            r0 = r24;
    }
    [r0 release];
    [r23 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)onSightPictureTaken:(id)arg2 withFrontCamera:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    *(int32_t *)(r31 + 0x8) = self;
    r28 = [arg2 retain];
    r0 = [ImageInfo alloc];
    r22 = [r0 init];
    asm{ cinc       w2, w8, eq };
    [r22 setM_uiImageSource:r2];
    r0 = [CMessageWrap alloc];
    r21 = [r0 initWithMsgType:0x3];
    asm{ movz       w2, #0x0 };
    r19 = [[SettingUtil getLocalUsrName:0x3] retain];
    [r21 setM_nsFromUsr:r19];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x8);
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    r25 = r0;
    r19 = [[r0 m_nsUsrName] retain];
    [r21 setM_nsToUsr:r19];
    [r19 release];
    [r25 release];
    r0 = [MMServiceCenter defaultCenter];
    *(int32_t *)r31 = r28;
    r28 = [r0 retain];
    r2 = [MMNewSessionMgr class];
    r0 = [r28 getService:r2];
    r0 = [r0 retain];
    r19 = r0;
    r2 = [r0 GenSendMsgTime];
    [r21 setM_uiCreateTime:r2];
    [r19 release];
    [r28 release];
    r28 = *(int32_t *)r31;
    [r21 setM_uiStatus:0x1];
    [CAppUtil isLongOriginImage:r28];
    [r21 setImage:r28 withImageInfo:r22 isLongOriginImage:STK-1];
    r25 = [[MMServiceCenter defaultCenter] retain];
    r26 = [[r25 getService:[CMessageMgr class]] retain];
    r0 = *(int32_t *)(r31 + 0x8);
    r0 = [r0 GetContact];
    r0 = [r0 retain];
    r23 = r0;
    r19 = [[r0 m_nsUsrName] retain];
    [r26 AddMsg:r19 MsgWrap:r21];
    [r19 release];
    [r23 release];
    [r26 release];
    [r25 release];
    [r21 release];
    [r22 release];
    0x0 = 0x50 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r28 release];
    return;
}

- (void)sendShortVideoMsg:(id)arg2 thumbImg:(id)arg3 statInfo:(id)arg4 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x80;
    r24 = self;
    r26 = [arg2 retain];
    r27 = [arg3 retain];
    *(int32_t *)(r31 + 0x48) = [r4 retain];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r28 = @selector(class);
    [SightFacade class];
    r21 = @selector(getService:);
    r20 = [[r19 getService:r2] retain];
    *(int32_t *)(r31 + 0x40) = @selector(GetContact);
    r0 = [r24 GetContact];
    r0 = [r0 retain];
    r22 = r0;
    asm{ cinc       w3, w8, ne };
    [r20 statSent:0x2 target:r3];
    [r22 release];
    [r20 release];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    [SightFacade class];
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r20 = r0;
    [r0 statOper:0x2 operation:r3 targetCount:STK-1];
    [r20 release];
    [r19 release];
    asm{ movi.16b   v0, #0x0 };
    r23 = [UIImageJPEGRepresentation(r27) retain];
    asm{ nop         };
    r0 = [CUtility GetTmpPath];
    *(int32_t *)(r31 + 0x28) = @selector(defaultCenter);
    r19 = [r0 retain];
    asm{ stp        x19, x8, [sp] };
    r22 = [[NSString stringWithFormat:@"%@%s", 0x3, STK-2] retain];
    [r19 release];
    asm{ movz       x4, #0x0 };
    [r23 writeToFile:r22 options:0x1 error:STK-1];
    r19 = @selector(alloc);
    r0 = [CaptureVideoInfo alloc];
    r25 = [r0 init];
    asm{ csel       w20, w0, wzr, gt };
    *(int32_t *)(r31 + 0x30) = r22;
    [r25 setThumb_path:r22];
    [r25 setVideo_path:r26];
    [r25 setVideo_size:NSString];
    [r27 size];
    asm{ fcvtzu     w2, d0 };
    [r25 setThumb_width:NSString];
    [r27 size];
    asm{ fcvtzu     w2, d1 };
    [r25 setThumb_height:NSString];
    asm{ nop         };
    r20 = [[NSURL fileURLWithPath:r26] retain];
    asm{ movz       x3, #0x0 };
    r2 = r20;
    r0 = [AVURLAsset URLAssetWithURL:r2 options:0x1];
    r22 = [r0 retain];
    [r20 release];
    if (r22 != 0x0) {
            [r22 duration];
    }
    else {
            asm{ stp        xzr, xzr, [sp, #0x70] };
            *(int32_t *)(r31 + 0x68) = 0x0;
    }
    *(int32_t *)(r31 + 0x60) = *(int32_t *)(r31 + 0x78);
    asm{ ldur       q0, [sp, #0x68] };
    *(int32_t *)(r31 + 0x50) = q0;
    CMTimeGetSeconds(0x50);
    asm{ fcvt       s0, d0 };
    asm{ fcvtzu     w2, s0 };
    [r25 setVideo_time:r2];
    r2 = 0x1;
    [r25 setM_uiVideoSource:r2];
    r0 = objc_msgSend(r24, *(int32_t *)(r31 + 0x40));
    r29 = 0x50;
    r0 = [r0 retain];
    r20 = r0;
    [r0 release];
    if (r20 != 0x0) {
            r0 = [CMessageWrap alloc];
            asm{ movz       w2, #0x2b };
            *(int32_t *)(r31 + 0x38) = [r0 initWithMsgType:r2];
            asm{ stp        x23, x27, [sp, #0x10] };
            *(int32_t *)(r31 + 0x20) = r26;
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r24 + 0x1039e8000;
            r19 = objc_loadWeakRetained(r20);
            if (r19 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r23 = @selector(genMsgSource);
                    r27 = [r0 respondsToSelector:r23];
                    [r0 release];
                    [r19 release];
                    if (r27 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            r0 = [r0 genMsgSource];
                            r29 = r29;
                            r19 = [r0 retain];
                            r0 = *(int32_t *)(r31 + 0x38);
                            [r0 setM_nsMsgSource:r19];
                            [r19 release];
                            [r20 release];
                    }
            }
            r19 = [[*(int32_t *)(r31 + 0x38) m_nsMsgSource] retain];
            [r25 setM_msgSource:r19];
            [r19 release];
            [r25 setM_forwardType:0x1];
            [r25 setM_statInfo:*(int32_t *)(r31 + 0x48)];
            r27 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x28)) retain];
            [CMessageMgr class];
            r28 = [[r27 getService:r2] retain];
            r23 = *(int32_t *)(r31 + 0x10);
            r0 = [SettingUtil getMainSetting];
            r0 = [r0 retain];
            r21 = r0;
            r20 = [[r0 m_nsUsrName] retain];
            r0 = objc_msgSend(r24, *(int32_t *)(r31 + 0x40));
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 m_nsUsrName];
            r29 = r29;
            r19 = [r0 retain];
            [r28 AddVideoMsg:r20 ToUsr:r19 VideoInfo:STK-1];
            [r19 release];
            [r26 release];
            [r20 release];
            [r21 release];
            [r28 release];
            [r27 release];
            r0 = *(int32_t *)(r31 + 0x38);
            [r0 release];
            asm{ ldp        x27, x26, [sp, #0x18] };
    }
    else {
            *(int32_t *)r31 = @"send Sight to nil contact";
            asm{ movz       w6, #0x159e };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x2 module:"Sight" errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    [r22 release];
    [r25 release];
    r0 = *(int32_t *)(r31 + 0x30);
    [r0 release];
    [r23 release];
    r0 = *(int32_t *)(r31 + 0x48);
    [r0 release];
    [r27 release];
    r0 = [r26 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)sendShortVideoMsgWithAsset:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    0x0 = 0x0 - 0x40;
    r20 = self;
    r19 = [arg2 retain];
    if (r19 != 0x0) {
            *(int32_t *)(r31 + 0x10) = *(int32_t *)_NSConcreteStackBlock;
            asm{ movz       w8, #0xc200, lsl #16 };
            asm{ stp        w8, wzr, [sp, #0x18] };
            asm{ nop         };
            *(int32_t *)(r31 + 0x20) = 0x101d2aba4;
            *(int32_t *)(r31 + 0x28) = 0x103218880;
            *(int32_t *)(r31 + 0x30) = [r20 retain];
            r0 = [r19 retain];
            *(int32_t *)(r31 + 0x38) = r0;
            [r0 asyncGetVideoAssetWithBlock:0x10];
            r0 = *(int32_t *)(r31 + 0x38);
            [r0 release];
            r0 = *(int32_t *)(r31 + 0x30);
            [r0 release];
    }
    else {
            *(int32_t *)r31 = @"Video asset nil.";
            asm{ movz       w6, #0x15b3 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x4 module:"Msg" errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    }
    r0 = [r19 release];
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)updateDeleteCount
{
    r0 = self;
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xe14] };
    r19 = *(int32_t *)(r0 + 0x1039e8000);
    if (r19 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xe20] };
            r0 = *(int32_t *)(r0 + 0x1039e8000);
            r2 = [r0 count];
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            r0 = [r19 updateBtnsWithSelectCount:r2];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            return;
    }
    return;
}

- (void)onEditMessage:(id)arg2 
{
    asm{ stp        d15, d14, [sp, #0xffffff60]! };
    asm{ stp        d13, d12, [sp, #0x10] };
    asm{ stp        d11, d10, [sp, #0x20] };
    asm{ stp        d9, d8, [sp, #0x30] };
    asm{ stp        x28, x27, [sp, #0x40] };
    asm{ stp        x26, x25, [sp, #0x50] };
    asm{ stp        x24, x23, [sp, #0x60] };
    asm{ stp        x22, x21, [sp, #0x70] };
    asm{ stp        x20, x19, [sp, #0x80] };
    asm{ stp        x29, x30, [sp, #0x90] };
    0x0 = 0x0 - 0xb0;
    r20 = self;
    asm{ ldrsw      x21, [x8, #0xe58] };
    r0 = *(int32_t *)(r20 + r21);
    [r0 frame];
    *(int32_t *)(r31 + 0x40) = @selector(view);
    r0 = [r20 view];
    r0 = [r0 retain];
    r19 = r0;
    asm{ movz       w2, #0x1, lsl #16 };
    asm{ movk       w2, #0x568b };
    r0 = [r0 viewWithTag:arg2];
    *(int32_t *)(r31 + 0x20) = d10;
    *(int32_t *)(r31 + 0x28) = r21;
    *(int32_t *)(r31 + 0x50) = [r0 retain];
    [r19 release];
    asm{ ldrsw      x8, [x8, #0xdd4] };
    *(int32_t *)(r31 + 0x60) = 0x1039e8000;
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r0 textView];
    r29 = 0x90;
    r0 = [r0 retain];
    r19 = r0;
    [r0 resignFirstResponder];
    [r19 release];
    asm{ ldrsw      x8, [x8, #0xd74] };
    *(int32_t *)(r31 + 0x58) = 0x1039e8000;
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 contentOffset];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    *(int32_t *)(r31 + 0x30) = 0x1039e8000;
    r2 = *(int32_t *)(r20 + 0x1039e8000);
    [r20 getTableViewVisibleHeightWithOrientation:r2];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x58));
    [r0 contentSize];
    r19 = @selector(checkTips:);
    *(int32_t *)(r31 + 0x68) = 0x0;
    asm{ movz       x23, #0x0 };
    r2 = 0x1;
    [r20 checkTips:r2];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x58));
    *(int32_t *)(r31 + 0x38) = @selector(isEditing);
    *(int32_t *)(r31 + 0x68) = 0x0;
    asm{ movz       x23, #0x0 };
    if (([r0 isEditing] & 0x1 << 0x0) == 0x0) goto loc_101d2b4fc;
    goto loc_101d2b4c4;

loc_101d2b4fc:
    asm{ ldrsw      x8, [x8, #0xe34] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    if (r0 != 0x0) {
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            if (([r0 isHidden] & 0x1 << 0x0) == 0x0) {
                    *(int32_t *)(r31 + 0x68) = 0x0;
                    asm{ movz       x23, #0x0 };
                    [r20 animateHideFirstUnReadButton];
            }
    }
    asm{ ldrsw      x8, [x8, #0xd6c] };
    *(int32_t *)(r31 + 0x48) = r20 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
    r22 = [r0 ShouldShowSearchedAnyMsg];
    *(int32_t *)(r31 + 0x8) = @selector(ShouldShowSearchedAnyMsg);
    [r0 release];
    if ((r22 & 0x1 << 0x0) == 0x0) {
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            asm{ movz       w2, #0x0 };
            [r20 checkTips:r2];
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            [r20 initMsgSearchHelper:0x1];
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            r21 = [objc_msgSend(r20, *(int32_t *)(r31 + 0x40)) retain];
            asm{ ldrsw      x24, [x8, #0xd9c] };
            r0 = *(int32_t *)(r20 + r24);
            r22 = [[r0 searchBar] retain];
            [r21 bringSubviewToFront:r22];
            [r22 release];
            [r21 release];
            r0 = *(int32_t *)(r20 + r24);
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            r0 = [r0 searchBar];
            r0 = [r0 retain];
            r21 = r0;
            asm{ movz       w2, #0x0 };
            [r0 setHidden:r22];
            [r21 release];
            r0 = *(int32_t *)(r20 + r24);
            r0 = [r0 searchBar];
            r29 = 0x90;
            r0 = [r0 retain];
            r19 = r0;
            asm{ movi.16b   v0, #0x0 };
            [r0 setOrigin:r22];
            [r19 release];
    }
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x58));
    *(int32_t *)(r31 + 0x68) = 0x0;
    asm{ movz       x23, #0x0 };
    [r0 setEditing:0x1 animated:0x1];
    r0 = *(int32_t *)(r31 + 0x48);
    r0 = objc_loadWeakRetained(r0);
    *(int32_t *)(r31 + 0x18) = @selector(ShouldShowMultiSelectMode);
    r21 = [r0 ShouldShowMultiSelectMode];
    [r0 release];
    *(int32_t *)(r31 + 0x10) = MMUICommonUtil;
    r0 = MMServiceCenter;
    r22 = @selector(defaultCenter);
    if ((r21 & 0x1 << 0x0) != 0x0) {
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            r21 = [[r0 defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r21 getService:r2];
            r0 = [r0 retain];
            r25 = r0;
            r19 = [[r0 getStringForCurLanguage:0x10327b000 defaultTo:@"Common_Done"] retain];
            r27 = @selector(getBarButtonWithTitle:target:action:style:);
            r0 = *(int32_t *)(r31 + 0x10);
            r23 = [[r0 getBarButtonWithTitle:r2 target:r1 action:r8 style:r9] retain];
            [r19 release];
            [r25 release];
            [r21 release];
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ nop         };
            r19 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r19 getService:[MMLanguageMgr class]];
            r0 = [r0 retain];
            r22 = r0;
            r24 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
            r2 = r24;
            r3 = r20;
            r0 = [MMUICommonUtil getBarButtonWithTitle:r2 target:r1 action:r8 style:r9];
            r29 = r29;
            r21 = [r0 retain];
            [r24 release];
            [r22 release];
            [r19 release];
    }
    else {
            *(int32_t *)(r31 + 0x68) = 0x0;
            asm{ movz       x23, #0x0 };
            r22 = [[r0 defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r23 = r0;
            r24 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
            r0 = *(int32_t *)(r31 + 0x10);
            r2 = r24;
            r3 = r20;
            r0 = [r0 getBarButtonWithTitle:r2 target:r3 action:STK0 style:STK-1];
            r29 = r29;
            r21 = [r0 retain];
            [r24 release];
            [r23 release];
            [r22 release];
            asm{ movz       x23, #0x0 };
    }
    *(int32_t *)(r31 + 0x68) = r21;
    r19 = objc_loadWeakRetained(*(int32_t *)(r31 + 0x48));
    if (r19 != 0x0) {
            r0 = *(int32_t *)(r31 + 0x48);
            r0 = objc_loadWeakRetained(r0);
            r22 = @selector(toBeEditing:);
            r25 = [r0 respondsToSelector:r22];
            [r0 release];
            [r19 release];
            if (r25 != 0x0) {
                    r0 = *(int32_t *)(r31 + 0x48);
                    r0 = objc_loadWeakRetained(r0);
                    r19 = r0;
                    r2 = 0x1;
                    [r0 toBeEditing:r2];
                    [r19 release];
            }
    }
    asm{ ldrsw      x8, [x8, #0xe18] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    asm{ movz       w2, #0x0 };
    [r0 setGestureIsEnable:r2];
    [r20 updateDeleteCount];
    r0 = *(int32_t *)(r31 + 0x48);
    r0 = objc_loadWeakRetained(r0);
    r22 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
    [r0 release];
    if (r22 != 0x0) {
            r27 = *(int32_t *)objc_ivar_offset_BaseMsgContentViewController_m_bToolViewHidden;
    }
    else {
            r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
            r0 = [r0 isHidden];
            asm{ ldrsw      x27, [x8, #0xe5c] };
            *(int8_t *)(r20 + r27) = r0;
            asm{ nop         };
            asm{ ldrsw      x21, [x8, #0xe14] };
            r0 = *(int32_t *)(r20 + r21);
            asm{ movz       w2, #0x0 };
            [r0 setHidden:r2];
            r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
            asm{ movz       w2, #0x0 };
            [r0 setHidden:r2];
            [r20 hideToolViewAnimated:0x1];
            r19 = *(int32_t *)(r20 + r21);
            [r19 origin];
            *(int32_t *)(r31 + 0xa0) = r20;
            *(int32_t *)(r31 + 0xa8) = *(int32_t *)0x1039d3c98;
            [[0xa0 super] getVisibleHeight];
            [r19 setOrigin:0x1];
            r0 = objc_msgSend(r20, *(int32_t *)(r31 + 0x40));
            r29 = r29;
            r0 = [r0 retain];
            r19 = r0;
            r2 = *(int32_t *)(r20 + r21);
            [r0 bringSubviewToFront:r2];
            [r19 release];
    }
    if (*(int8_t *)(r20 + r27) == 0x0) {
            r21 = 0x1039c3000;
            asm{ movz       x2, #0x0 };
            asm{ movz       x3, #0x0 };
            [UIView beginAnimations:r2 context:r3];
            r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
            r2 = [r0 iKeyboardAnimationCurve];
            [UIView setAnimationCurve:r2];
            r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
            [r0 fKeyboardAnimationDuration];
            [UIView setAnimationDuration:r2];
            r2 = 0x1;
            [UIView setAnimationBeginsFromCurrentState:r2];
    }
    r0 = *(int32_t *)(r31 + 0x48);
    r0 = objc_loadWeakRetained(r0);
    r22 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
    [r0 release];
    if (r22 != 0x0) {
            r19 = @selector(origin);
    }
    else {
            asm{ ldrsw      x21, [x8, #0xe14] };
            r22 = *(int32_t *)(r20 + r21);
            r19 = @selector(origin);
            [r22 origin];
            *(int32_t *)(r31 + 0x90) = r20;
            *(int32_t *)(r31 + 0x98) = *(int32_t *)0x1039d3c98;
            [[0x90 super] getVisibleHeight];
            r0 = *(int32_t *)(r20 + r21);
            [r0 height];
            asm{ fsub       d1, d8, d0 };
            [r22 setOrigin:r2];
    }
    r24 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    objc_msgSend(r24, r19);
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    objc_msgSend(r0, r19);
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    r0 = [r0 toolView];
    r29 = r29;
    r0 = [r0 retain];
    r26 = r0;
    [r0 height];
    asm{ fadd       d1, d8, d0 };
    r22 = @selector(setOrigin:);
    [r24 setOrigin:r2];
    [r26 release];
    r0 = *(int32_t *)(r31 + 0x50);
    objc_msgSend(r0, r19);
    r0 = *(int32_t *)(r31 + 0x50);
    objc_msgSend(r0, r19);
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 height];
    asm{ fadd       d1, d15, d0 };
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 setOrigin:r2];
    r0 = *(int32_t *)(r31 + 0x48);
    r0 = objc_loadWeakRetained(r0);
    r24 = objc_msgSend(r0, *(int32_t *)(r31 + 0x8));
    [r0 release];
    if ((r24 & 0x1 << 0x0) == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd9c] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            r0 = [r0 searchBar];
            r29 = r29;
            r19 = [r0 retain];
            [r20 getContentViewY];
            asm{ movi.16b   v0, #0x0 };
            [r19 setOrigin:r2];
            [r19 release];
    }
    asm{ fadd       d14, d14, d0 };
    asm{ sxtw       x8, w27 };
    if (*(int8_t *)(r20 + 0x10300d000) != 0x0) {
            r24 = r23;
    }
    else {
            [UIView commitAnimations];
            r24 = r23;
    }

loc_101d2c1d4:
    r2 = objc_msgSend(*(int32_t *)(r20 + *(int32_t *)(r31 + 0x58)), *(int32_t *)(r31 + 0x38));
    [r20 updateOpBtnState:r2];
    r19 = @selector(defaultCenter);
    r26 = [[MMServiceCenter defaultCenter] retain];
    r22 = @selector(class);
    [MMLanguageMgr class];
    r25 = @selector(getService:);
    r0 = [r26 getService:r2];
    r0 = [r0 retain];
    r27 = r0;
    r3 = @"TabBar_MainFrameTitle";
    r0 = [r0 getStringForCurLanguage:0x103325000 defaultTo:r3];
    r29 = r29;
    r28 = [r0 retain];
    r21 = *(int32_t *)(r31 + 0x68);
    [r21 setAccessibilityLabel:r28];
    [r28 release];
    [r27 release];
    [r26 release];
    r2 = **(int32_t *)UIAccessibilityTraitButton;
    [r21 setAccessibilityTraits:r2];
    if (r24 != 0x0) {
            r19 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMConfigMgr class];
            r0 = [r19 getService:r2];
            r29 = r29;
            r0 = [r0 retain];
            r23 = [r0 shouldShowVoipInChat];
            [r0 release];
            [r19 release];
            if (r23 != 0x0) {
                    r0 = [NSMutableArray array];
                    r0 = [r0 retain];
                    r22 = r0;
                    r19 = @selector(addObject:);
                    [r0 addObject:r2];
                    r0 = [r20 getVoipBarButton];
                    r29 = r29;
                    r23 = [r0 retain];
                    if (r23 != 0x0) {
                            [r22 addObject:r2];
                    }
                    r19 = @selector(navigationItem);
                    r0 = [r20 navigationItem];
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    [r0 setRightBarButtonItems:r22];
                    [r25 release];
                    [r23 release];
            }
            else {
                    r19 = @selector(navigationItem);
                    r0 = [r20 navigationItem];
                    r0 = [r0 retain];
                    r22 = r0;
                    asm{ movz       x2, #0x0 };
                    [r0 setRightBarButtonItems:r2];
                    [r22 release];
                    r0 = [r20 navigationItem];
                    r29 = r29;
                    r0 = [r0 retain];
                    r22 = r0;
                    [r0 setRightBarButtonItem:r24];
            }
    }
    else {
            r19 = @selector(navigationItem);
            asm{ movz       x23, #0x0 };
            r0 = [r20 navigationItem];
            r0 = [r0 retain];
            r22 = r0;
            asm{ movz       x2, #0x0 };
            [r0 setRightBarButtonItems:r2];
            [r22 release];
            asm{ movz       x23, #0x0 };
            r0 = [r20 navigationItem];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            asm{ movz       x2, #0x0 };
            [r0 setRightBarButtonItem:r2];
    }
    [r22 release];
    r0 = [r20 defaultCenter];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    r2 = *(int32_t *)(r31 + 0x68);
    [r0 setLeftBarButtonItem:r2];
    [r19 release];
    asm{ movz       x2, #0x0 };
    [r20 updateTitleView:r2];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    r19 = @selector(fKeyboardAnimationDuration);
    [r0 fKeyboardAnimationDuration];
    r2 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x30));
    [r20 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    asm{ fadd       d0, d11, d12 };
    asm{ frintp     d0, d0 };
    asm{ fcmp       d0, d13 };
    if (CPU_FLAGS & L) {
            r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
            [r0 fKeyboardAnimationDuration];
            asm{ fcmp       d0, #0x0 };
            asm{ cset       w2, gt };
            asm{ movz       w3, #0x0 };
            [r20 scrollTableToBottomAnimated:r2 init:r3];
    }
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x58));
    [r0 reloadData];
    asm{ movz       x2, #0x0 };
    asm{ movz       x3, #0x0 };
    [UIView beginAnimations:r2 context:r3];
    [UIView setAnimationBeginsFromCurrentState:0x1];
    [UIView setAnimationDuration:0x1];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x28));
    [r0 setFrame:0x1];
    [UIView commitAnimations];
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x68);
    [r0 release];
    r0 = [r24 release];
    0x0 = r29 - 0x90;
    asm{ ldp        x29, x30, [sp, #0x90] };
    asm{ ldp        x20, x19, [sp, #0x80] };
    asm{ ldp        x22, x21, [sp, #0x70] };
    asm{ ldp        x24, x23, [sp, #0x60] };
    asm{ ldp        x26, x25, [sp, #0x50] };
    asm{ ldp        x28, x27, [sp, #0x40] };
    asm{ ldp        d9, d8, [sp, #0x30] };
    asm{ ldp        d11, d10, [sp, #0x20] };
    asm{ ldp        d13, d12, [sp, #0x10] };
    asm{ ldp        d15, d14, [sp], #0xa0 };
    return;

loc_101d2b4c4:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r19 = r0;
    r0 = [r0 ShouldShowSearchedAnyMsg];
    *(int32_t *)(r31 + 0x48) = @selector(ShouldShowSearchedAnyMsg);
    if ((r0 & 0x1 << 0x0) == 0x0) goto loc_101d2b87c;
    goto loc_101d2b4f4;

loc_101d2b87c:
    *(int32_t *)(r31 + 0x18) = r21;
    asm{ ldrsw      x21, [x8, #0xd9c] };
    r22 = *(int32_t *)(r20 + r21);
    [r19 release];
    if (r22 == 0x0) goto loc_101d2b8ec;
    goto loc_101d2b898;

loc_101d2b8ec:
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x58));
    *(int32_t *)(r31 + 0x68) = 0x0;
    asm{ movz       x23, #0x0 };
    asm{ movz       w2, #0x0 };
    [r0 setEditing:r2 animated:0x1];
    *(int32_t *)(r31 + 0x68) = 0x0;
    asm{ movz       x23, #0x0 };
    r23 = [[r20 getRightBarButton] retain];
    *(int32_t *)(r31 + 0x68) = 0x0;
    *(int32_t *)(r31 + 0x68) = [[r20 getLeftBarButton] retain];
    asm{ ldrsw      x8, [x8, #0xe18] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 setGestureIsEnable:0x1];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    asm{ ldrsw      x8, [x8, #0xe5c] };
    [r0 setHidden:*(int8_t *)(r20 + 0x1039e8000)];
    asm{ ldrsw      x21, [x8, #0xe14] };
    r24 = *(int32_t *)(r20 + r21);
    [r24 origin];
    *(int32_t *)(r31 + 0x80) = r20;
    *(int32_t *)(r31 + 0x88) = *(int32_t *)0x1039d3c98;
    [[0x80 super] getVisibleHeight];
    r0 = *(int32_t *)(r20 + r21);
    [r0 height];
    asm{ fsub       d1, d8, d0 };
    r27 = @selector(setOrigin:);
    [r24 setOrigin:r2];
    r0 = objc_msgSend(r20, *(int32_t *)(r31 + 0x40));
    r0 = [r0 retain];
    r24 = r0;
    r25 = *(int32_t *)(r31 + 0x60);
    r2 = *(int32_t *)(r20 + r25);
    [r0 bringSubviewToFront:r2];
    [r24 release];
    r25 = *(int32_t *)(r20 + r25);
    [r25 origin];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    r0 = [r0 toolView];
    r0 = [r0 retain];
    r26 = r0;
    [r0 height];
    [r25 setOrigin:r2];
    [r26 release];
    asm{ movz       x2, #0x0 };
    asm{ movz       x3, #0x0 };
    [UIView beginAnimations:r2 context:0x1];
    [UIView setAnimationDidStopSelector:@selector(onHideMultiSelectView)];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    r2 = [r0 iKeyboardAnimationCurve];
    [UIView setAnimationCurve:r2];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    [r0 fKeyboardAnimationDuration];
    [UIView setAnimationDuration:r2];
    [UIView setAnimationBeginsFromCurrentState:0x1];
    r25 = *(int32_t *)(r20 + r21);
    [r25 origin];
    *(int32_t *)(r31 + 0x70) = r20;
    *(int32_t *)(r31 + 0x78) = *(int32_t *)0x1039d3c98;
    [[0x70 super] getVisibleHeight];
    [r25 setOrigin:r2];
    r19 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    [r19 origin];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    [r0 origin];
    r0 = *(int32_t *)(r20 + *(int32_t *)(r31 + 0x60));
    r0 = [r0 toolView];
    r29 = r29;
    r0 = [r0 retain];
    r24 = r0;
    [r0 height];
    asm{ fsub       d1, d8, d0 };
    [r19 setOrigin:r2];
    [r24 release];
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 origin];
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 origin];
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 height];
    asm{ fsub       d1, d15, d0 };
    r0 = *(int32_t *)(r31 + 0x50);
    [r0 setOrigin:r2];
    r0 = *(int32_t *)(r31 + 0x18);
    r0 = objc_loadWeakRetained(r0);
    r19 = r0;
    if ((objc_msgSend(r0, *(int32_t *)(r31 + 0x48)) & 0x1 << 0x0) != 0x0) goto loc_101d2bc88;
    goto loc_101d2bc40;

loc_101d2bc88:
    [r19 release];

loc_101d2bc90:
    r0 = *(int32_t *)(0x1039c3000 + 0x3f0);
    [r0 commitAnimations];
    asm{ ldrsw      x8, [x8, #0xe20] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 removeAllObjects];
    asm{ fadd       d14, d14, d0 };
    r24 = r23;
    goto loc_101d2c1d4;

loc_101d2bc40:
    asm{ ldrsw      x21, [x8, #0xd9c] };
    r22 = *(int32_t *)(r20 + r21);
    [r19 release];
    if (r22 == 0x0) goto loc_101d2bc90;
    r0 = *(int32_t *)(r20 + r21);
    r0 = [r0 searchBar];
    r29 = r29;
    r0 = [r0 retain];
    r19 = r0;
    asm{ movi.16b   v0, #0x0 };
    [r0 setOrigin:r2];
    goto loc_101d2bc88;

loc_101d2b898:
    r0 = *(int32_t *)(r20 + r21);
    *(int32_t *)(r31 + 0x68) = 0x0;
    asm{ movz       x23, #0x0 };
    r0 = [r0 searchBar];
    r29 = 0x90;
    r19 = [r0 retain];
    [r20 getContentViewY];
    asm{ movi.16b   v0, #0x0 };
    [r19 setOrigin:r2];

loc_101d2b8e4:
    [r19 release];
    goto loc_101d2b8ec;

loc_101d2b4f4:
    *(int32_t *)(r31 + 0x18) = r21;
    goto loc_101d2b8e4;
}

- (void)onReturn:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    r0 = [self DismissMyselfAnimated:0x1];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)onFinishMultiSelect:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r19 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r21);
    r22 = r0;
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r20 = @selector(onMultiMsgSelected:Username:);
            r24 = [r0 respondsToSelector:r20];
            [r0 release];
            r0 = [r22 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    asm{ ldrsw      x8, [x8, #0xe20] };
                    r22 = *(int32_t *)(r19 + 0x1039e8000);
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 GetContact];
                    r0 = [r0 retain];
                    r21 = r0;
                    r0 = [r0 m_nsUsrName];
                    r23 = [r0 retain];
                    [r19 onMultiMsgSelected:r2 Username:r1];
                    [r23 release];
                    [r21 release];
                    [r19 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r19 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (void)onHideMultiSelectView
{
    asm{ ldrsw      x8, [x8, #0xe14] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 setHidden:0x1];
    return;
}

- (void)handleAfterDeleteAllMessage
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xdf0] };
    *(int32_t *)(r0 + 0x1039e8000) = 0x0;
    return;
}

- (void)deleteAllMessage
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ movz       w2, #0x0 };
    [self updateOpBtnState:r2];
    [self removeAllObjectsFromMessageNodeDatas];
    asm{ movz       w2, #0x0 };
    asm{ movz       w3, #0x0 };
    [self MoreMsgBtnUpdate:r2 unReadCount:r3];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 reloadData];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    asm{ movz       x2, #0x0 };
    [r0 DelMsgWithMsgList:r2 DelAll:0x1];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)handleDeleteAllMessage
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    [self deleteAllMessage];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [self handleAfterDeleteAllMessage];
    return;
}

- (void)actionSheet:(id)arg2 clickedButtonAtIndex:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x30;
    r21 = arg3;
    r27 = self;
    r19 = [arg2 retain];
    asm{ stp        x8, x21, [sp] };
    asm{ movz       w6, #0x16d5 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    if (r21 == -0x1) goto loc_101d2d170;
    goto loc_101d2cbc0;

loc_101d2d170:
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;

loc_101d2cbc0:
    r23 = @selector(tag);
    if ([r19 tag] == 0x0) goto loc_101d2cc84;
    goto loc_101d2cbd8;

loc_101d2cc84:
    if ([r19 cancelButtonIndex] != r21) {
            [r27 handleDeleteAllMessage];
    }
    goto loc_101d2d170;

loc_101d2cbd8:
    if ([r19 tag] != 0x4) goto loc_101d2ccb0;
    goto loc_101d2cbec;

loc_101d2ccb0:
    if ([r19 tag] != 0x5) goto loc_101d2cf68;
    goto loc_101d2ccc4;

loc_101d2cf68:
    if (([DeviceInfo isiPadUniversal] != 0x0) && ([r19 tag] == 0x6)) goto loc_101d2cf94;
    goto loc_101d2d170;

loc_101d2cf94:
    if ([r19 cancelButtonIndex] == r21) goto loc_101d2d170;
    r22 = [[r19 buttonTitleAtIndex:r21] retain];
    r23 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r23 getService:r2];
    r0 = [r0 retain];
    r20 = r0;
    r3 = @"Webview_shareEmail";
    r0 = [r0 getStringForCurLanguage:0x1032c2000 defaultTo:r3];
    r29 = r29;
    r24 = [r0 retain];
    r2 = r24;
    r25 = [r22 isEqualToString:r2];
    [r24 release];
    [r20 release];
    [r23 release];
    if (r25 != 0x0) {
            asm{ movz       x2, #0x0 };
            [r27 OnMultiEmailMessage:r2];
    }
    else {
            asm{ subs       x20, x21, #0x1 };
            if (CPU_FLAGS & L) {
                    asm{ ldrsw      x21, [x8, #0xe60] };
                    r0 = *(int32_t *)(r27 + r21);
                    if (r20 < [r0 count]) {
                            r0 = *(int32_t *)(r27 + r21);
                            r0 = [r0 objectAtIndexedSubscript:r20];
                            r29 = r29;
                            r21 = [r0 retain];
                            if (r21 != 0x0) {
                                    asm{ ldrsw      x8, [x8, #0xd6c] };
                                    r20 = r27 + 0x1039e8000;
                                    r23 = objc_loadWeakRetained(r20);
                                    if (r23 != 0x0) {
                                            r0 = objc_loadWeakRetained(r20);
                                            r24 = @selector(sendMultiMsgToBrandContact:To:);
                                            r25 = [r0 respondsToSelector:r24];
                                            [r0 release];
                                            [r23 release];
                                            if (r25 != 0x0) {
                                                    r0 = objc_loadWeakRetained(r20);
                                                    r20 = r0;
                                                    asm{ ldrsw      x8, [x8, #0xe20] };
                                                    [r0 sendMultiMsgToBrandContact:r2 To:r1];
                                                    [r20 release];
                                            }
                                    }
                            }
                            [r21 release];
                    }
            }
    }
    r0 = r22;

loc_101d2d16c:
    [r0 release];
    goto loc_101d2d170;

loc_101d2ccc4:
    r0 = [r19 buttonTitleAtIndex:r21];
    *(int32_t *)(r31 + 0x20) = r27;
    r26 = [r0 retain];
    r24 = [[MMServiceCenter defaultCenter] retain];
    [MMLanguageMgr class];
    r27 = @selector(getService:);
    r0 = [r24 getService:r2];
    asm{ stp        x22, x20, [sp, #0x10] };
    r0 = [r0 retain];
    r20 = r0;
    r28 = @selector(getStringForCurLanguage:defaultTo:);
    r0 = [r0 getStringForCurLanguage:r2 defaultTo:r1];
    r29 = 0x50;
    r25 = [r0 retain];
    r22 = @selector(isEqualToString:);
    *(int32_t *)(r31 + 0x28) = r26;
    r26 = [r26 isEqualToString:r2];
    [r25 release];
    [r20 release];
    [r24 release];
    if (r26 == 0x0) goto loc_101d2ce38;
    goto loc_101d2cdb0;

loc_101d2ce38:
    r1 = *(int32_t *)(r31 + 0x18);
    r26 = *(int32_t *)(r31 + 0x28);
    r24 = [objc_msgSend(MMServiceCenter, r1) retain];
    objc_msgSend(MMLanguageMgr, *(int32_t *)(r31 + 0x10));
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 getStringForCurLanguage:r2 defaultTo:r1];
    r29 = r29;
    r25 = [r0 retain];
    r22 = [r26 isEqualToString:r2];
    r27 = *(int32_t *)(r31 + 0x20);
    [r25 release];
    [r20 release];
    [r24 release];
    if (r22 == 0x0) goto loc_101d2cf60;
    goto loc_101d2ced8;

loc_101d2cf60:
    [r26 release];
    goto loc_101d2cf68;

loc_101d2ced8:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r27 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 == 0x0) goto loc_101d2cf58;
    goto loc_101d2cef4;

loc_101d2cf58:
    r0 = r26;
    goto loc_101d2d16c;

loc_101d2cef4:
    r0 = objc_loadWeakRetained(r20);
    r22 = @selector(sendMultiMsgBySystemMail:);
    r24 = [r0 respondsToSelector:r22];
    [r0 release];
    [r21 release];
    if (r24 == 0x0) goto loc_101d2cf58;
    r0 = objc_loadWeakRetained(r20);
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xe20] };
    [r0 sendMultiMsgBySystemMail:r2];

loc_101d2cf50:
    [r20 release];
    goto loc_101d2cf58;

loc_101d2cdb0:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r25 = *(int32_t *)(r31 + 0x20);
    r20 = r25 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    r26 = *(int32_t *)(r31 + 0x28);
    if (r21 == 0x0) goto loc_101d2cf58;
    r0 = objc_loadWeakRetained(r20);
    r22 = @selector(sendMultiMsgByMail:);
    r24 = [r0 respondsToSelector:r22];
    [r0 release];
    [r21 release];
    if (r24 == 0x0) goto loc_101d2cf58;
    r0 = objc_loadWeakRetained(r20);
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xe20] };
    [r0 sendMultiMsgByMail:r2];
    goto loc_101d2cf50;

loc_101d2cbec:
    if ([r19 cancelButtonIndex] == r21) goto loc_101d2d170;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r27 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 == 0x0) goto loc_101d2d170;
    r0 = objc_loadWeakRetained(r20);
    r22 = @selector(onMultiMsgDelete:);
    r24 = [r0 respondsToSelector:r22];
    [r0 release];
    [r21 release];
    if (r24 == 0x0) goto loc_101d2d170;
    r0 = objc_loadWeakRetained(r20);
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xe20] };
    [r0 onMultiMsgDelete:r2];
    r0 = r20;
    goto loc_101d2d16c;
}

- (void)onDeleteMessage:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r19 = [WCActionSheet alloc];
    r21 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r21 getService:r2];
    *(int32_t *)(r31 + 0x8) = r21;
    r0 = [r0 retain];
    r21 = r0;
    r23 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
    r24 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r24 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r25 = r0;
    r26 = [[r0 getStringForCurLanguage:0x1032f2000 defaultTo:@"MessageContent_ClearAllMessage"] retain];
    asm{ movz       x2, #0x0 };
    *(int32_t *)r31 = 0x0;
    asm{ movz       x6, #0x0 };
    r22 = [r19 initWithTitle:0x1032f2000 delegate:self cancelButtonTitle:STK1 destructiveButtonTitle:STK0 otherButtonTitles:STK-1];
    [r26 release];
    [r25 release];
    [r24 release];
    [r23 release];
    [r21 release];
    r0 = *(int32_t *)(r31 + 0x8);
    [r0 release];
    asm{ movz       x2, #0x0 };
    [r22 setTag:0x1032f2000];
    r19 = [[self view] retain];
    [r22 showInView:r19];
    [r19 release];
    0x0 = 0x50 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r22 release];
    return;
}

- (void)updateMessageNodeStatus:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r0 = [arg2 retain];
    r28 = r0;
    *(int32_t *)(r31 + 0x18) = @selector(m_uiMesLocalID);
    r2 = [r0 m_uiMesLocalID];
    r0 = [self findNodeDataByLocalId:r2];
    r29 = 0x50;
    r27 = [r0 retain];
    if (r27 != 0x0) {
            r8 = 0x103951000;
            r22 = @selector(m_uiMessageType);
            if ([r28 m_uiMessageType] == 0x31) {
                    r8 = 0x103951000;
                    if ([r28 m_uiAppMsgInnerType] == 0x7d1) {
                            r0 = [r28 m_oWCPayInfoItem];
                            r29 = 0x50;
                            r0 = [r0 retain];
                            r8 = 0x103950000;
                            r20 = [r0 m_sceneId];
                            [r0 release];
                            if (r20 == 0x3e9) {
                                    r20 = [[r27 messageWrap] retain];
                                    r0 = [r28 m_nsContent];
                                    r29 = r29;
                                    r19 = [r0 retain];
                                    r8 = 0x103952000;
                                    [r20 setM_nsContent:r19];
                                    [r19 release];
                                    [r20 release];
                            }
                    }
            }
            r0 = [r28 m_uiMessageType];
            asm{ movz       w8, #0x2712 };
            if (r0 == r8) {
                    r0 = [r28 m_newXmlType];
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = [r0 isEqualToString:@"paymsg"];
                    [r0 release];
                    if (r20 != 0x0) {
                            r23 = [[r27 messageWrap] retain];
                            r19 = [[r28 m_nsContent] retain];
                            [r23 setM_nsContent:r19];
                            [r19 release];
                            [r23 release];
                            r0 = [r27 messageWrap];
                            r0 = [r0 retain];
                            r19 = r0;
                            [r0 ChangeForDisplayAnyhow];
                            [r19 release];
                            r0 = [r27 messageWrap];
                            r29 = r29;
                            r0 = [r0 retain];
                            r19 = r0;
                            [r0 setM_bNeedReloadSubView:0x1];
                            [r19 release];
                    }
            }
            if (([r28 m_uiMessageType] == 0x31) && ([r28 m_uiAppMsgInnerType] == 0x7d0)) {
                    r20 = [[r27 messageWrap] retain];
                    r0 = [r28 m_nsContent];
                    r29 = r29;
                    r19 = [r0 retain];
                    [r20 setM_nsContent:r19];
                    [r19 release];
                    [r20 release];
            }
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiStatus];
            [r20 setM_uiStatus:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiPercent];
            [r20 setM_uiPercent:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiCreateTime];
            [r20 setM_uiCreateTime:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_n64MesSvrID];
            [r20 setM_n64MesSvrID:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiDownloadStatus];
            [r20 setM_uiDownloadStatus:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiVoiceTime];
            [r20 setM_uiVoiceTime:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiVideoOffset];
            [r20 setM_uiVideoOffset:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiVideoLen];
            [r20 setM_uiVideoLen:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiUploadStatus];
            [r20 setM_uiUploadStatus:r2];
            [r20 release];
            r20 = [[r27 messageWrap] retain];
            r2 = [r28 m_uiVoipStatus];
            [r20 setM_uiVoipStatus:r2];
            [r20 release];
            r0 = [MMServiceCenter defaultCenter];
            *(int32_t *)(r31 + 0x8) = r27;
            r22 = [r0 retain];
            r2 = [LazyExtensionAgent class];
            r20 = [[r22 getService:r2] retain];
            r27 = @protocol(IMessageNodeStatusExt);
            *(int32_t *)(r31 + 0x10) = r28;
            objc_msgSend(r28, *(int32_t *)(r31 + 0x18));
            r23 = @selector(numberWithUnsignedInt:);
            r0 = [NSNumber numberWithUnsignedInt:r2];
            r28 = @selector(onMessageUpdateStatus);
            r19 = [r0 retain];
            [r20 ensureLazyListenerInitedForExtension:r27 withSelector:r28 forKey:STK-1];
            [r19 release];
            [r20 release];
            [r22 release];
            asm{ ldp        x27, x28, [sp, #0x8] };
            r20 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r20 getService:[MMExtensionCenter class]];
            r0 = [r0 retain];
            r19 = r0;
            r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
            r29 = r29;
            r21 = [r0 retain];
            [r19 release];
            [r20 release];
            if (r21 != 0x0) {
                    objc_msgSend(r28, *(int32_t *)(r31 + 0x18));
                    r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
                    r8 = 0x103953000;
                    *(int32_t *)(r31 + 0x18) = r21;
                    r0 = [r21 getKeyExtensionList:r19];
                    r29 = r29;
                    r21 = [r0 retain];
                    [r19 release];
                    asm{ movz       w8, #0x0 };
                    r23 = @selector(count);
                    asm{ nop         };
                    r24 = @selector(objectAtIndex:);
                    r25 = @selector(m_deleteMark);
                    asm{ nop         };
                    r26 = @selector(getObject);
                    r27 = @selector(onMessageUpdateStatus);
                    r28 = @selector(respondsToSelector:);
                    do {
                            r20 = r8;
                            if (r20 >= [r21 count]) {
                                break;
                            }
                            r0 = [r21 objectAtIndex:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r22 = r0;
                            if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                    r0 = [r22 getObject];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r19 = r0;
                                    if ([r0 respondsToSelector:r2] != 0x0) {
                                            [r19 onMessageUpdateStatus];
                                    }
                                    [r19 release];
                            }
                            [r22 release];
                            r8 = r20 + 0x1;
                    } while (true);
                    [r21 release];
                    asm{ ldp        x27, x28, [sp, #0x8] };
                    r21 = *(int32_t *)(r31 + 0x18);
            }
            [r21 release];
    }
    [r27 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r28 release];
    return;
}

- (id)GetContact
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r20 = objc_loadWeakRetained(r19);
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(GetContact);
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r19 = r0;
                    r0 = [r0 GetContact];
                    r20 = [r0 retain];
                    [r19 release];
            }
            else {
                    asm{ movz       x20, #0x0 };
            }
    }
    else {
            asm{ movz       x20, #0x0 };
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 autorelease];
    return r0;
}

- (void)SetVoiceEnabled:(id)arg2 
{
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 setVoiceEnabled:arg2];
    return;
}

- (void)fixInputToolViewKeyboard
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 ShouldShowSearchBar];
    r0 = [r0 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = [r19 trySetInputToolviewFirstResponder];
    }
    return;
}

- (void)trySetInputToolviewFirstResponder
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    asm{ ldrsw      x24, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + r24);
    r22 = @selector(inputMode);
    if ([r0 inputMode] != 0x1) {
            r0 = *(int32_t *)(r19 + r24);
            r0 = [r0 inputMode];
            if (r0 == 0x3) {
                    r0 = *(int32_t *)(r19 + r24);
                    r20 = @selector(positionMode);
                    if ([r0 positionMode] != 0x2) {
                            asm{ ldrsw      x8, [x8, #0xe64] };
                            if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
                                    r0 = [DeviceInfo isiPad];
                                    if (r0 != 0x0) {
                                            r0 = *(int32_t *)(r19 + r24);
                                            r0 = [r0 tryDetectExtenalKeyboard];
                                            if (r0 != 0x0) {
                                                    r0 = *(int32_t *)(r19 + r24);
                                                    r21 = @selector(contentMode);
                                                    r0 = [r0 contentMode];
                                                    if (r0 == 0x1) {
                                                            asm{ ldrsw      x8, [x8, #0xe64] };
                                                            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                                                            r23 = *(int32_t *)(r19 + r24);
                                                            r2 = [r23 inputMode];
                                                            asm{ movz       w3, #0x0 };
                                                            [r23 setInputMode:r2 animated:r3];
                                                            r8 = [*(int32_t *)(r19 + r24) positionMode];
                                                            if (r8 == 0x2) {
                                                                    r0 = *(int32_t *)(r19 + r24);
                                                                    r0 = [r0 textView];
                                                                    r0 = [r0 retain];
                                                                    r23 = [r0 isExtenalKeyboardAttatched];
                                                                    [r0 release];
                                                                    r8 = 0x1;
                                                                    asm{ cinc       w8, w8, eq };
                                                            }
                                                            r0 = *(int32_t *)(r19 + r24);
                                                            asm{ movz       w3, #0x0 };
                                                            [r0 setPoisitionMode:r8 animated:r3];
                                                            r0 = *(int32_t *)(r19 + r24);
                                                            [r0 becomeFirstResponder];
                                                            r22 = *(int32_t *)(r19 + r24);
                                                            r2 = [r22 contentMode];
                                                            asm{ movz       w3, #0x0 };
                                                            [r22 setContentMode:r2 animated:r3];
                                                            r0 = *(int32_t *)(r19 + r24);
                                                            r0 = [r0 positionMode];
                                                            if (r0 == 0x2) {
                                                                    asm{ movz       w2, #0x0 };
                                                                    asm{ movz       w3, #0x0 };
                                                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                                                    r0 = [r19 scrollTableToBottomAnimated:r2 init:r3];
                                                            }
                                                            else {
                                                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                                                    return;
                                                            }
                                                    }
                                                    else {
                                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                                            return;
                                                    }
                                            }
                                            else {
                                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                                    return;
                                            }
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                            }
                            else {
                                    r0 = *(int32_t *)(r19 + r24);
                                    r21 = @selector(contentMode);
                                    r0 = [r0 contentMode];
                                    if (r0 == 0x1) {
                                            asm{ ldrsw      x8, [x8, #0xe64] };
                                            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                                            r23 = *(int32_t *)(r19 + r24);
                                            r2 = [r23 inputMode];
                                            asm{ movz       w3, #0x0 };
                                            [r23 setInputMode:r2 animated:r3];
                                            r8 = [*(int32_t *)(r19 + r24) positionMode];
                                            if (r8 == 0x2) {
                                                    r0 = *(int32_t *)(r19 + r24);
                                                    r0 = [r0 textView];
                                                    r0 = [r0 retain];
                                                    r23 = [r0 isExtenalKeyboardAttatched];
                                                    [r0 release];
                                                    r8 = 0x1;
                                                    asm{ cinc       w8, w8, eq };
                                            }
                                            r0 = *(int32_t *)(r19 + r24);
                                            asm{ movz       w3, #0x0 };
                                            [r0 setPoisitionMode:r8 animated:r3];
                                            r0 = *(int32_t *)(r19 + r24);
                                            [r0 becomeFirstResponder];
                                            r22 = *(int32_t *)(r19 + r24);
                                            r2 = [r22 contentMode];
                                            asm{ movz       w3, #0x0 };
                                            [r22 setContentMode:r2 animated:r3];
                                            r0 = *(int32_t *)(r19 + r24);
                                            r0 = [r0 positionMode];
                                            if (r0 == 0x2) {
                                                    asm{ movz       w2, #0x0 };
                                                    asm{ movz       w3, #0x0 };
                                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                                    r0 = [r19 scrollTableToBottomAnimated:r2 init:r3];
                                            }
                                            else {
                                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                                    return;
                                            }
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                            }
                    }
                    else {
                            r0 = *(int32_t *)(r19 + r24);
                            r21 = @selector(contentMode);
                            r0 = [r0 contentMode];
                            if (r0 == 0x1) {
                                    asm{ ldrsw      x8, [x8, #0xe64] };
                                    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                                    r23 = *(int32_t *)(r19 + r24);
                                    r2 = [r23 inputMode];
                                    asm{ movz       w3, #0x0 };
                                    [r23 setInputMode:r2 animated:r3];
                                    r8 = [*(int32_t *)(r19 + r24) positionMode];
                                    if (r8 == 0x2) {
                                            r0 = *(int32_t *)(r19 + r24);
                                            r0 = [r0 textView];
                                            r0 = [r0 retain];
                                            r23 = [r0 isExtenalKeyboardAttatched];
                                            [r0 release];
                                            r8 = 0x1;
                                            asm{ cinc       w8, w8, eq };
                                    }
                                    r0 = *(int32_t *)(r19 + r24);
                                    asm{ movz       w3, #0x0 };
                                    [r0 setPoisitionMode:r8 animated:r3];
                                    r0 = *(int32_t *)(r19 + r24);
                                    [r0 becomeFirstResponder];
                                    r22 = *(int32_t *)(r19 + r24);
                                    r2 = [r22 contentMode];
                                    asm{ movz       w3, #0x0 };
                                    [r22 setContentMode:r2 animated:r3];
                                    r0 = *(int32_t *)(r19 + r24);
                                    r0 = [r0 positionMode];
                                    if (r0 == 0x2) {
                                            asm{ movz       w2, #0x0 };
                                            asm{ movz       w3, #0x0 };
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            r0 = [r19 scrollTableToBottomAnimated:r2 init:r3];
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    return;
                            }
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            r0 = *(int32_t *)(r19 + r24);
            r20 = @selector(positionMode);
            if ([r0 positionMode] != 0x2) {
                    asm{ ldrsw      x8, [x8, #0xe64] };
                    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
                            r0 = [DeviceInfo isiPad];
                            if (r0 != 0x0) {
                                    r0 = *(int32_t *)(r19 + r24);
                                    r0 = [r0 tryDetectExtenalKeyboard];
                                    if (r0 != 0x0) {
                                            r0 = *(int32_t *)(r19 + r24);
                                            r21 = @selector(contentMode);
                                            r0 = [r0 contentMode];
                                            if (r0 == 0x1) {
                                                    asm{ ldrsw      x8, [x8, #0xe64] };
                                                    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                                                    r23 = *(int32_t *)(r19 + r24);
                                                    r2 = [r23 inputMode];
                                                    asm{ movz       w3, #0x0 };
                                                    [r23 setInputMode:r2 animated:r3];
                                                    r8 = [*(int32_t *)(r19 + r24) positionMode];
                                                    if (r8 == 0x2) {
                                                            r0 = *(int32_t *)(r19 + r24);
                                                            r0 = [r0 textView];
                                                            r0 = [r0 retain];
                                                            r23 = [r0 isExtenalKeyboardAttatched];
                                                            [r0 release];
                                                            r8 = 0x1;
                                                            asm{ cinc       w8, w8, eq };
                                                    }
                                                    r0 = *(int32_t *)(r19 + r24);
                                                    asm{ movz       w3, #0x0 };
                                                    [r0 setPoisitionMode:r8 animated:r3];
                                                    r0 = *(int32_t *)(r19 + r24);
                                                    [r0 becomeFirstResponder];
                                                    r22 = *(int32_t *)(r19 + r24);
                                                    r2 = [r22 contentMode];
                                                    asm{ movz       w3, #0x0 };
                                                    [r22 setContentMode:r2 animated:r3];
                                                    r0 = *(int32_t *)(r19 + r24);
                                                    r0 = [r0 positionMode];
                                                    if (r0 == 0x2) {
                                                            asm{ movz       w2, #0x0 };
                                                            asm{ movz       w3, #0x0 };
                                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                                            r0 = [r19 scrollTableToBottomAnimated:r2 init:r3];
                                                    }
                                                    else {
                                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                                            return;
                                                    }
                                            }
                                            else {
                                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                                    return;
                                            }
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    return;
                            }
                    }
                    else {
                            r0 = *(int32_t *)(r19 + r24);
                            r21 = @selector(contentMode);
                            r0 = [r0 contentMode];
                            if (r0 == 0x1) {
                                    asm{ ldrsw      x8, [x8, #0xe64] };
                                    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                                    r23 = *(int32_t *)(r19 + r24);
                                    r2 = [r23 inputMode];
                                    asm{ movz       w3, #0x0 };
                                    [r23 setInputMode:r2 animated:r3];
                                    r8 = [*(int32_t *)(r19 + r24) positionMode];
                                    if (r8 == 0x2) {
                                            r0 = *(int32_t *)(r19 + r24);
                                            r0 = [r0 textView];
                                            r0 = [r0 retain];
                                            r23 = [r0 isExtenalKeyboardAttatched];
                                            [r0 release];
                                            r8 = 0x1;
                                            asm{ cinc       w8, w8, eq };
                                    }
                                    r0 = *(int32_t *)(r19 + r24);
                                    asm{ movz       w3, #0x0 };
                                    [r0 setPoisitionMode:r8 animated:r3];
                                    r0 = *(int32_t *)(r19 + r24);
                                    [r0 becomeFirstResponder];
                                    r22 = *(int32_t *)(r19 + r24);
                                    r2 = [r22 contentMode];
                                    asm{ movz       w3, #0x0 };
                                    [r22 setContentMode:r2 animated:r3];
                                    r0 = *(int32_t *)(r19 + r24);
                                    r0 = [r0 positionMode];
                                    if (r0 == 0x2) {
                                            asm{ movz       w2, #0x0 };
                                            asm{ movz       w3, #0x0 };
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            r0 = [r19 scrollTableToBottomAnimated:r2 init:r3];
                                    }
                                    else {
                                            asm{ ldp        x29, x30, [sp, #0x30] };
                                            asm{ ldp        x20, x19, [sp, #0x20] };
                                            asm{ ldp        x22, x21, [sp, #0x10] };
                                            asm{ ldp        x24, x23, [sp], #0x40 };
                                            return;
                                    }
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    return;
                            }
                    }
            }
            else {
                    r0 = *(int32_t *)(r19 + r24);
                    r21 = @selector(contentMode);
                    r0 = [r0 contentMode];
                    if (r0 == 0x1) {
                            asm{ ldrsw      x8, [x8, #0xe64] };
                            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                            r23 = *(int32_t *)(r19 + r24);
                            r2 = [r23 inputMode];
                            asm{ movz       w3, #0x0 };
                            [r23 setInputMode:r2 animated:r3];
                            r8 = [*(int32_t *)(r19 + r24) positionMode];
                            if (r8 == 0x2) {
                                    r0 = *(int32_t *)(r19 + r24);
                                    r0 = [r0 textView];
                                    r0 = [r0 retain];
                                    r23 = [r0 isExtenalKeyboardAttatched];
                                    [r0 release];
                                    r8 = 0x1;
                                    asm{ cinc       w8, w8, eq };
                            }
                            r0 = *(int32_t *)(r19 + r24);
                            asm{ movz       w3, #0x0 };
                            [r0 setPoisitionMode:r8 animated:r3];
                            r0 = *(int32_t *)(r19 + r24);
                            [r0 becomeFirstResponder];
                            r22 = *(int32_t *)(r19 + r24);
                            r2 = [r22 contentMode];
                            asm{ movz       w3, #0x0 };
                            [r22 setContentMode:r2 animated:r3];
                            r0 = *(int32_t *)(r19 + r24);
                            r0 = [r0 positionMode];
                            if (r0 == 0x2) {
                                    asm{ movz       w2, #0x0 };
                                    asm{ movz       w3, #0x0 };
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    r0 = [r19 scrollTableToBottomAnimated:r2 init:r3];
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        x24, x23, [sp], #0x40 };
                                    return;
                            }
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        x24, x23, [sp], #0x40 };
                            return;
                    }
            }
    }
    return;
}

- (void)viewWillAppear:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r23 = arg2;
    r19 = self;
    r21 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    r31 = r31 + 0xffffffffffffffc0;
    *(int32_t *)r31 = @"viewWillAppear";
    asm{ movz       w6, #0x1779 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r21);
    *(int32_t *)(r31 + 0x30) = r19;
    *(int32_t *)(r31 + 0x38) = *(int32_t *)0x1039d3c98;
    r24 = @selector(viewWillAppear:);
    r0 = [[0x30 super] viewWillAppear:r2];
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            asm{ ldrsw      x8, [x8, #0xde0] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            *(int32_t *)(r31 + 0x18) = @selector(navigationController);
            r0 = [r19 navigationController];
            r29 = 0x50;
            r0 = [r0 retain];
            r22 = r0;
            [r0 setToolbarHidden:0x1];
            [r22 release];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r22 = r19 + 0x1039e8000;
            r25 = objc_loadWeakRetained(r22);
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r22);
                    r26 = @selector(ViewWillAppear);
                    r28 = [r0 respondsToSelector:r26];
                    [r0 release];
                    [r25 release];
                    if (r28 != 0x0) {
                            r0 = objc_loadWeakRetained(r22);
                            r25 = r0;
                            [r0 ViewWillAppear];
                            [r25 release];
                    }
            }
            asm{ ldrsw      x8, [x8, #0xd8c] };
            r20 = *(int32_t *)(r19 + 0x1039e8000);
            r25 = @selector(sharedApplication);
            r0 = [UIApplication sharedApplication];
            r29 = r29;
            r0 = [r0 retain];
            r26 = @selector(statusBarOrientation);
            r28 = [r0 statusBarOrientation];
            [r0 release];
            if (r20 != r28) {
                    if ([DeviceInfo isiOS8plus] != 0x0) {
                            r0 = *(int32_t *)(0x1039c3000 + 0x5c8);
                            if ([r0 isiPad] != 0x0) {
                                    [r19 supportedInterfaceOrientations];
                                    asm{ stp        x8, x0, [sp] };
                                    asm{ movz       w6, #0x178a };
                                    asm{ movz       x3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    objc_msgSend(iConsole, r21);
                                    r0 = [UIApplication sharedApplication];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r21 = r0;
                                    r2 = [r0 statusBarOrientation];
                                    asm{ movi.16b   v0, #0x0 };
                                    [r19 rotate:r2 duration:r3];
                                    [r21 release];
                            }
                    }
                    else {
                            [r19 supportedInterfaceOrientations];
                            asm{ stp        x8, x0, [sp] };
                            asm{ movz       w6, #0x178a };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            objc_msgSend(iConsole, r21);
                            r0 = [UIApplication sharedApplication];
                            r29 = r29;
                            r0 = [r0 retain];
                            r21 = r0;
                            r2 = [r0 statusBarOrientation];
                            asm{ movi.16b   v0, #0x0 };
                            [r19 rotate:r2 duration:r3];
                            [r21 release];
                    }
            }
            asm{ ldrsw      x8, [x8, #0xe10] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            r25 = objc_loadWeakRetained(r22);
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r22);
                    r26 = r0;
                    r21 = @selector(getExtraInfo);
                    if ([r0 respondsToSelector:r21] != 0x0) {
                            r0 = objc_loadWeakRetained(r22);
                            r27 = r0;
                            r0 = [r0 getExtraInfo];
                            r29 = r29;
                            r21 = [r0 retain];
                            [r27 release];
                    }
                    else {
                            asm{ movz       x21, #0x0 };
                    }
                    [r26 release];
            }
            else {
                    asm{ movz       x21, #0x0 };
            }
            [r25 release];
            r0 = [r21 objectForKey:@"AllUnReadCount"];
            r29 = r29;
            r0 = [r0 retain];
            r25 = r0;
            r0 = [r0 unsignedIntegerValue];
            asm{ ldrsw      x8, [x8, #0xe68] };
            *(int32_t *)(r19 + 0x1039e8000) = r0;
            [r25 release];
            *(int32_t *)(r31 + 0x20) = r19;
            *(int32_t *)(r31 + 0x28) = *(int32_t *)0x1039d3c98;
            r2 = r23;
            [[0x20 super] viewWillAppear:r2];
            r23 = @selector(isiOS8plus);
            if (([DeviceInfo isiOS8plus] & 0x1 << 0x0) == 0x0) {
                    r2 = @selector(fixInputToolViewKeyboard);
                    r3 = r19;
                    [r19 safePerformSelector:r2 withObject:r3 afterDelay:STK-1];
            }
            [r19 updateToolViewOrigin];
            asm{ ldrsw      x8, [x8, #0xe34] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            if ((r0 == 0x0) || ([r0 isHidden] != 0x0)) {
                    r24 = objc_loadWeakRetained(r22);
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r22);
                            r25 = r0;
                            r26 = @selector(GetFirstUnReadMessage);
                            r2 = r26;
                            if ([r0 respondsToSelector:r2] != 0x0) {
                                    r0 = objc_loadWeakRetained(r22);
                                    r27 = r0;
                                    r0 = [r0 GetFirstUnReadMessage];
                                    r29 = r29;
                                    r22 = [r0 retain];
                                    [r27 release];
                            }
                            else {
                                    asm{ movz       x22, #0x0 };
                            }
                            [r25 release];
                            r25 = r22;
                    }
                    else {
                            asm{ movz       x22, #0x0 };
                            asm{ movz       x25, #0x0 };
                    }
                    [r24 release];
                    asm{ ldrsw      x26, [x8, #0xde8] };
                    r24 = [r25 retain];
                    r0 = *(int32_t *)(r19 + r26);
                    *(int32_t *)(r19 + r26) = r22;
                    [r0 release];
                    if (*(int32_t *)(r19 + r26) != 0x0) {
                            r2 = @selector(onTrySHowFirstUnReadButton);
                            asm{ movz       x3, #0x0 };
                            asm{ fmov       d0, #0x0 };
                            [r19 safePerformSelector:r2 withObject:r3 afterDelay:STK-1];
                    }
                    [r24 release];
            }
            [UiUtil taskBarHeight];
            asm{ fcmp       d0, #0x0 };
            if ((CPU_FLAGS & LE) && (([*(int32_t *)(0x1039c3000 + 0x5c8) isiOS8plus] & 0x1 << 0x0) == 0x0)) {
                    r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x18));
                    r29 = r29;
                    r22 = [r0 retain];
                    r2 = [MMUINavigationController class];
                    r23 = [r22 isKindOfClass:r2];
                    [r22 release];
                    if (r23 != 0x0) {
                            r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x18));
                            r29 = r29;
                            r0 = [r0 retain];
                            r20 = r0;
                            [r0 layoutViewsForTaskBar];
                            [r20 release];
                    }
            }
            asm{ ldrsw      x8, [x8, #0xe0c] };
            r20 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r19 view];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            [r0 size];
            [r20 setSize:r2];
            [r22 release];
            r0 = [r21 release];
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)willDismissAndShow
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x10;
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd8c] };
            r25 = *(int32_t *)(r19 + 0x1039e8000);
            r20 = @selector(sharedApplication);
            r0 = [UIApplication sharedApplication];
            r29 = 0x40;
            r0 = [r0 retain];
            r21 = @selector(statusBarOrientation);
            r23 = [r0 statusBarOrientation];
            r0 = [r0 release];
            if (r25 != r23) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x840);
                    r0 = [r0 sharedApplication];
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = r0;
                    r2 = [r0 statusBarOrientation];
                    asm{ movi.16b   v0, #0x0 };
                    [r19 rotate:r2 duration:r3];
                    [r20 release];
                    *(int32_t *)r31 = r19;
                    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
                    r0 = [[0x0 super] willDismissAndShow];
            }
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return;
}

- (id)shouldInteractivePop
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r0 = [r0 isEditing];
    if ((r0 & 0x1 << 0x0) != 0x0) {
            asm{ movz       w0, #0x0 };
    }
    else {
            asm{ ldrsw      x8, [x8, #0xd9c] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r0 isSearchBarActive];
            r0 = r0 ^ 0x1;
    }
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (id)shouldEnableKeyboardInteractivePop
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    asm{ ldrsw      x21, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + r21);
    r0 = [r0 contentMode];
    if (r0 == 0x1) {
            r0 = *(int32_t *)(r19 + r21);
            r0 = [r0 positionMode];
            if (r0 == 0x2) {
                    r0 = *(int32_t *)(r19 + r21);
                    r20 = @selector(inputMode);
                    if ([r0 inputMode] != 0x1) {
                            r0 = *(int32_t *)(r19 + r21);
                            r0 = [r0 inputMode];
                            if (r0 == 0x3) {
                                    if ([DeviceInfo isiOS8plus] != 0x0) {
                                            r0 = [r19 navigationController];
                                            r0 = [r0 retain];
                                            r20 = r0;
                                            r0 = [r0 topViewController];
                                            r0 = [r0 retain];
                                            r21 = r0;
                                            [r0 release];
                                            r0 = [r20 release];
                                            if (r21 != r19) {
                                                    asm{ movz       w0, #0x0 };
                                            }
                                            else {
                                                    r0 = 0x1;
                                            }
                                    }
                                    else {
                                            r0 = 0x1;
                                    }
                            }
                            else {
                                    asm{ movz       w0, #0x0 };
                            }
                    }
                    else {
                            if ([DeviceInfo isiOS8plus] != 0x0) {
                                    r0 = [r19 navigationController];
                                    r0 = [r0 retain];
                                    r20 = r0;
                                    r0 = [r0 topViewController];
                                    r0 = [r0 retain];
                                    r21 = r0;
                                    [r0 release];
                                    r0 = [r20 release];
                                    if (r21 != r19) {
                                            asm{ movz       w0, #0x0 };
                                    }
                                    else {
                                            r0 = 0x1;
                                    }
                            }
                            else {
                                    r0 = 0x1;
                            }
                    }
            }
            else {
                    asm{ movz       w0, #0x0 };
            }
    }
    else {
            asm{ movz       w0, #0x0 };
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return r0;
}

- (void)onChatBackgroundChanged:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r19 = [arg2 retain];
    r0 = [r20 GetContact];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 m_nsUsrName];
    r0 = [r0 retain];
    r23 = [r0 isEqualToString:r19];
    [r0 release];
    [r21 release];
    if ((r23 & 0x1 << 0x0) != 0x0) {
            [r20 reloadBackgroundView];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)viewDidAppear:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x30;
    r19 = self;
    *(int32_t *)(r31 + 0x20) = r19;
    *(int32_t *)(r31 + 0x28) = *(int32_t *)0x1039d3c98;
    r0 = [[0x20 super] viewDidAppear:arg2];
    asm{ movz       x0, #0x0 };
    r0 = time(r0);
    asm{ ldrsw      x8, [x8, #0xe6c] };
    *(int32_t *)(r19 + 0x1039e8000) = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            r26 = @selector(navigationController);
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r20 = r0;
            [r0 setToolbarHidden:0x1];
            [r20 release];
            asm{ ldrsw      x8, [x8, #0xe10] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x1;
            r28 = 0x1039c3000;
            r21 = @selector(defaultCenter);
            r24 = [[MMServiceCenter defaultCenter] retain];
            r22 = @selector(class);
            r2 = [VoipUIManager class];
            r23 = @selector(getService:);
            r0 = [r24 getService:r2];
            r29 = 0x50;
            r0 = [r0 retain];
            r25 = r0;
            r27 = @selector(isVoipWorking);
            if (([r0 isVoipWorking] & 0x1 << 0x0) != 0x0) {
                    [r25 release];
                    [r24 release];
            }
            else {
                    r20 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
                    r2 = [MultiTalkMgr class];
                    r0 = [r20 getService:r2];
                    r29 = r29;
                    r0 = [r0 retain];
                    r28 = r0;
                    if (([r0 isMultiTalkActive] & 0x1 << 0x0) != 0x0) {
                            [r28 release];
                            [r20 release];
                            [r25 release];
                            [r24 release];
                            r28 = 0x1039c3000;
                    }
                    else {
                            r0 = [MMServiceCenter defaultCenter];
                            asm{ stp        x26, x20, [sp, #0x10] };
                            r20 = [r0 retain];
                            r2 = [VoipCSUIManager class];
                            r0 = [r20 getService:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r27 = [r0 isVoipWorking];
                            [r0 release];
                            [r20 release];
                            [r28 release];
                            r0 = *(int32_t *)(r31 + 0x18);
                            [r0 release];
                            [r25 release];
                            [r24 release];
                            r26 = *(int32_t *)(r31 + 0x10);
                            r28 = 0x1039c3000;
                            if ((r27 & 0x1 << 0x0) == 0x0) {
                                    r3 = 0x2;
                                    asm{ movz       w2, #0x0 };
                                    [UiUtil setStatusBarHidden:r2 withAnimation:r3];
                            }
                    }
            }
            asm{ ldrsw      x8, [x8, #0xe70] };
            if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
                    *(int8_t *)(r19 + 0x1039e8000) = 0x1;
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r20 = r19 + 0x1039e8000;
                    r0 = objc_loadWeakRetained(r20);
                    r25 = [r0 shouldSearchedMsgHightlight];
                    [r0 release];
                    if (r25 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            r0 = [r0 getSearchedMsgLocalID];
                            asm{ ldrsw      x8, [x8, #0xda8] };
                            *(int32_t *)(r19 + 0x1039e8000) = r0;
                            [r20 release];
                            [r19 highLightSelectSearchCell];
                            r2 = @selector(unHighLightSelectSearchCell);
                            asm{ movz       x3, #0x0 };
                            asm{ fmov       d0, #0x0 };
                            [r19 safePerformSelector:r2 withObject:r3 afterDelay:STK-1];
                    }
            }
            asm{ ldrsw      x8, [x8, #0xd7c] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x1;
            asm{ ldrsw      x8, [x8, #0xd80] };
            if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
                    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
                    asm{ movz       x2, #0x0 };
                    [r19 updateTitleView:r2];
            }
            [UIView setAnimationsEnabled:0x1];
            r20 = [[*(int32_t *)(r28 + 0x310) defaultCenter] retain];
            r2 = [MMAVPlayerMgr class];
            r0 = [r20 getService:r2];
            r0 = [r0 retain];
            r21 = r0;
            [r0 resumeAllItem];
            [r21 release];
            [r20 release];
            asm{ movz       x2, #0x0 };
            loc_102a196e0(0x6, 0x3);
            asm{ ldrsw      x8, [x8, #0xd9c] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r0 searchBar];
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            [r0 release];
            if (r20 == 0x0) {
                    r0 = [r19 navigationController];
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = r0;
                    asm{ movz       w2, #0x0 };
                    [r0 setNavigationBarHidden:r2];
                    [r20 release];
            }
            r0 = [DeviceInfo hasForceTouchCapability:r19];
            if (r0 != 0x0) {
                    asm{ ldrsw      x21, [x8, #0xe74] };
                    if (*(int32_t *)(r19 + r21) != 0x0) {
                            r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
                            *(int32_t *)r31 = @"3D Touch already register but need to unregisterForPreviewing";
                            asm{ movz       w6, #0x1820 };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            objc_msgSend(iConsole, r20);
                            r2 = *(int32_t *)(r19 + r21);
                            [r19 unregisterForPreviewingWithContext:r2];
                    }
                    else {
                            r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
                    }
                    *(int32_t *)r31 = @"3D Touch registerForPreviewing";
                    asm{ movz       w6, #0x1823 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(iConsole, r20);
                    asm{ ldrsw      x8, [x8, #0xd74] };
                    r3 = *(int32_t *)(r19 + 0x1039e8000);
                    r0 = [r19 registerForPreviewingWithDelegate:r19 sourceView:r3];
                    r29 = r29;
                    r0 = [r0 retain];
                    r8 = *(int32_t *)(r19 + r21);
                    *(int32_t *)(r19 + r21) = r0;
                    r0 = [r8 release];
            }
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (id)tagForActivePage
{
    asm{ ldrsw      x8, [x8, #0xd68] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = NSStringFromClass(r0);
    return r0;
}

- (id)tagForCurrentPage
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    asm{ ldrsw      x8, [x8, #0xd68] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    r0 = NSStringFromClass(r0);
    r29 = 0x40;
    r19 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r21 + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r22 = @selector(tagForCurrentPage);
    r24 = [r0 respondsToSelector:r22];
    [r0 release];
    if (r24 != 0x0) {
            r25 = [[r19 stringByAppendingString:@"-"] retain];
            [r19 release];
            r0 = objc_loadWeakRetained(r20);
            r23 = r0;
            r22 = [[r0 tagForCurrentPage] retain];
            r0 = [r25 stringByAppendingString:r22];
            r29 = 0x40;
            r19 = [r0 retain];
            [r25 release];
            [r22 release];
            [r23 release];
    }
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x820] };
    if (*(int32_t *)(r21 + 0x1039ef000) == 0x5) {
            r21 = [[r19 stringByAppendingString:@"-"] retain];
            [r19 release];
            r0 = objc_loadWeakRetained(r20);
            r20 = r0;
            r0 = [r0 GetContact];
            r0 = [r0 retain];
            r23 = r0;
            r24 = [[r0 m_nsUsrName] retain];
            r0 = [r21 stringByAppendingString:r24];
            r19 = [r0 retain];
            [r21 release];
            [r24 release];
            [r23 release];
            [r20 release];
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 autorelease];
    return r0;
}

- (void)viewWillPush:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d3c98;
    r0 = [[0x0 super] viewWillPush:arg2];
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            asm{ ldrsw      x20, [x8, #0xdd4] };
            r0 = *(int32_t *)(r19 + r20);
            r0 = [r0 isFirstResponder];
            asm{ ldrsw      x8, [x8, #0xe64] };
            *(int8_t *)(r19 + 0x1039e8000) = r0;
            r0 = *(int32_t *)(r19 + r20);
            [r0 onWillDisappear];
            r0 = *(int32_t *)(r19 + r20);
            r0 = [r0 resignFirstResponder];
    }
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)viewDidPush:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d3c98;
    [[0x0 super] viewDidPush:arg2];
    r0 = [self toolView];
    r0 = [r0 retain];
    r19 = r0;
    [r0 hideSightCamera];
    r0 = [r19 release];
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)viewWillDisappear:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    0x0 = 0x0 - 0x20;
    r19 = arg2;
    r20 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r22 = objc_loadWeakRetained(r21);
    if (r22 != 0x0) {
            r0 = objc_loadWeakRetained(r21);
            r23 = @selector(ViewWillDisappear);
            r25 = [r0 respondsToSelector:r23];
            [r0 release];
            [r22 release];
            if (r25 != 0x0) {
                    r0 = objc_loadWeakRetained(r21);
                    r21 = r0;
                    [r0 ViewWillDisappear];
                    [r21 release];
            }
    }
    *(int32_t *)(r31 + 0x10) = r20;
    *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d3c98;
    [[0x10 super] viewWillDisappear:r19];
    r0 = [r20 tagForCurrentPage];
    r29 = 0x40;
    r19 = [r0 retain];
    r0 = MMServiceCenter;
    r1 = @selector(defaultCenter);
    if (r19 != 0x0) {
            r21 = [[r0 defaultCenter] retain];
            r2 = [WCNewClickDataCheckMgr class];
            r22 = [[r21 getService:r2] retain];
            r23 = [NSStringFromClass([r20 class]) retain];
            asm{ stp        x23, x19, [sp] };
            r0 = [NSString stringWithFormat:@"%@-%@", r3, STK-2];
            r29 = r29;
            r0 = [r0 retain];
            r24 = r0;
            asm{ ldrsw      x26, [x8, #0xe6c] };
            r25 = *(int32_t *)(r20 + r26);
            asm{ movz       x0, #0x0 };
            time(r0);
            r2 = r24;
            [r22 recordPage:r2 startTime:r25 endTime:STK-1];
            [r24 release];
    }
    else {
            r21 = [[r0 defaultCenter] retain];
            r2 = [WCNewClickDataCheckMgr class];
            r22 = [[r21 getService:r2] retain];
            r0 = [r20 class];
            r0 = NSStringFromClass(r0);
            r29 = r29;
            r0 = [r0 retain];
            r23 = r0;
            asm{ ldrsw      x26, [x8, #0xe6c] };
            r24 = *(int32_t *)(r20 + r26);
            asm{ movz       x0, #0x0 };
            time(r0);
            r2 = r23;
            [r22 recordPage:r2 startTime:r24 endTime:STK-1];
    }
    [r23 release];
    [r22 release];
    [r21 release];
    *(int32_t *)(r20 + r26) = 0x0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r20 + 0x1039e8000) == 0x0) {
            r0 = [UIMenuController sharedMenuController];
            r0 = [r0 retain];
            r21 = r0;
            r3 = 0x1;
            asm{ movz       w2, #0x0 };
            [r0 setMenuVisible:r2 animated:r3];
            [r21 release];
            r0 = [r20 navigationController];
            r0 = [r0 retain];
            r21 = r0;
            asm{ movz       w2, #0x0 };
            [r0 setNavigationBarHidden:r2];
            [r21 release];
            r21 = @selector(currentDevice);
            r0 = [UIDevice currentDevice];
            r29 = r29;
            r0 = [r0 retain];
            r23 = [r0 isProximityMonitoringEnabled];
            [r0 release];
            if (r23 != 0x0) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x418);
                    r0 = [r0 currentDevice];
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = [r0 proximityState];
                    [r0 release];
                    if ((r23 & 0x1 << 0x0) == 0x0) {
                            r0 = *(int32_t *)(0x1039c3000 + 0x418);
                            r0 = [r0 currentDevice];
                            r29 = r29;
                            r0 = [r0 retain];
                            r21 = r0;
                            asm{ movz       w2, #0x0 };
                            [r0 setProximityMonitoringEnabled:r2];
                            [r21 release];
                    }
            }
            asm{ ldrsw      x8, [x8, #0xd8c] };
            r26 = *(int32_t *)(r20 + 0x1039e8000);
            r21 = @selector(sharedApplication);
            r0 = [UIApplication sharedApplication];
            r29 = r29;
            r0 = [r0 retain];
            r22 = @selector(statusBarOrientation);
            r24 = [r0 statusBarOrientation];
            [r0 release];
            if (r26 != r24) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x840);
                    r0 = [r0 sharedApplication];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    r2 = [r0 statusBarOrientation];
                    asm{ movi.16b   v0, #0x0 };
                    [r20 rotate:r2 duration:r3];
                    [r21 release];
            }
    }
    r0 = [r19 release];
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return;
}

- (void)viewDidDisappear:(id)arg2 
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    0x0 = 0x0 - 0x20;
    r21 = arg2;
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
            r25 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
            *(int32_t *)r31 = @"viewDidDisappear";
            asm{ movz       w6, #0x187b };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(iConsole, r20);
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMAVPlayerMgr class];
            r0 = [r22 getService:r2];
            r29 = 0x40;
            r0 = [r0 retain];
            r23 = r0;
            [r0 stackAllItem];
            [r23 release];
            [r22 release];
            *(int32_t *)(r31 + 0x10) = r19;
            *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d3c98;
            r0 = [[0x10 super] viewDidDisappear:r21];
            asm{ ldrsw      x21, [x8, #0xe74] };
            if (*(int32_t *)(r19 + r21) != 0x0) {
                    r0 = *(int32_t *)(0x1039c3000 + 0x380);
                    *(int32_t *)r31 = @"3D Touch unregister";
                    asm{ movz       w6, #0x1880 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(r0, r20);
                    r2 = *(int32_t *)(r19 + r21);
                    [r19 unregisterForPreviewingWithContext:r2];
                    r0 = *(int32_t *)(r19 + r21);
                    *(int32_t *)(r19 + r21) = 0x0;
                    r0 = [r0 release];
            }
    }
    0x0 = r29 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return;
}

- (void)willEnterRoom
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    [self statEnterMsgChat];
    r20 = @selector(GetContact);
    r0 = [r19 GetContact];
    r0 = [r0 retain];
    r22 = [r0 isChatroom];
    r0 = [r0 release];
    if (r22 != 0x0) {
            r21 = [BadRoomLogicController alloc];
            r20 = [[r19 GetContact] retain];
            r21 = [r21 initWithContact:r20];
            [r19 setM_badRoomLogicController:r21];
            [r21 release];
            [r20 release];
            r0 = [r19 m_badRoomLogicController];
            r0 = [r0 retain];
            r21 = r0;
            [r0 setM_delegate:r19];
            [r21 release];
            r0 = [r19 m_badRoomLogicController];
            r0 = [r0 retain];
            r21 = [r0 hasBadRoomUnread];
            [r0 release];
            r1 = @selector(setTableFooterView:);
            if (r21 != 0x0) {
            }
            else {
                    asm{ movz       w2, #0x0 };
            }
            r0 = [r19 setTableFooterView:r2];
    }
    asm{ ldrsw      x8, [x8, #0xd84] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)didExitRoom
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r0 = [self m_badRoomLogicController];
    r0 = [r0 retain];
    r19 = r0;
    [r0 exitRoom];
    [r19 release];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [SessionActionStatMgr class];
    r21 = [[r19 getService:r2] retain];
    r0 = [self GetContact];
    r22 = [r0 retain];
    asm{ ldrsw      x8, [x8, #0xe78] };
    r3 = *(int32_t *)(self + 0x1039e8000);
    asm{ ldrsw      x8, [x8, #0xe7c] };
    [r21 exitChatRoom:r22 beginTime:r3 unreadCount:STK-1];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)statEnterMsgChat
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    r20 = self;
    r0 = [CAppUtil genCurrentTime];
    asm{ ldrsw      x8, [x8, #0xe78] };
    *(int32_t *)(r20 + 0x1039e8000) = r0;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = r20 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r19);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r22 = r0;
            r23 = @selector(getExtraInfo);
            if ([r0 respondsToSelector:r23] != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r24 = r0;
                    r0 = [r0 getExtraInfo];
                    r29 = 0x30;
                    r19 = [r0 retain];
                    [r24 release];
            }
            else {
                    asm{ movz       x19, #0x0 };
            }
            [r22 release];
    }
    else {
            asm{ movz       x19, #0x0 };
    }
    [r21 release];
    r0 = [r19 objectForKey:@"AllUnReadCount"];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 intValue];
    asm{ ldrsw      x8, [x8, #0xe7c] };
    *(int32_t *)(r20 + 0x1039e8000) = r0;
    [r21 release];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [SessionActionStatMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    [r0 enterChatRoom];
    [r21 release];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)willAppear
{
    r0 = self;
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x50;
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            r0 = [r19 view];
            r0 = [r0 retain];
            r20 = r0;
            r22 = [NSStringFromCGRect([r0 frame]) retain];
            r21 = @selector(navigationController);
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 view];
            r0 = [r0 retain];
            r25 = r0;
            r27 = [NSStringFromCGRect([r0 frame]) retain];
            asm{ ldrsw      x8, [x8, #0xdd4] };
            *(int32_t *)(r31 + 0x30) = 0x1039e8000;
            r28 = [NSStringFromCGRect([*(int32_t *)(r19 + 0x1039e8000) frame]) retain];
            asm{ ldrsw      x8, [x8, #0xd74] };
            *(int32_t *)(r31 + 0x38) = 0x1039e8000;
            r26 = [NSStringFromCGRect([*(int32_t *)(r19 + 0x1039e8000) frame]) retain];
            asm{ stp        x28, x26, [sp, #0x18] };
            asm{ stp        x22, x27, [sp, #0x8] };
            *(int32_t *)r31 = @"frame %@ navi frame %@ input frame %@ tableview frame %@";
            asm{ movz       w6, #0x18af };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r26 release];
            [r28 release];
            [r27 release];
            [r25 release];
            [r23 release];
            [r22 release];
            [r20 release];
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r20 = r0;
            r2 = 0x1;
            [r0 setToolbarHidden:r2];
            [r20 release];
            r0 = [UIApplication sharedApplication];
            r29 = 0x50;
            r0 = [r0 retain];
            r22 = [r0 statusBarOrientation] - 0x1;
            [r0 release];
            if (r22 <= 0x1) {
                    *(int32_t *)(r31 + 0x40) = r19;
                    *(int32_t *)(r31 + 0x48) = *(int32_t *)0x1039d3c98;
                    [[0x40 super] willAppear];
            }
            asm{ movz       x2, #0x0 };
            [r19 updateTitleView:r2];
            asm{ ldrsw      x8, [x8, #0xd7c] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            r0 = [r19 navigationController];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 viewControllers];
            r29 = r29;
            r0 = [r0 retain];
            r2 = r19;
            r22 = [r0 containsObject:r2];
            [r0 release];
            [r20 release];
            if (r22 != 0x0) {
                    asm{ ldrsw      x25, [x8, #0xd6c] };
                    r20 = r19 + r25;
                    r21 = objc_loadWeakRetained(r20);
                    if (r21 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r22 = @selector(onBackFromNavigationController);
                            r24 = [r0 respondsToSelector:r22];
                            [r0 release];
                            [r21 release];
                            if (r24 != 0x0) {
                                    r0 = objc_loadWeakRetained(r20);
                                    r21 = r0;
                                    [r0 onBackFromNavigationController];
                                    [r21 release];
                            }
                    }
                    [r19 initToolEmoticonView];
                    r21 = objc_loadWeakRetained(r20);
                    if (r21 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r22 = @selector(OpenEmoticonToolView:);
                            r24 = [r0 respondsToSelector:r22];
                            [r0 release];
                            [r21 release];
                            if (r24 != 0x0) {
                                    r0 = objc_loadWeakRetained(r20);
                                    r20 = r0;
                                    [r0 OpenEmoticonToolView:r2];
                                    [r20 release];
                            }
                    }
            }
            else {
                    asm{ movz       w2, #0x0 };
                    asm{ movz       w3, #0x0 };
                    [r19 scrollTableToBottomAnimated:r2 init:r3];
                    r25 = *(int32_t *)objc_ivar_offset_BaseMsgContentViewController_m_delegate;
            }
            [r19 beginLockerTimer];
            asm{ ldrsw      x8, [x8, #0xd8c] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ movi.16b   v0, #0x0 };
            [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
            r0 = objc_loadWeakRetained(r19 + r25);
            r21 = [r0 ShouldShowMultiSelectMode];
            [r0 release];
            r23 = *(int32_t *)(r31 + 0x38);
            if (r21 != 0x0) {
                    asm{ movz       w2, #0x0 };
                    asm{ movz       w3, #0x0 };
                    [r19 scrollTableToBottomAnimated:r2 init:r3];
            }
            r0 = *(int32_t *)(r19 + r23);
            r20 = @selector(contentOffset);
            [r0 contentOffset];
            asm{ fcmp       d1, #0x0 };
            if (CPU_FLAGS & NE) {
                    r21 = *(int32_t *)(r19 + r23);
                    [r21 contentOffset];
                    asm{ fmov       d1, #0x1 };
                    [r21 setContentOffset:r2];
                    r19 = *(int32_t *)(r19 + r23);
                    [r19 contentOffset];
                    asm{ movi.16b   v1, #0x0 };
                    [r19 setContentOffset:r2];
            }
            r20 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMAVPlayerMgr class];
            r0 = [r20 getService:r2];
            r29 = r29;
            r0 = [r0 retain];
            r21 = r0;
            [r0 stopHoldingUpdate:0x1];
            [r21 release];
            r0 = [r20 release];
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)willDisshow
{
    r0 = self;
    return;
}

- (void)onViewDisappear
{
    r0 = self;
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            [r19 lockerTimesup];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r19 + 0x1039e8000;
            r21 = objc_loadWeakRetained(r20);
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(onPopFromNavigationController);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            [r0 onPopFromNavigationController];
                            [r20 release];
                    }
            }
            r0 = [r19 getViewController];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 navigationController];
            r0 = [r0 retain];
            r21 = r0;
            r22 = [[r0 navigationBar] retain];
            r0 = [MMThemeManager sharedThemeManager];
            r0 = [r0 retain];
            r23 = r0;
            r0 = [r0 colorList];
            r0 = [r0 retain];
            r24 = r0;
            r0 = [r0 getColorByName:@"navigator_tint_color"];
            r29 = 0x40;
            r25 = [[r0 retain] retain];
            if (r25 != 0x0) {
                    r0 = [r25 retain];
            }
            else {
                    r0 = [UIColor clearColor];
                    r0 = [r0 retain];
            }
            r26 = r0;
            [r25 release];
            [r22 setTintColor:r26];
            [r26 release];
            [r25 release];
            [r24 release];
            [r23 release];
            [r22 release];
            [r21 release];
            r0 = [r20 release];
            asm{ ldrsw      x8, [x8, #0xd84] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            asm{ ldrsw      x8, [x8, #0xd8c] };
            if (*(int32_t *)(r19 + 0x1039e8000) >= 0x3) {
                    r0 = [DeviceInfo isiPadUniversal];
                    if ((r0 & 0x1 << 0x0) != 0x0) {
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            return;
                    }
                    else {
                            asm{ movi.16b   v0, #0x0 };
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            r0 = [r19 rotate:0x1 duration:r3];
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    return;
}

- (void)viewDidBePoped:(id)arg2 
{
    r2 = arg2;
    r0 = self;
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x30;
    r24 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r24 + 0x1039e8000) == 0x0) {
            *(int32_t *)(r31 + 0x20) = r24;
            *(int32_t *)(r31 + 0x28) = *(int32_t *)0x1039d3c98;
            [[0x20 super] viewDidBePoped:r2];
            r22 = @selector(defaultCenter);
            r19 = [[MMServiceCenter defaultCenter] retain];
            r20 = @selector(class);
            [MMConfigMgr class];
            r21 = @selector(getService:);
            r0 = [r19 getService:r2];
            r29 = 0x50;
            r0 = [r0 retain];
            r25 = [r0 IsShouldSendSignalInScene:@"SendMsg"];
            [r0 release];
            [r19 release];
            if (r25 != 0x0) {
                    sub_1009516c4();
            }
            r23 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [TrackRoomMgr class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r19 = [[r0 chatname] retain];
            [r0 release];
            [r23 release];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r25 = r24 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r25);
            r26 = r0;
            r0 = [r0 GetContact];
            r0 = [r0 retain];
            r27 = r0;
            r0 = [r0 m_nsUsrName];
            r29 = r29;
            r23 = [r0 retain];
            [r27 release];
            [r26 release];
            if ([r19 isEqualToString:r23] != 0x0) {
                    r0 = objc_loadWeakRetained(r25);
                    r25 = r0;
                    [r0 exitTracking];
                    [r25 release];
            }
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r24 + 0x1039e8000);
            [r0 resetGrowTextView];
            r0 = [r24 toolView];
            r0 = [r0 retain];
            r25 = r0;
            [r0 hideSightCamera];
            [r25 release];
            r25 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [MMAVPlayerMgr class];
            r0 = [r25 getService:r2];
            r29 = r29;
            r0 = [r0 retain];
            r26 = r0;
            [r0 performDeactive];
            [r26 release];
            [r25 release];
            [r24 onViewDisappear];
            asm{ ldrsw      x8, [x8, #0xe34] };
            r0 = *(int32_t *)(r24 + 0x1039e8000);
            if ((r0 != 0x0) && (([r0 isHidden] & 0x1 << 0x0) == 0x0)) {
                    *(int32_t *)r31 = @"hide first unread when clear";
                    asm{ movz       w6, #0x191a };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                    [r24 animateHideFirstUnReadButton];
            }
            r0 = [UIResponder currentFirstResponder];
            r29 = r29;
            r24 = [r0 retain];
            [UITextView class];
            r25 = @selector(isKindOfClass:);
            if (([r24 isKindOfClass:r2] & 0x1 << 0x0) == 0x0) {
                    [UITextField class];
                    if ([r24 isKindOfClass:r2] != 0x0) {
                            r0 = [r24 rootDesc];
                            r29 = r29;
                            r26 = [r0 retain];
                            asm{ stp        x24, x26, [sp, #0x8] };
                            *(int32_t *)r31 = @"!! A keyboard monster may be is coming!! Be careful! The monster is [%@] %@";
                            asm{ movz       w6, #0x1920 };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                            [r26 release];
                            [r24 resignFirstResponder];
                    }
            }
            else {
                    r0 = [r24 rootDesc];
                    r29 = r29;
                    r26 = [r0 retain];
                    asm{ stp        x24, x26, [sp, #0x8] };
                    *(int32_t *)r31 = @"!! A keyboard monster may be is coming!! Be careful! The monster is [%@] %@";
                    asm{ movz       w6, #0x1920 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                    [r26 release];
                    [r24 resignFirstResponder];
            }
            r25 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [WCRedEnvelopesControlMgr class];
            r0 = [r25 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            [r0 cancelAllLogic];
            [r26 release];
            [r25 release];
            r22 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [WCGiftCardMgr class];
            r0 = [r22 getService:r2];
            r29 = r29;
            r0 = [r0 retain];
            r21 = r0;
            [r0 cancelAllGiftCardCgi];
            [r21 release];
            [r22 release];
            [r24 release];
            [r23 release];
            r0 = [r19 release];
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)viewDidPop:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d3c98;
    [[0x0 super] viewDidPop:arg2];
    r0 = [self fixInputToolViewKeyboard];
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)tryMoveToMainFrame
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r0 = [CAppViewControllerManager getAppViewControllerManager];
    r19 = [r0 retain];
    if ([r20 m_bIsInMainFrame] != 0x0) {
            r23 = @selector(navigationController);
            r0 = [r20 navigationController];
            r29 = 0x30;
            r21 = [r0 retain];
            if (r21 != 0x0) {
                    r22 = [[r20 navigationController] retain];
                    r0 = [r19 getNewMainFrameViewController];
                    r0 = [r0 retain];
                    r24 = r0;
                    r0 = [r0 navigationController];
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = r0;
                    [r0 release];
                    [r24 release];
                    [r22 release];
                    [r21 release];
                    if (r22 != r23) {
                            asm{ ldrsw      x8, [x8, #0xe04] };
                            *(int8_t *)(r20 + 0x1039e8000) = 0x1;
                            asm{ movz       x2, #0x0 };
                            [r19 moveToTab:r2 showMainView:0x1];
                            asm{ ldrsw      x8, [x8, #0xd6c] };
                            r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                            r20 = r0;
                            r0 = [r0 GetContact];
                            r21 = [r0 retain];
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            [r19 newMessageByContact:r21 msgWrapToAdd:0x1 animated:STK-1];
                            [r21 release];
                            [r20 release];
                    }
            }
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)viewDidBePushed:(id)arg2 
{
    asm{ stp        d11, d10, [sp, #0xffffff90]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    r29 = 0x60;
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = r19;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d3c98;
    r0 = [[0x0 super] viewDidBePushed:arg2];
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) goto loc_101d31280;
    goto loc_101d31278;

loc_101d31280:
    asm{ movz       x3, #0x0 };
    [r19 performSelector:@selector(tryMoveToMainFrame) withObject:r3 afterDelay:STK-1];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(ViewDidAppear);
            asm{ nop         };
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 ViewDidAppear];
                    [r21 release];
            }
    }
    r0 = objc_loadWeakRetained(r20);
    r21 = r0;
    if (([r0 CanSendVoiceMsg] & 0x1 << 0x0) == 0x0) goto loc_101d3152c;
    goto loc_101d31334;

loc_101d3152c:
    [r21 release];

loc_101d31534:
    r0 = objc_loadWeakRetained(r20);
    r21 = r0;
    if (([r0 CanSendVoipMsg] & 0x1 << 0x0) == 0x0) goto loc_101d31734;
    goto loc_101d31550;

loc_101d31734:
    r0 = r21;

loc_101d31738:
    r0 = [r0 release];

loc_101d3173c:
    0x0 = r29 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        x26, x25, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x70 };
    return;

loc_101d31550:
    r0 = objc_loadWeakRetained(r20);
    r22 = r0;
    r24 = @selector(GetContact);
    r0 = [r0 GetContact];
    r29 = r29;
    r23 = [r0 retain];
    r2 = [CContact class];
    if ([r23 isKindOfClass:r2] == 0x0) goto loc_101d31724;
    goto loc_101d315a4;

loc_101d31724:
    [r23 release];
    [r22 release];
    goto loc_101d31734;

loc_101d315a4:
    r0 = objc_loadWeakRetained(r20);
    r20 = r0;
    r0 = [r0 GetContact];
    r29 = r29;
    r0 = [r0 retain];
    r24 = [r0 isBrandContact];
    [r0 release];
    [r20 release];
    [r23 release];
    [r22 release];
    r0 = [r21 release];
    if ((r24 & 0x1 << 0x0) != 0x0) goto loc_101d3173c;
    r20 = [[NewUserGuideLogic shareLogic] retain];
    r21 = [[r19 view] retain];
    [r19 getContentViewY];
    [UiUtil screenWidthCurOri];
    [UiUtil screenHeightCurOri];
    [r19 getContentViewY];
    r0 = [r19 toolView];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 toolView];
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    [r0 height];
    asm{ fsub       d1, d10, d11 };
    asm{ fsub       d3, d1, d0 };
    asm{ nop         };
    asm{ movi.16b   v0, #0x0 };
    [r20 showVoipAndPhoneTip:r21 frame:@selector(removeVoipAndPhoneTip) sel:STK0 target:STK-1];
    [r23 release];
    [r22 release];
    [r21 release];
    r0 = r20;
    goto loc_101d31738;

loc_101d31334:
    r0 = objc_loadWeakRetained(r20);
    r22 = r0;
    r25 = @selector(GetContact);
    r0 = [r0 GetContact];
    r29 = 0x60;
    r23 = [r0 retain];
    r2 = [CContact class];
    if ([r23 isKindOfClass:r2] == 0x0) goto loc_101d3151c;
    goto loc_101d31388;

loc_101d3151c:
    [r23 release];
    [r22 release];
    goto loc_101d3152c;

loc_101d31388:
    r0 = objc_loadWeakRetained(r20);
    r24 = r0;
    r0 = [r0 GetContact];
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    if (([r0 isBrandContact] & 0x1 << 0x0) == 0x0) goto loc_101d313c4;
    goto loc_101d313b8;

loc_101d313c4:
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r26 = [r0 inputMode];
    [r25 release];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if (r26 == 0x2) goto loc_101d31534;
    r21 = [[NewUserGuideLogic shareLogic] retain];
    r22 = [[r19 view] retain];
    [r19 getContentViewY];
    [UiUtil screenWidthCurOri];
    [UiUtil screenHeightCurOri];
    [r19 getContentViewY];
    r0 = [r19 toolView];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 toolView];
    r29 = r29;
    r0 = [r0 retain];
    r24 = r0;
    [r0 height];
    asm{ fsub       d1, d10, d11 };
    asm{ fsub       d3, d1, d0 };
    asm{ nop         };
    asm{ movi.16b   v0, #0x0 };
    [r21 showVoiceTip:r22 frame:@selector(removeVoiceTip) sel:STK0 target:STK-1];

loc_101d31514:
    [r24 release];
    goto loc_101d3151c;

loc_101d313b8:
    [r25 release];
    goto loc_101d31514;

loc_101d31278:
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    goto loc_101d3173c;
}

- (void)removeVoiceTip
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [NewUserGuideLogic shareLogic];
    r0 = [r0 retain];
    r20 = r0;
    [r0 removeVoiceTip:0x1];
    [r20 release];
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    asm{ movz       w3, #0x0 };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r0 setInputMode:0x2 animated:r3];
    return;
}

- (void)removeVoipAndPhoneTip
{
    asm{ movz       x2, #0x0 };
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 onAttachmentModeChangeButtonClicked:r2];
    return;
}

- (void)viewWillPop:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r29 = 0x20;
    0x0 = 0x0 - 0x10;
    r20 = arg2;
    r19 = self;
    asm{ movz       x4, #0x0 };
    r0 = [NSObject cancelPreviousPerformRequestsWithTarget:r19 selector:@selector(tryMoveToMainFrame) object:STK-1];
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
            [[0x0 super] viewWillPop:r20];
            r0 = [UIApplication sharedApplication];
            r29 = 0x20;
            r0 = [r0 retain];
            r20 = r0;
            if ([r0 statusBarOrientation] <= 0x4) {
                    r21 = [DeviceInfo isiPadUniversal] ^ 0x1;
            }
            else {
                    asm{ movz       w21, #0x0 };
            }
            [r20 release];
            r0 = [r19 navigationController];
            r29 = r29;
            r19 = [r0 retain];
            r1 = @selector(setNavigationBarHidden:);
            if (r21 != 0x0) {
                    [r19 setNavigationBarHidden:r2];
            }
            else {
                    asm{ movz       w2, #0x0 };
                    [r19 setNavigationBarHidden:r2];
            }
            r0 = [r19 release];
    }
    0x0 = r29 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)viewWillBePoped:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r20 = arg2;
    r19 = self;
    r0 = [NewUserGuideLogic shareLogic];
    r0 = [r0 retain];
    r22 = r0;
    asm{ movz       w2, #0x0 };
    [r0 removeVoipAndPhoneTip:r2];
    [r22 release];
    r0 = [NewUserGuideLogic shareLogic];
    r29 = 0x30;
    r0 = [r0 retain];
    r21 = r0;
    asm{ movz       w2, #0x0 };
    [r0 removeVoiceTip:r2];
    [r21 release];
    asm{ movz       x4, #0x0 };
    r0 = [NSObject cancelPreviousPerformRequestsWithTarget:r19 selector:@selector(tryMoveToMainFrame) object:STK-1];
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
            r2 = r20;
            [[0x0 super] viewWillBePoped:r2];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r19 = r19 + 0x1039e8000;
            r20 = objc_loadWeakRetained(r19);
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onWillPopFromNavigationController);
                    r2 = r21;
                    r23 = [r0 respondsToSelector:r2];
                    [r0 release];
                    [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onWillPopFromNavigationController];
                            [r20 release];
                    }
            }
            r20 = objc_loadWeakRetained(r19);
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(clearAtMeCount);
                    r2 = r21;
                    r23 = [r0 respondsToSelector:r2];
                    [r0 release];
                    [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 clearAtMeCount];
                            [r20 release];
                    }
            }
            r20 = objc_loadWeakRetained(r19);
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onSaveDraft);
                    r2 = r21;
                    r23 = [r0 respondsToSelector:r2];
                    [r0 release];
                    [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onSaveDraft];
                            [r20 release];
                    }
            }
            r20 = objc_loadWeakRetained(r19);
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(clearNewInvCount);
                    r2 = r21;
                    r23 = [r0 respondsToSelector:r2];
                    [r0 release];
                    [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 clearNewInvCount];
                            [r20 release];
                    }
            }
            r20 = objc_loadWeakRetained(r19);
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(clearNewInvApprove);
                    r2 = r21;
                    r23 = [r0 respondsToSelector:r2];
                    [r0 release];
                    [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 clearNewInvApprove];
                            [r20 release];
                    }
            }
            r0 = [VolumeCheckHelper getVolumeCheckHelper];
            r29 = 0x30;
            r0 = [r0 retain];
            r20 = r0;
            asm{ movz       w2, #0x0 };
            [r0 stopShowVolumeTipNeedDelay:r2];
            r0 = [r20 release];
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)viewWillBePushed:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r20 = arg2;
    r19 = self;
    r0 = [self statEnterMsgChat];
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
            [[0x0 super] viewWillBePushed:r20];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r19 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onWillPushFromNavigationController);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onWillPushFromNavigationController];
                            r0 = [r20 release];
                    }
            }
    }
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)viewWillPresent:(id)arg2 
{
    r2 = arg2;
    r0 = self;
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    0x0 = 0x0 - 0x10;
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
            [[0x0 super] viewWillPresent:r2];
            asm{ ldrsw      x20, [x8, #0xdd4] };
            r0 = *(int32_t *)(r19 + r20);
            r0 = [r0 isFirstResponder];
            asm{ ldrsw      x8, [x8, #0xe64] };
            *(int8_t *)(r19 + 0x1039e8000) = r0;
            r0 = *(int32_t *)(r19 + r20);
            r0 = [r0 onWillDisappear];
    }
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return;
}

- (void)viewDidBePresented:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    [self statEnterMsgChat];
    *(int32_t *)r31 = self;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
    [[0x0 super] viewDidBePresented:arg2];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r19 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r19);
    r20 = r0;
    if (r20 != 0x0) {
            r0 = objc_loadWeakRetained(r19);
            r21 = @selector(ViewDidAppear);
            asm{ nop         };
            r23 = [r0 respondsToSelector:r21];
            [r0 release];
            r0 = [r20 release];
            if (r23 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r20 = r0;
                    [r0 ViewDidAppear];
                    r0 = [r20 release];
            }
    }
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)viewDidBeDismissed:(id)arg2 
{
    r2 = arg2;
    r0 = self;
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xe04] };
    if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
            [[0x0 super] viewDidBeDismissed:r2];
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r19 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r19);
            r20 = r0;
            if (r20 != 0x0) {
                    r0 = objc_loadWeakRetained(r19);
                    r21 = @selector(onPopFromNavigationController);
                    r23 = [r0 respondsToSelector:r21];
                    [r0 release];
                    r0 = [r20 release];
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r19);
                            r20 = r0;
                            [r0 onPopFromNavigationController];
                            r0 = [r20 release];
                    }
            }
    }
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;
}

- (void)willShow
{
    r0 = self;
    return;
}

- (id)getTableViewVisibleHeightWithOrientation:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r22 = arg2;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    if (r0 == 0x0) goto loc_101d32244;
    goto loc_101d321c0;

loc_101d32244:
    asm{ movi.16b   v0, #0x0 };

loc_101d32544:
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    return r0;

loc_101d321c0:
    if (([r0 isEditing] & 0x1 << 0x0) == 0x0) goto loc_101d3224c;
    goto loc_101d321d0;

loc_101d3224c:
    asm{ ldrsw      x24, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + r24);
    r21 = @selector(toolView);
    r0 = [r0 toolView];
    r29 = 0x40;
    r0 = [r0 retain];
    r23 = r0;
    r20 = @selector(y);
    [r0 y];
    r0 = *(int32_t *)(r19 + r24);
    [r0 y];
    asm{ fadd       d8, d8, d0 };
    [r23 release];
    r0 = [DeviceInfo isiPadUniversal];
    if ((r22 <= 0x2) && ((r0 ^ 0x1) != 0x0)) {
            r0 = *(int32_t *)(r19 + r24);
            r8 = [r0 positionMode];
            r0 = *(int32_t *)(r19 + r24);
            if (r8 == 0x3) {
                    [r0 height];
                    r0 = *(int32_t *)(r19 + r24);
                    r0 = [r0 sightToolbar];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 height];
                    r0 = *(int32_t *)(r19 + r24);
                    [r0 y];
                    asm{ fsub       d1, d8, d9 };
                    asm{ fadd       d8, d1, d0 };
            }
            else {
                    r0 = [r0 toolView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    [r0 y];
                    r0 = *(int32_t *)(r19 + r24);
                    [r0 y];
                    asm{ fadd       d8, d8, d0 };
            }
            [r21 release];
    }
    [r19 getSearchBarHeight];
    asm{ fsub       d8, d8, d0 };
    r0 = *(int32_t *)(r19 + r24);
    if ([r0 isHidden] == 0x0) goto loc_101d32530;
    goto loc_101d323d0;

loc_101d32530:
    r0 = [r19 getTipsHeight];
    asm{ fsub       d0, d8, d0 };
    goto loc_101d32544;

loc_101d323d0:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 == 0x0) goto loc_101d324b8;
    goto loc_101d323ec;

loc_101d324b8:
    asm{ nop         };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 getValueOfProperty:@"tool_view_height" inRuleSet:@"#input_tool_view_tool"];
    r22 = [r0 retain];
    [MMThemeUtil parseFloatFromValues:r22];

loc_101d3251c:
    asm{ fadd       d8, d8, d0 };
    [r22 release];

loc_101d32528:
    [r20 release];
    goto loc_101d32530;

loc_101d323ec:
    r0 = objc_loadWeakRetained(r20);
    r22 = @selector(HasCustomToolBar);
    r24 = [r0 respondsToSelector:r22];
    [r0 release];
    [r21 release];
    if (r24 == 0x0) goto loc_101d324b8;
    r0 = objc_loadWeakRetained(r20);
    r21 = [r0 HasCustomToolBar];
    [r0 release];
    if ((r21 & 0x1 << 0x0) != 0x0) goto loc_101d32530;
    asm{ nop         };
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 getValueOfProperty:@"tool_view_height" inRuleSet:@"#input_tool_view_tool"];
    r22 = [r0 retain];
    [MMThemeUtil parseFloatFromValues:r22];
    goto loc_101d3251c;

loc_101d321d0:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 ShouldShowMultiSelectMode];
    [r0 release];
    if ((r21 & 0x1 << 0x0) == 0x0) goto loc_101d3233c;
    goto loc_101d32200;

loc_101d3233c:
    asm{ ldrsw      x8, [x8, #0xe14] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 y];
    [r19 getSearchBarHeight];
    asm{ fsub       d8, d8, d0 };
    goto loc_101d32530;

loc_101d32200:
    r0 = [r19 view];
    r0 = [r0 retain];
    r20 = r0;
    [r0 height];
    [r19 getSearchBarHeight];
    asm{ fsub       d8, d8, d0 };
    goto loc_101d32528;
}

- (id)getVisibleHeight
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r29 = 0x30;
    0x0 = 0x0 - 0x10;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 respondsToSelector:@selector(onMassSendSendAgain:)];
    [r0 release];
    if (r21 != 0x0) {
            *(int32_t *)r31 = r19;
            *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
            [[0x0 super] getVisibleHeight];
            r0 = [r19 getSearchBarHeight];
            asm{ fsub       d8, d8, d0 };
    }
    else {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r0 toolView];
            r29 = 0x30;
            r0 = [r0 retain];
            r20 = r0;
            [r0 origin];
            [r19 getSearchBarHeight];
            asm{ fsub       d8, d8, d0 };
            r0 = [r20 release];
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return r0;
}

- (void)onTrySHowFirstUnReadButton
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xde8] };
    if (*(int32_t *)(r0 + 0x1039e8000) != 0x0) {
            r0 = [r0 tryShowFirstUnReadButtonAnimated];
    }
    else {
            return;
    }
    return;
}

- (void)tryShowFirstUnReadButtonAnimated
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x130;
    r20 = self;
    r28 = *(int32_t *)__stack_chk_guard;
    r28 = *(int32_t *)r28;
    asm{ stur       x28, [x29, #0xffffffa8] };
    r21 = @selector(m_badRoomLogicController);
    r0 = [self m_badRoomLogicController];
    r29 = 0x50;
    r19 = [r0 retain];
    if (r19 == 0x0) goto loc_101d327bc;
    goto loc_101d32744;

loc_101d327bc:
    [r19 release];

loc_101d327c4:
    asm{ ldrsw      x24, [x8, #0xe34] };
    r0 = *(int32_t *)(r20 + r24);
    if ((r0 != 0x0) && (([r0 isHidden] & 0x1 << 0x0) == 0x0)) goto loc_101d32854;
    goto loc_101d327e4;

loc_101d32854:
    r0 = iConsole;
    r1 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    r8 = @"already show firstUnreadBtn";
    *(int32_t *)r31 = r8;
    asm{ movz       w6, #0x1a20 };

loc_101d3288c:
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    r0 = objc_msgSend(r0, r1);

loc_101d32ed4:
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r28 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;

loc_101d327e4:
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r22 = r20 + 0x1039e8000;
    r19 = objc_loadWeakRetained(r22);
    if (r19 != 0x0) {
            r0 = objc_loadWeakRetained(r22);
            r21 = r0;
            r23 = @selector(getExtraInfo);
            if ([r0 respondsToSelector:r23] != 0x0) {
                    r0 = objc_loadWeakRetained(r22);
                    r22 = r0;
                    r0 = [r0 getExtraInfo];
                    r29 = r29;
                    r27 = [r0 retain];
                    [r22 release];
            }
            else {
                    asm{ movz       x27, #0x0 };
            }
            [r21 release];
    }
    else {
            asm{ movz       x27, #0x0 };
    }
    [r19 release];
    r19 = @selector(objectForKey:);
    r0 = [r27 objectForKey:r2];
    r0 = [r0 retain];
    r22 = r0;
    r21 = @selector(unsignedIntegerValue);
    r0 = [r0 unsignedIntegerValue];
    asm{ ldrsw      x25, [x8, #0xe68] };
    *(int32_t *)(r20 + r25) = r0;
    [r22 release];
    r0 = [r27 objectForKey:r2];
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    [r0 release];
    asm{ movz       w22, #0xa };
    if (r23 != 0x0) {
            r0 = [r27 objectForKey:r2];
            r29 = r29;
            r0 = [r0 retain];
            r22 = [r0 unsignedIntegerValue];
            [r0 release];
    }
    r23 = r20;
    r8 = *(int32_t *)(r23 + r25);
    r19 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    *(int32_t *)(r31 + 0x8) = r8;
    *(int32_t *)r31 = @"unreadcount:%lu";
    asm{ movz       w6, #0x1a2b };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r19);
    r8 = *(int32_t *)(r23 + r25);
    if (r8 < r22) goto loc_101d32ecc;
    goto loc_101d329c4;

loc_101d32ecc:
    r0 = [r27 release];
    goto loc_101d32ed4;

loc_101d329c4:
    asm{ stp        x24, x19, [sp, #0x30] };
    *(int32_t *)(r31 + 0x28) = r25;
    asm{ ldrsw      x19, [x8, #0xd74] };
    r0 = *(int32_t *)(r23 + r19);
    r0 = [r0 indexPathsForVisibleRows];
    *(int32_t *)(r31 + 0x18) = r19;
    *(int32_t *)(r31 + 0x40) = r27;
    r29 = r29;
    r0 = [r0 retain];
    asm{ stp        xzr, xzr, [sp, #0x98] };
    asm{ stp        xzr, xzr, [sp, #0x88] };
    asm{ stp        xzr, xzr, [sp, #0x78] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x58) = r0;
    r26 = [r0 countByEnumeratingWithState:0x68 objects:0xa8 count:STK-1];
    if (r26 == 0x0) goto loc_101d32b88;
    goto loc_101d32a2c;

loc_101d32b88:
    r0 = *(int32_t *)(r31 + 0x58);
    [r0 release];
    asm{ movz       x22, #0x0 };
    *(int32_t *)r31 = @"no visible node";
    asm{ movz       w6, #0x1a44 };
    asm{ ldp        x24, x27, [sp, #0x38] };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r24);
    r28 = *(int32_t *)__stack_chk_guard;
    r28 = *(int32_t *)r28;
    asm{ ldp        x26, x21, [sp, #0x28] };
    r8 = *(int32_t *)(r23 + r26);
    if (r8 >= 0x3e8) {
            asm{ movz       w8, #0x3e7 };
            *(int32_t *)(r23 + r26) = r8;
    }
    r0 = *(int32_t *)(r23 + *(int32_t *)(r31 + 0x18));
    [r0 contentOffset];
    *(int32_t *)(r31 + 0x8) = d1;
    *(int32_t *)r31 = @"show first unread btn. current offset:%f";
    asm{ movz       w6, #0x1a4b };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r24);
    r0 = *(int32_t *)(r23 + r21);
    [r0 removeFromSuperview];
    asm{ nop         };
    r0 = [MMServiceCenter defaultCenter];
    r20 = r23;
    r23 = [r0 retain];
    r2 = [MMLanguageMgr class];
    r0 = [r23 getService:r2];
    r0 = [r0 retain];
    r24 = r0;
    r25 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"FirstUnReadMessage_Button"] retain];
    r8 = *(int32_t *)(r20 + r26);
    *(int32_t *)r31 = r8;
    r19 = [[NSString stringWithFormat:r25] retain];
    [r25 release];
    [r24 release];
    [r23 release];
    r23 = [[r20 view] retain];
    r0 = [FirstUnReadTipView showTipWithDelegate:r20 parentView:r23 content:STK-1];
    r29 = r29;
    r0 = [r0 retain];
    r8 = *(int32_t *)(r20 + r21);
    *(int32_t *)(r20 + r21) = r0;
    [r8 release];
    [r23 release];
    r8 = 0x1039a0000;
    [r20 animateShowFirstUnReadButton];
    [r19 release];

loc_101d32ebc:
    r0 = *(int32_t *)(r31 + 0x58);
    [r0 release];
    [r22 release];
    goto loc_101d32ecc;

loc_101d32a2c:
    r20 = **(int32_t *)(r31 + 0x78);
    r8 = 0x103953000;
    *(int32_t *)(r31 + 0x20) = *(int32_t *)(0x103950000 + 0xa18);
    r9 = 0x103950000;
    r10 = 0x1039a5000;
    r11 = 0x103955000;
    r12 = 0x103954000;
    r24 = 0x1039e8000;

loc_101d32a54:
    asm{ movz       x25, #0x0 };
    r28 = *(int32_t *)(r8 + 0x3f8);
    r19 = *(int32_t *)(r9 + 0xd10);
    r27 = *(int32_t *)(r10 + 0xf28);
    *(int32_t *)(r31 + 0x50) = *(int32_t *)(r11 + 0xa58);
    *(int32_t *)(r31 + 0x48) = *(int32_t *)(r12 + 0x450);

loc_101d32a74:
    if (**(int32_t *)(r31 + 0x78) != r20) {
            r0 = *(int32_t *)(r31 + 0x58);
            objc_enumerationMutation(r0);
    }
    r8 = *(int32_t *)(r31 + 0x70);
    r0 = *(int32_t *)(r8 + r25 * 0x8);
    asm{ ldrsw      x8, [x24, #0xd70] };
    r22 = *(int32_t *)(r23 + r8);
    objc_msgSend(r0, r28);
    r0 = objc_msgSend(r22, r19);
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    if (objc_msgSend(r0, r27) != 0x1) goto loc_101d32b40;
    goto loc_101d32ad0;

loc_101d32b40:
    [r22 release];
    r25 = r25 + 0x1;
    if (r25 < r26) goto loc_101d32a74;
    r26 = objc_msgSend(*(int32_t *)(r31 + 0x58), *(int32_t *)(r31 + 0x20));
    r8 = 0x103953000;
    r9 = 0x103950000;
    r10 = 0x1039a5000;
    r11 = 0x103955000;
    r12 = 0x103954000;
    if (r26 != 0x0) goto loc_101d32a54;
    goto loc_101d32b88;

loc_101d32ad0:
    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x50));
    *(int32_t *)(r31 + 0x60) = r22;
    r29 = r29;
    r0 = [r0 retain];
    r21 = objc_msgSend(r0, *(int32_t *)(r31 + 0x48));
    [r0 release];
    r23 = r23;
    r24 = r24;
    r20 = r20;
    r26 = r26;
    r28 = r28;
    r19 = r19;
    r27 = r27;
    r22 = *(int32_t *)(r31 + 0x60);
    if (r21 != 0x0) goto loc_101d32b94;
    goto loc_101d32b40;

loc_101d32b94:
    r0 = *(int32_t *)(r31 + 0x58);
    [r0 release];
    if (r22 != 0x0) {
            r1 = *(int32_t *)(r31 + 0x50);
            r27 = *(int32_t *)(r31 + 0x40);
            r0 = objc_msgSend(r22, r1);
            r28 = *(int32_t *)__stack_chk_guard;
            r28 = *(int32_t *)r28;
            r24 = *(int32_t *)(r31 + 0x38);
            r21 = r23;
            r29 = r29;
            r0 = [r0 retain];
            r19 = r0;
            r26 = [r0 m_uiCreateTime];
            asm{ ldrsw      x20, [x8, #0xde8] };
            if (r26 < [*(int32_t *)(r21 + r20) m_uiCreateTime]) {
                    [r19 release];
                    *(int32_t *)r31 = @"first unread is already visible";
                    r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                    asm{ movz       w6, #0x1a3f };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(iConsole, r24);
            }
            else {
                    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x50));
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = *(int32_t *)(r31 + 0x48);
                    r26 = objc_msgSend(r0, r23);
                    r23 = objc_msgSend(*(int32_t *)(r21 + r20), r23);
                    [r0 release];
                    [r19 release];
                    COND = r26 >= r23;
                    r23 = r21;
                    asm{ ldp        x26, x21, [sp, #0x28] };
                    if (!COND) {
                            *(int32_t *)r31 = @"first unread is already visible";
                            r8 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                            asm{ movz       w6, #0x1a3f };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            objc_msgSend(iConsole, r24);
                    }
                    else {
                            r8 = *(int32_t *)(r23 + r26);
                            if (r8 >= 0x3e8) {
                                    asm{ movz       w8, #0x3e7 };
                                    *(int32_t *)(r23 + r26) = r8;
                            }
                            r0 = *(int32_t *)(r23 + *(int32_t *)(r31 + 0x18));
                            [r0 contentOffset];
                            *(int32_t *)(r31 + 0x8) = d1;
                            *(int32_t *)r31 = @"show first unread btn. current offset:%f";
                            asm{ movz       w6, #0x1a4b };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            objc_msgSend(iConsole, r24);
                            r0 = *(int32_t *)(r23 + r21);
                            [r0 removeFromSuperview];
                            asm{ nop         };
                            r0 = [MMServiceCenter defaultCenter];
                            r20 = r23;
                            r23 = [r0 retain];
                            r2 = [MMLanguageMgr class];
                            r0 = [r23 getService:r2];
                            r0 = [r0 retain];
                            r24 = r0;
                            r25 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"FirstUnReadMessage_Button"] retain];
                            r8 = *(int32_t *)(r20 + r26);
                            *(int32_t *)r31 = r8;
                            r19 = [[NSString stringWithFormat:r25] retain];
                            [r25 release];
                            [r24 release];
                            [r23 release];
                            r23 = [[r20 view] retain];
                            r0 = [FirstUnReadTipView showTipWithDelegate:r20 parentView:r23 content:STK-1];
                            r29 = r29;
                            r0 = [r0 retain];
                            r8 = *(int32_t *)(r20 + r21);
                            *(int32_t *)(r20 + r21) = r0;
                            [r8 release];
                            [r23 release];
                            r8 = 0x1039a0000;
                            [r20 animateShowFirstUnReadButton];
                            [r19 release];
                    }
            }
    }
    else {
            asm{ movz       x22, #0x0 };
            *(int32_t *)r31 = @"no visible node";
            asm{ movz       w6, #0x1a44 };
            asm{ ldp        x24, x27, [sp, #0x38] };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(iConsole, r24);
            r28 = *(int32_t *)__stack_chk_guard;
            r28 = *(int32_t *)r28;
            asm{ ldp        x26, x21, [sp, #0x28] };
            r8 = *(int32_t *)(r23 + r26);
            if (r8 >= 0x3e8) {
                    asm{ movz       w8, #0x3e7 };
                    *(int32_t *)(r23 + r26) = r8;
            }
            r0 = *(int32_t *)(r23 + *(int32_t *)(r31 + 0x18));
            [r0 contentOffset];
            *(int32_t *)(r31 + 0x8) = d1;
            *(int32_t *)r31 = @"show first unread btn. current offset:%f";
            asm{ movz       w6, #0x1a4b };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(iConsole, r24);
            r0 = *(int32_t *)(r23 + r21);
            [r0 removeFromSuperview];
            asm{ nop         };
            r0 = [MMServiceCenter defaultCenter];
            r20 = r23;
            r23 = [r0 retain];
            r2 = [MMLanguageMgr class];
            r0 = [r23 getService:r2];
            r0 = [r0 retain];
            r24 = r0;
            r25 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"FirstUnReadMessage_Button"] retain];
            r8 = *(int32_t *)(r20 + r26);
            *(int32_t *)r31 = r8;
            r19 = [[NSString stringWithFormat:r25] retain];
            [r25 release];
            [r24 release];
            [r23 release];
            r23 = [[r20 view] retain];
            r0 = [FirstUnReadTipView showTipWithDelegate:r20 parentView:r23 content:STK-1];
            r29 = r29;
            r0 = [r0 retain];
            r8 = *(int32_t *)(r20 + r21);
            *(int32_t *)(r20 + r21) = r0;
            [r8 release];
            [r23 release];
            r8 = 0x1039a0000;
            [r20 animateShowFirstUnReadButton];
            [r19 release];
    }
    goto loc_101d32ebc;

loc_101d32744:
    r0 = objc_msgSend(r20, r21);
    r29 = 0x50;
    r0 = [r0 retain];
    r22 = [r0 hasBadRoomUnread];
    [r0 release];
    [r19 release];
    if (r22 == 0x0) goto loc_101d327c4;
    r0 = iConsole;
    r1 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    r8 = @"don't show firstUnread for badroom";
    *(int32_t *)r31 = r8;
    asm{ movz       w6, #0x1a1b };
    goto loc_101d3288c;
}

- (void)animateShowFirstUnReadButton
{
    asm{ stp        d13, d12, [sp, #0xffffff90]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x30;
    asm{ ldrsw      x23, [x8, #0xe34] };
    r21 = *(int32_t *)(self + r23);
    r0 = [self view];
    r0 = [r0 retain];
    r20 = r0;
    [r0 width];
    asm{ ldrsw      x24, [x8, #0xd74] };
    r0 = *(int32_t *)(self + r24);
    [r0 top];
    r0 = *(int32_t *)(self + r24);
    [r0 contentInset];
    asm{ ldrsw      x8, [x8, #0xdc8] };
    r0 = *(int32_t *)(self + r23);
    [r0 width];
    r0 = *(int32_t *)(self + r23);
    [r0 height];
    asm{ fadd       d0, d9, d10 };
    asm{ fadd       d0, d0, d12 };
    asm{ fmov       d1, #0xf };
    asm{ fadd       d1, d0, d1 };
    [r21 setFrame:r2];
    [r20 release];
    *(int32_t *)(r31 + 0x8) = *(int32_t *)_NSConcreteStackBlock;
    asm{ movz       w8, #0xc200, lsl #16 };
    asm{ stp        w8, wzr, [sp, #0x10] };
    asm{ nop         };
    *(int32_t *)(r31 + 0x18) = 0x101d33210;
    *(int32_t *)(r31 + 0x20) = 0x1032188b0;
    *(int32_t *)(r31 + 0x28) = [self retain];
    asm{ movi.16b   v1, #0x0 };
    asm{ movz       w2, #0x2, lsl #16 };
    asm{ movk       w2, #0x4 };
    asm{ movz       x4, #0x0 };
    [UIView animateWithDuration:r2 delay:0x8 options:STK1 animations:STK0 completion:STK-1];
    r0 = *(int32_t *)(r31 + 0x28);
    r0 = [r0 release];
    0x0 = 0x60 - 0x60;
    asm{ ldp        x29, x30, [sp, #0x60] };
    asm{ ldp        x20, x19, [sp, #0x50] };
    asm{ ldp        x22, x21, [sp, #0x40] };
    asm{ ldp        x24, x23, [sp, #0x30] };
    asm{ ldp        d9, d8, [sp, #0x20] };
    asm{ ldp        d11, d10, [sp, #0x10] };
    asm{ ldp        d13, d12, [sp], #0x70 };
    return;
}

- (void)animateHideFirstUnReadButton
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    *(int32_t *)(r31 + 0xffffffffffffffa0) = @"hide first unread";
    asm{ movz       w6, #0x1a62 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r21 = *(int32_t *)_NSConcreteStackBlock;
    *(int32_t *)(0x38 + r31 + 0xffffffffffffffa0) = r21;
    asm{ movz       w22, #0xc200, lsl #16 };
    asm{ stp        w22, wzr, [sp, #0x40] };
    asm{ nop         };
    *(int32_t *)(0x48 + r31 + 0xffffffffffffffa0) = 0x101d33368;
    *(int32_t *)(0x50 + r31 + 0xffffffffffffffa0) = 0x1032188e0;
    r0 = [self retain];
    *(int32_t *)(0x58 + r31 + 0xffffffffffffffa0) = r0;
    *(int32_t *)(0x10 + r31 + 0xffffffffffffffa0) = r21;
    asm{ stp        w22, wzr, [sp, #0x18] };
    asm{ nop         };
    *(int32_t *)(0x20 + r31 + 0xffffffffffffffa0) = 0x101d333ec;
    *(int32_t *)(0x28 + r31 + 0xffffffffffffffa0) = 0x103218910;
    *(int32_t *)(0x30 + r31 + 0xffffffffffffffa0) = [r0 retain];
    asm{ movi.16b   v1, #0x0 };
    asm{ movz       w2, #0x2, lsl #16 };
    asm{ movk       w2, #0x4 };
    [UIView animateWithDuration:0x2 delay:0x38 options:STK1 animations:STK0 completion:STK-1];
    r0 = *(int32_t *)(0x30 + r31 + 0xffffffffffffffa0);
    [r0 release];
    r0 = *(int32_t *)(0x58 + r31 + 0xffffffffffffffa0);
    r0 = [r0 release];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)updateFirstUnReadButtonOnShowBanner:(id)arg2 
{
    r2 = arg2;
    asm{ stp        d15, d14, [sp, #0xffffff80]! };
    asm{ stp        d13, d12, [sp, #0x10] };
    asm{ stp        d11, d10, [sp, #0x20] };
    asm{ stp        d9, d8, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r19 = self;
    r0 = [self getTipsHeight];
    asm{ fcmp       d0, #0x0 };
    asm{ movi.16b   v0, #0x0 };
    asm{ fcsel      d0, d0, d8, gt };
    asm{ ldrsw      x23, [x8, #0xdc8] };
    *(int32_t *)(r19 + r23) = d0;
    asm{ nop         };
    asm{ ldrsw      x22, [x8, #0xe34] };
    if (*(int32_t *)(r19 + r22) != 0x0) {
            r0 = [r19 view];
            r0 = [r0 retain];
            r20 = r0;
            [r0 width];
            r0 = *(int32_t *)(r19 + r22);
            [r0 width];
            asm{ ldrsw      x24, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + r24);
            [r0 top];
            r0 = *(int32_t *)(r19 + r24);
            [r0 contentInset];
            r0 = *(int32_t *)(r19 + r22);
            [r0 width];
            r0 = *(int32_t *)(r19 + r22);
            [r0 height];
            asm{ fsub       d8, d8, d9 };
            asm{ fadd       d0, d10, d12 };
            asm{ fmov       d1, #0xf };
            asm{ fadd       d0, d0, d1 };
            asm{ fadd       d9, d0, d14 };
            [r20 release];
            r0 = *(int32_t *)(r19 + r22);
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        d9, d8, [sp, #0x30] };
            asm{ ldp        d11, d10, [sp, #0x20] };
            asm{ ldp        d13, d12, [sp, #0x10] };
            asm{ ldp        d15, d14, [sp], #0x80 };
            r0 = [r0 setFrame:r2];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        d9, d8, [sp, #0x30] };
            asm{ ldp        d11, d10, [sp, #0x20] };
            asm{ ldp        d13, d12, [sp, #0x10] };
            asm{ ldp        d15, d14, [sp], #0x80 };
            return;
    }
    return;
}

- (void)tryAddUnReadSplitNode
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    r20 = self;
    r0 = [self getFirstUnReadMessageIndex];
    r21 = r0;
    if (r21 == 0x0) goto loc_101d335fc;
    goto loc_101d335d8;

loc_101d335fc:
    asm{ movz       x19, #0x0 };
    asm{ movz       x21, #0x0 };

loc_101d3365c:
    asm{ ldrsw      x8, [x8, #0xdd8] };
    *(int32_t *)(r20 + 0x1039e8000) = r21;
    asm{ ldrsw      x8, [x8, #0xde8] };
    r2 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r20 addSplitNode:r2 addMoreMsg:0x1];
    r0 = [r0 retain];
    r21 = r0;
    [r0 sectionHeight];
    asm{ ldrsw      x23, [x8, #0xd74] };
    r22 = *(int32_t *)(r20 + r23);
    [r22 contentOffset];
    asm{ fadd       d1, d8, d1 };
    asm{ movi.16b   v0, #0x0 };
    asm{ movz       w2, #0x0 };
    [r22 setContentOffset:r2 animated:0x1];
    r0 = *(int32_t *)(r20 + r23);
    [r0 reloadData];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    r0 = [r19 release];
    return;

loc_101d335d8:
    if (r21 != 0x7fffffffffffffff) goto loc_101d33608;
    goto loc_101d335e4;

loc_101d33608:
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    asm{ movz       x19, #0x0 };
    r0 = [r0 objectAtIndexedSubscript:r21 - 0x1];
    r29 = 0x40;
    r19 = [r0 retain];
    if (r19 != 0x0) {
            asm{ cset       w8, eq };
            r21 = r21 - 0x1039a5000;
    }
    else {
            asm{ movz       x19, #0x0 };
    }
    goto loc_101d3365c;

loc_101d335e4:
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    return;
}

- (void)onScrollToFirstUnReadMsg
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    asm{ ldrsw      x22, [x8, #0xe44] };
    asm{ nop         };
    asm{ ldrsw      x24, [x8, #0xd84] };
    r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    asm{ stp        x8, x9, [sp, #0x8] };
    *(int32_t *)r31 = @"m_needHideFirstUnReadBtn[%d]  m_bReadtToLoadMoreMsg[%d]";
    r21 = "BaseMsgContentViewController.mm";
    asm{ movz       w6, #0x1a90 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r20);
    if ((*(int8_t *)(r19 + r22) != 0x0) || (*(int8_t *)(r19 + r24) != 0x0)) {
            r0 = *(int32_t *)(0x1039c3000 + 0x380);
            *(int32_t *)r31 = @"onScrollToFirstUnReadMsg will fail";
            asm{ movz       w6, #0x1a92 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = objc_msgSend(r0, r20);
            asm{ movz       w0, #0x21 };
            asm{ movz       w3, #0x0 };
            0x0 = 0x30 - 0x30;
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            r0 = loc_1029929b8(r0, 0x3, 0x1, r3, STK-1);
    }
    else {
            [r19 tryAddUnReadSplitNode];
            *(int8_t *)(r19 + r22) = 0x1;
            asm{ ldrsw      x8, [x8, #0xde8] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r19 scrollToFirstUnReadMessage:r2];
            asm{ ldrsw      x8, [x8, #0xe68] };
            *(int32_t *)(r19 + 0x1039e8000) = 0x0;
            0x0 = 0x30 - 0x30;
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)getFirstUnReadSplitNodeIndex
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    r19 = self;
    asm{ ldrsw      x26, [x8, #0xd70] };
    r0 = *(int32_t *)(r19 + r26);
    if ([r0 count] == 0x0) goto loc_101d33920;
    goto loc_101d338b8;

loc_101d33920:
    r20 = 0x7fffffffffffffff;

loc_101d33924:
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return r0;

loc_101d338b8:
    asm{ movz       x20, #0x0 };
    r21 = @selector(objectAtIndexedSubscript:);
    r22 = @selector(modelType);
    r23 = *(int32_t *)(0x103950000 + 0x9a8);

loc_101d338d0:
    r0 = *(int32_t *)(r19 + r26);
    r0 = [r0 objectAtIndexedSubscript:r2];
    r29 = r29;
    r0 = [r0 retain];
    r25 = [r0 modelType];
    [r0 release];
    if (r25 == 0x3) goto loc_101d33924;
    r20 = r20 + 0x1;
    if (r20 < objc_msgSend(*(int32_t *)(r19 + r26), r23)) goto loc_101d338d0;
    goto loc_101d33920;
}

- (id)getFirstUnReadMessageIndex
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r19 = self;
    asm{ ldrsw      x21, [x8, #0xd70] };
    r0 = *(int32_t *)(r19 + r21);
    if ([r0 count] == 0x0) goto loc_101d33a3c;
    goto loc_101d33994;

loc_101d33a3c:
    r20 = 0x7fffffffffffffff;

loc_101d33a40:
    r0 = r20;
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;

loc_101d33994:
    asm{ movz       x20, #0x0 };
    *(int32_t *)(r31 + 0x8) = @selector(objectAtIndexedSubscript:);
    r22 = @selector(messageWrap);
    r23 = @selector(m_uiMesLocalID);
    r24 = *(int32_t *)(0x103950000 + 0x9a8);

loc_101d339b8:
    r0 = *(int32_t *)(r19 + r21);
    r1 = *(int32_t *)(r31 + 0x8);
    r0 = objc_msgSend(r0, r1);
    r0 = [r0 retain];
    r25 = r0;
    r0 = [r0 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r27 = [r0 m_uiMesLocalID];
    asm{ ldrsw      x8, [x8, #0xde8] };
    r28 = [*(int32_t *)(r19 + 0x1039e8000) m_uiMesLocalID];
    [r0 release];
    [r25 release];
    if (r27 == r28) goto loc_101d33a40;
    r20 = r20 + 0x1;
    if (r20 < objc_msgSend(*(int32_t *)(r19 + r21), r24)) goto loc_101d339b8;
    goto loc_101d33a3c;
}

- (void)scrollToFirstUnReadMessage:(id)arg2 
{
    asm{ stp        d11, d10, [sp, #0xffffff80]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r29 = 0x70;
    0x0 = 0x0 - 0x250;
    r26 = self;
    r27 = *(int32_t *)__stack_chk_guard;
    r27 = *(int32_t *)r27;
    asm{ stur       x27, [x29, #0xffffff88] };
    r28 = [arg2 retain];
    asm{ ldrsw      x24, [x8, #0xde8] };
    r8 = *(int32_t *)(r26 + r24);
    r21 = iConsole;
    if (r8 == 0x0) goto loc_101d34080;
    goto loc_101d33ae8;

loc_101d34080:
    r8 = @"no unread msg";
    *(int32_t *)r31 = r8;
    asm{ movz       w6, #0x1ab5 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [r21 logWithLevel:0x4 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];

loc_101d34474:
    r0 = [r28 release];
    asm{ ldur       x8, [x29, #0xffffff88] };
    if (r27 == r8) {
            0x0 = r29 - 0x70;
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        x26, x25, [sp, #0x30] };
            asm{ ldp        x28, x27, [sp, #0x20] };
            asm{ ldp        d9, d8, [sp, #0x10] };
            asm{ ldp        d11, d10, [sp], #0x80 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;

loc_101d33ae8:
    [r28 m_sequenceId];
    r19 = @selector(m_uiCreateTime);
    [r28 m_uiCreateTime];
    r22 = @selector(m_uiMesLocalID);
    [r28 m_uiMesLocalID];
    asm{ stp        x23, x0, [sp, #0x10] };
    r9 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
    asm{ stp        x8, x20, [sp] };
    asm{ movz       w6, #0x1ab8 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [r21 logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r20 = [r26 getFirstUnReadSplitNodeIndex];
    if (r20 != 0x7fffffffffffffff) goto loc_101d340cc;
    goto loc_101d33b8c;

loc_101d340cc:
    asm{ ldrsw      x19, [x8, #0xd74] };
    r0 = *(int32_t *)(r26 + r19);
    [r0 contentInset];
    *(int32_t *)(r31 + 0xc0) = r19;
    asm{ ldrsw      x9, [x8, #0xde4] };
    *(int8_t *)(r26 + r9) = 0x1;
    if (r20 == 0x0) {
            asm{ ldrsw      x9, [x9, #0xe40] };
            *(int8_t *)(r26 + 0x1039e8000) = 0x1;
    }
    r25 = r26;
    asm{ movz       x19, #0x0 };
    asm{ fneg       d8, d0 };
    asm{ ldrsw      x26, [x8, #0xd70] };
    r21 = @selector(count);
    asm{ nop         };
    r20 = @selector(objectAtIndexedSubscript:);
    r22 = @selector(modelType);
    r23 = @selector(sectionHeight);

loc_101d34150:
    if (r19 >= [*(int32_t *)(r25 + r26) count]) goto loc_101d341b4;
    goto loc_101d34164;

loc_101d341b4:
    r0 = *(int32_t *)(r25 + *(int32_t *)(r31 + 0xc0));
    r8 = 0x103959000;
    asm{ movi.16b   v0, #0x0 };
    [r0 setContentOffset:0x1 animated:r3];
    goto loc_101d34474;

loc_101d34164:
    r0 = *(int32_t *)(r25 + r26);
    r0 = [r0 objectAtIndexedSubscript:r2];
    r29 = r29;
    r0 = [r0 retain];
    r24 = r0;
    if ([r0 modelType] == 0x3) goto loc_101d341ac;
    goto loc_101d34190;

loc_101d341ac:
    [r24 release];
    goto loc_101d341b4;

loc_101d34190:
    [r24 sectionHeight];
    asm{ fadd       d8, d8, d0 };
    [r24 release];
    r19 = r19 + 0x1;
    goto loc_101d34150;

loc_101d33b8c:
    asm{ ldrsw      x8, [x8, #0xde4] };
    *(int8_t *)(r26 + 0x1039e8000) = 0x1;
    asm{ ldrsw      x8, [x8, #0xe40] };
    *(int32_t *)(r31 + 0x68) = 0x1039e8000;
    *(int8_t *)(r26 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x25, [x8, #0xd74] };
    r0 = *(int32_t *)(r26 + r25);
    [r0 contentOffset];
    asm{ ldrsw      x8, [x8, #0xd70] };
    r20 = r26 + 0x1039e8000;
    r2 = *(int32_t *)r20;
    if (r2 == 0x0) {
            r0 = [NSMutableArray alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r20;
            *(int32_t *)r20 = r0;
            [r8 release];
            r2 = *(int32_t *)r20;
    }
    r27 = [[r26 getFirstContentMessageNodeFromArray:r2] retain];
    r2 = *(int32_t *)r20;
    *(int32_t *)(r31 + 0x38) = r20;
    r23 = [[r26 getLastContentMessageNodeFromArray:r2] retain];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = objc_loadWeakRetained(r26 + 0x1039e8000);
    r21 = [*(int32_t *)(r26 + r24) modelType];
    r3 = objc_msgSend(*(int32_t *)(r26 + r24), r19) - 0x1;
    r19 = [[r20 GetMessageArrayFrom:r21 createTime:r3] retain];
    [r20 release];
    r0 = [r19 lastObject];
    *(int32_t *)(r31 + 0x50) = r28;
    r29 = 0x70;
    r0 = [r0 retain];
    asm{ ldrsw      x9, [x8, #0xe3c] };
    *(int32_t *)(r31 + 0x70) = 0x1;
    r8 = *(int32_t *)(r26 + 0x1);
    *(int32_t *)(r26 + 0x1) = r0;
    [r8 release];
    asm{ ldrsw      x8, [x8, #0xdd8] };
    *(int32_t *)(r26 + 0x1039e8000) = 0x0;
    asm{ stp        xzr, xzr, [sp, #0x138] };
    asm{ stp        xzr, xzr, [sp, #0x128] };
    asm{ stp        xzr, xzr, [sp, #0x118] };
    asm{ stp        xzr, xzr, [sp, #0x108] };
    r0 = [r19 retain];
    *(int32_t *)(r31 + 0x90) = r0;
    r2 = 0x108;
    r3 = r29 - 0xf8;
    r22 = [r0 countByEnumeratingWithState:r2 objects:r3 count:STK-1];
    asm{ stp        x19, x21, [sp, #0x28] };
    *(int32_t *)(r31 + 0x48) = r25;
    if (r22 == 0x0) goto loc_101d341e0;
    goto loc_101d33d38;

loc_101d341e0:
    *(int32_t *)(r31 + 0x88) = 0x0;
    r19 = r23;

loc_101d341e8:
    r23 = r19;
    *(int32_t *)(r31 + 0x40) = r27;
    r0 = *(int32_t *)(r31 + 0x90);
    [r0 release];
    r19 = *(int32_t *)(r31 + 0x48);
    r0 = *(int32_t *)(r26 + r19);
    r22 = @selector(contentInset);
    [r0 contentInset];
    asm{ fneg       d10, d0 };
    r28 = *(int32_t *)(r31 + 0x50);
    r27 = *(int32_t *)__stack_chk_guard;
    r27 = *(int32_t *)r27;
    if (*(int32_t *)(r31 + 0x88) == 0x0) goto loc_101d343fc;
    goto loc_101d3422c;

loc_101d343fc:
    r0 = *(int32_t *)(r26 + r19);
    [r0 reloadData];
    r0 = *(int32_t *)(r26 + r19);
    asm{ fadd       d1, d8, d10 };
    r8 = 0x103959000;
    asm{ movi.16b   v0, #0x0 };
    asm{ movz       w2, #0x0 };
    [r0 setContentOffset:r2 animated:r3];
    r21 = *(int32_t *)(r26 + r19);
    [r21 contentInset];
    asm{ fneg       d1, d0 };
    asm{ movi.16b   v0, #0x0 };
    [r21 setContentOffset:0x1 animated:r3];
    r0 = *(int32_t *)(r31 + 0x88);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x90);
    [r0 release];
    [r23 release];
    r0 = *(int32_t *)(r31 + 0x40);
    [r0 release];
    goto loc_101d34474;

loc_101d3422c:
    *(int32_t *)(r31 + 0xb0) = r26;
    asm{ stp        xzr, xzr, [sp, #0xf8] };
    asm{ stp        xzr, xzr, [sp, #0xe8] };
    asm{ stp        xzr, xzr, [sp, #0xd8] };
    asm{ stp        xzr, xzr, [sp, #0xc8] };
    r0 = **(int32_t *)(r31 + 0x38);
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0xc0) = r0;
    r2 = 0xc8;
    r3 = 0x148;
    r25 = objc_msgSend(r0, *(int32_t *)(r31 + 0x30));
    *(int32_t *)(r31 + 0xa8) = r22;
    r20 = r23;
    *(int32_t *)(r31 + 0x60) = r20;
    if (r25 == 0x0) goto loc_101d343dc;
    goto loc_101d3427c;

loc_101d343dc:
    r23 = r20;
    r0 = *(int32_t *)(r31 + 0xc0);
    [r0 release];
    asm{ ldp        x19, x28, [sp, #0x48] };
    r27 = *(int32_t *)__stack_chk_guard;
    r27 = *(int32_t *)r27;
    asm{ ldp        x22, x26, [sp, #0xa8] };
    goto loc_101d343fc;

loc_101d3427c:
    r19 = **(int32_t *)(r31 + 0xd8);
    *(int32_t *)(r31 + 0xa0) = *(int32_t *)(0x103950000 + 0xa18);
    r8 = 0x10399f000;
    r9 = 0x103955000;

loc_101d34294:
    asm{ movz       x22, #0x0 };
    r28 = *(int32_t *)(r8 + 0xaa8);
    r26 = *(int32_t *)(r9 + 0xa58);
    r27 = @selector(m_uiMesLocalID);
    *(int32_t *)(r31 + 0xb8) = r27;
    r24 = @selector(m_uiCreateTime);

loc_101d342b4:
    if (**(int32_t *)(r31 + 0xd8) != r19) {
            r0 = *(int32_t *)(r31 + 0xc0);
            objc_enumerationMutation(r0);
    }
    r20 = *(int32_t *)(*(int32_t *)(r31 + 0xd0) + r22 * 0x8);
    objc_msgSend(r20, r28);
    r0 = objc_msgSend(r20, r26);
    r29 = r29;
    r0 = [r0 retain];
    r23 = r0;
    r21 = [r0 m_uiMesLocalID];
    r0 = *(int32_t *)(r31 + 0x88);
    r0 = [r0 m_uiMesLocalID];
    asm{ fadd       d10, d10, d9 };
    if (r21 != r0) goto loc_101d34394;
    goto loc_101d34320;

loc_101d34394:
    [r23 release];

loc_101d3439c:
    r22 = r22 + 0x1;
    r20 = *(int32_t *)(r31 + 0x60);
    if (r22 < r25) goto loc_101d342b4;
    r2 = 0xc8;
    r3 = 0x148;
    r25 = objc_msgSend(*(int32_t *)(r31 + 0xc0), *(int32_t *)(r31 + 0xa0));
    r8 = 0x10399f000;
    r9 = 0x103955000;
    if (r25 != 0x0) goto loc_101d34294;
    goto loc_101d343dc;

loc_101d34320:
    r0 = objc_msgSend(r20, r26);
    r27 = r26;
    r26 = r28;
    r28 = r25;
    r25 = r19;
    r29 = r29;
    r0 = [r0 retain];
    r21 = [r0 m_uiCreateTime];
    r19 = [*(int32_t *)(r31 + 0x88) m_uiCreateTime];
    [r0 release];
    [r23 release];
    COND = r21 != r19;
    r19 = r25;
    r25 = r28;
    r28 = r26;
    r26 = r27;
    r27 = *(int32_t *)(r31 + 0xb8);
    if (COND) goto loc_101d3439c;
    r20 = *(int32_t *)(r31 + 0x60);
    goto loc_101d343dc;

loc_101d33d38:
    *(int32_t *)(r31 + 0x88) = 0x0;
    r21 = **(int32_t *)(r31 + 0x118);
    r8 = *(int32_t *)(0x103950000 + 0xa18);
    *(int32_t *)(r31 + 0x58) = r8;
    *(int32_t *)(r31 + 0x98) = r8;
    r19 = r23;

loc_101d33d54:
    asm{ movz       x28, #0x0 };
    *(int32_t *)(r31 + 0xa8) = @selector(m_uiMessageType);
    *(int32_t *)(r31 + 0xc0) = @selector(m_uiCreateTime);
    *(int32_t *)(r31 + 0xb8) = @selector(messageWrap);
    *(int32_t *)(r31 + 0xb0) = @selector(m_uiMesLocalID);
    *(int32_t *)(r31 + 0x78) = @selector(addMessageNode:layout:addMoreMsg:);
    r23 = r21;

loc_101d33d98:
    if (**(int32_t *)(r31 + 0x118) != r23) {
            r0 = *(int32_t *)(r31 + 0x90);
            objc_enumerationMutation(r0);
    }
    r25 = *(int32_t *)(*(int32_t *)(r31 + 0x110) + r28 * 0x8);
    if (objc_msgSend(r25, *(int32_t *)(r31 + 0xa8)) == 0x2e) goto loc_101d3404c;
    goto loc_101d33dcc;

loc_101d3404c:
    r28 = r28 + 0x1;
    if (r28 < r22) goto loc_101d33d98;
    r21 = r23;
    r2 = 0x108;
    r3 = r29 - 0xf8;
    r22 = objc_msgSend(*(int32_t *)(r31 + 0x90), *(int32_t *)(r31 + 0x58));
    if (r22 != 0x0) goto loc_101d33d54;
    goto loc_101d341e8;

loc_101d33dcc:
    r20 = objc_msgSend(r25, *(int32_t *)(r31 + 0xc0));
    r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
    r29 = r29;
    r0 = [r0 retain];
    r24 = r0;
    if (r20 >= objc_msgSend(r0, *(int32_t *)(r31 + 0xc0))) goto loc_101d33e44;
    goto loc_101d33e04;

loc_101d33e44:
    asm{ movz       w20, #0x0 };

loc_101d33e50:
    r21 = objc_msgSend(r25, *(int32_t *)(r31 + 0xc0));
    r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0xb8));
    *(int32_t *)(r31 + 0xa0) = r20;
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    if (r21 < objc_msgSend(r0, *(int32_t *)(r31 + 0xc0))) {
            r21 = objc_msgSend(r25, *(int32_t *)(r31 + 0xb0));
            r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0xb8));
            *(int32_t *)(r31 + 0x80) = r24;
            r29 = r29;
            r0 = [r0 retain];
            asm{ cset       w21, ls };
            [r0 release];
            r26 = r26;
            r27 = r27;
            r24 = *(int32_t *)(r31 + 0x80);
    }
    else {
            r21 = 0x1;
    }
    [r20 release];
    if (*(int32_t *)(r31 + 0xa0) != 0x0) {
            r0 = *(int32_t *)(r31 + 0x98);
            [r0 release];
            [r24 release];
            if ((r21 & 0x1 << 0x0) == 0x0) {
                    r24 = objc_msgSend(r25, *(int32_t *)(r31 + 0xc0));
                    r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = r0;
                    if (r24 < objc_msgSend(r0, *(int32_t *)(r31 + 0xc0))) {
                            [r20 release];
                            *(int8_t *)(r26 + *(int32_t *)(r31 + 0x68)) = 0x1;
                            r20 = [r25 retain];
                            r0 = *(int32_t *)(r31 + 0x88);
                            [r0 release];
                            *(int32_t *)(r31 + 0x88) = r20;
                            r1 = *(int32_t *)(r31 + 0x78);
                            asm{ movz       w3, #0x0 };
                            objc_msgSend(r26, r1);
                    }
                    else {
                            *(int32_t *)(r31 + 0xa0) = objc_msgSend(r25, *(int32_t *)(r31 + 0xb0));
                            r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
                            r24 = r27;
                            r27 = r19;
                            r19 = r23;
                            r23 = r22;
                            r22 = r26;
                            r29 = r29;
                            r0 = [r0 retain];
                            r21 = r0;
                            r26 = objc_msgSend(r0, *(int32_t *)(r31 + 0xb0));
                            [r21 release];
                            [r20 release];
                            COND = *(int32_t *)(r31 + 0xa0) >= r26;
                            r26 = r22;
                            r22 = r23;
                            r23 = r19;
                            r19 = r27;
                            r27 = r24;
                            if (!COND) {
                                    *(int8_t *)(r26 + *(int32_t *)(r31 + 0x68)) = 0x1;
                                    r20 = [r25 retain];
                                    r0 = *(int32_t *)(r31 + 0x88);
                                    [r0 release];
                                    *(int32_t *)(r31 + 0x88) = r20;
                                    r1 = *(int32_t *)(r31 + 0x78);
                                    asm{ movz       w3, #0x0 };
                                    objc_msgSend(r26, r1);
                            }
                            else {
                                    asm{ movz       w3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    r1 = *(int32_t *)(r31 + 0x78);
                                    objc_msgSend(r26, r1);
                            }
                    }
            }
            else {
                    r8 = *(int32_t *)(r31 + 0x70);
                    r0 = *(int32_t *)(r26 + r8);
                    *(int32_t *)(r26 + r8) = 0x0;
                    [r0 release];
            }
    }
    else {
            [r24 release];
            if (r21 != 0x0) {
                    r8 = *(int32_t *)(r31 + 0x70);
                    r0 = *(int32_t *)(r26 + r8);
                    *(int32_t *)(r26 + r8) = 0x0;
                    [r0 release];
            }
            else {
                    r24 = objc_msgSend(r25, *(int32_t *)(r31 + 0xc0));
                    r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
                    r29 = r29;
                    r0 = [r0 retain];
                    r20 = r0;
                    if (r24 < objc_msgSend(r0, *(int32_t *)(r31 + 0xc0))) {
                            [r20 release];
                            *(int8_t *)(r26 + *(int32_t *)(r31 + 0x68)) = 0x1;
                            r20 = [r25 retain];
                            r0 = *(int32_t *)(r31 + 0x88);
                            [r0 release];
                            *(int32_t *)(r31 + 0x88) = r20;
                            r1 = *(int32_t *)(r31 + 0x78);
                            asm{ movz       w3, #0x0 };
                            objc_msgSend(r26, r1);
                    }
                    else {
                            *(int32_t *)(r31 + 0xa0) = objc_msgSend(r25, *(int32_t *)(r31 + 0xb0));
                            r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
                            r24 = r27;
                            r27 = r19;
                            r19 = r23;
                            r23 = r22;
                            r22 = r26;
                            r29 = r29;
                            r0 = [r0 retain];
                            r21 = r0;
                            r26 = objc_msgSend(r0, *(int32_t *)(r31 + 0xb0));
                            [r21 release];
                            [r20 release];
                            COND = *(int32_t *)(r31 + 0xa0) >= r26;
                            r26 = r22;
                            r22 = r23;
                            r23 = r19;
                            r19 = r27;
                            r27 = r24;
                            if (!COND) {
                                    *(int8_t *)(r26 + *(int32_t *)(r31 + 0x68)) = 0x1;
                                    r20 = [r25 retain];
                                    r0 = *(int32_t *)(r31 + 0x88);
                                    [r0 release];
                                    *(int32_t *)(r31 + 0x88) = r20;
                                    r1 = *(int32_t *)(r31 + 0x78);
                                    asm{ movz       w3, #0x0 };
                                    objc_msgSend(r26, r1);
                            }
                            else {
                                    asm{ movz       w3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    r1 = *(int32_t *)(r31 + 0x78);
                                    objc_msgSend(r26, r1);
                            }
                    }
            }
    }
    goto loc_101d3404c;

loc_101d33e04:
    r20 = objc_msgSend(r25, *(int32_t *)(r31 + 0xb0));
    r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
    r29 = r29;
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x98) = r0;
    if (r20 >= objc_msgSend(r0, *(int32_t *)(r31 + 0xb0))) goto loc_101d33e4c;
    goto loc_101d33e3c;

loc_101d33e4c:
    r20 = 0x1;
    goto loc_101d33e50;

loc_101d33e3c:
    asm{ movz       w21, #0x0 };
    r0 = *(int32_t *)(r31 + 0x98);
    [r0 release];
    [r24 release];
    if ((r21 & 0x1 << 0x0) == 0x0) {
            r24 = objc_msgSend(r25, *(int32_t *)(r31 + 0xc0));
            r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            if (r24 < objc_msgSend(r0, *(int32_t *)(r31 + 0xc0))) {
                    [r20 release];
                    *(int8_t *)(r26 + *(int32_t *)(r31 + 0x68)) = 0x1;
                    r20 = [r25 retain];
                    r0 = *(int32_t *)(r31 + 0x88);
                    [r0 release];
                    *(int32_t *)(r31 + 0x88) = r20;
                    r1 = *(int32_t *)(r31 + 0x78);
                    asm{ movz       w3, #0x0 };
                    objc_msgSend(r26, r1);
            }
            else {
                    *(int32_t *)(r31 + 0xa0) = objc_msgSend(r25, *(int32_t *)(r31 + 0xb0));
                    r0 = objc_msgSend(r27, *(int32_t *)(r31 + 0xb8));
                    r24 = r27;
                    r27 = r19;
                    r19 = r23;
                    r23 = r22;
                    r22 = r26;
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = r0;
                    r26 = objc_msgSend(r0, *(int32_t *)(r31 + 0xb0));
                    [r21 release];
                    [r20 release];
                    COND = *(int32_t *)(r31 + 0xa0) >= r26;
                    r26 = r22;
                    r22 = r23;
                    r23 = r19;
                    r19 = r27;
                    r27 = r24;
                    if (!COND) {
                            *(int8_t *)(r26 + *(int32_t *)(r31 + 0x68)) = 0x1;
                            r20 = [r25 retain];
                            r0 = *(int32_t *)(r31 + 0x88);
                            [r0 release];
                            *(int32_t *)(r31 + 0x88) = r20;
                            r1 = *(int32_t *)(r31 + 0x78);
                            asm{ movz       w3, #0x0 };
                            objc_msgSend(r26, r1);
                    }
                    else {
                            asm{ movz       w3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            r1 = *(int32_t *)(r31 + 0x78);
                            objc_msgSend(r26, r1);
                    }
            }
    }
    else {
            r8 = *(int32_t *)(r31 + 0x70);
            r0 = *(int32_t *)(r26 + r8);
            *(int32_t *)(r26 + r8) = 0x0;
            [r0 release];
    }
    goto loc_101d3404c;
}

- (id)getFirstContentMessageNodeFromArray:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0xe0;
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    asm{ stur       x22, [x29, #0xffffffa8] };
    r0 = [arg2 retain];
    asm{ stp        xzr, xzr, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    r0 = [r0 retain];
    r19 = r0;
    r20 = 0x103950000;
    r21 = [r0 countByEnumeratingWithState:0x18 objects:0x58 count:STK-1];
    if (r21 == 0x0) goto loc_101d347bc;
    goto loc_101d346d0;

loc_101d347bc:
    asm{ movz       x20, #0x0 };

loc_101d347c0:
    [r19 release];
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r22 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = [r20 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d346d0:
    r20 = 0x103950000;
    r28 = **(int32_t *)(r31 + 0x28);
    *(int32_t *)(r31 + 0x10) = *(int32_t *)(r20 + 0xa18);
    r8 = 0x1039a5000;
    r9 = 0x103955000;
    r10 = 0x103954000;

loc_101d346ec:
    asm{ movz       x20, #0x0 };
    r22 = *(int32_t *)(r8 + 0xf28);
    r23 = *(int32_t *)(r9 + 0xa58);
    r24 = *(int32_t *)(r10 + 0x450);

loc_101d346fc:
    if (**(int32_t *)(r31 + 0x28) != r28) {
            objc_enumerationMutation(r19);
    }
    r8 = *(int32_t *)(r31 + 0x20);
    r25 = *(int32_t *)(r8 + r20 * 0x8);
    if (objc_msgSend(r25, r22) != 0x1) goto loc_101d34760;
    goto loc_101d34730;

loc_101d34760:
    r20 = r20 + 0x1;
    if (r20 < r21) goto loc_101d346fc;
    r21 = objc_msgSend(r19, *(int32_t *)(r31 + 0x10));
    r8 = 0x1039a5000;
    r9 = 0x103955000;
    r10 = 0x103954000;
    if (r21 != 0x0) goto loc_101d346ec;
    asm{ movz       x20, #0x0 };

loc_101d347ac:
    r22 = *(int32_t *)__stack_chk_guard;
    r22 = *(int32_t *)r22;
    goto loc_101d347c0;

loc_101d34730:
    r0 = objc_msgSend(r25, r23);
    r29 = r29;
    r0 = [r0 retain];
    r27 = objc_msgSend(r0, r24);
    [r0 release];
    if (r27 != 0x0) goto loc_101d347a0;
    goto loc_101d34760;

loc_101d347a0:
    r20 = [r25 retain];
    goto loc_101d347ac;
}

- (id)getLastContentMessageNodeFromArray:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    r0 = [arg2 retain];
    r19 = r0;
    r20 = [r0 count] - 0x1;
    if ((r20 & 0x1 << 0x3f) != 0x0) goto loc_101d34904;
    goto loc_101d34878;

loc_101d34904:
    asm{ movz       x25, #0x0 };

loc_101d34908:
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r25 autorelease];
    return r0;

loc_101d34878:
    r21 = @selector(objectAtIndex:);
    r22 = @selector(modelType);
    r23 = @selector(messageWrap);
    r24 = @selector(m_uiMesLocalID);

loc_101d34898:
    r0 = [r19 objectAtIndex:r2];
    r29 = r29;
    r0 = [r0 retain];
    r25 = r0;
    if ([r0 modelType] != 0x1) goto loc_101d348f4;
    goto loc_101d348c4;

loc_101d348f4:
    [r25 release];
    r20 = r20 - 0x1;
    if ((r20 & 0x1 << 0x3f) == 0x0) goto loc_101d34898;
    goto loc_101d34904;

loc_101d348c4:
    r0 = [r25 messageWrap];
    r29 = r29;
    r0 = [r0 retain];
    r27 = [r0 m_uiMesLocalID];
    [r0 release];
    if (r27 != 0x0) goto loc_101d34908;
    goto loc_101d348f4;
}

- (void)onTipViewClick:(id)arg2 
{
    r0 = self;
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = r0;
    asm{ ldrsw      x23, [x8, #0xe34] };
    if (*(int32_t *)(r19 + r23) != arg2) goto loc_101d34aa8;
    goto loc_101d34994;

loc_101d34aa8:
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;

loc_101d34994:
    r20 = @selector(m_badRoomLogicController);
    r0 = [r19 m_badRoomLogicController];
    r29 = 0x30;
    r0 = [r0 retain];
    r22 = [r0 m_hasIniitialUnread];
    [r0 release];
    if (r22 == 0x0) goto loc_101d34a98;
    goto loc_101d349d0;

loc_101d34a98:
    r0 = [r19 onScrollToFirstUnReadMsg];
    goto loc_101d34aa8;

loc_101d349d0:
    r0 = *(int32_t *)(r19 + r23);
    asm{ movz       x2, #0x0 };
    [r0 setDelegate:r2];
    asm{ ldrsw      x8, [x8, #0xd84] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x1;
    r0 = [r19 m_badRoomLogicController];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getFirstUnreadMsg];
    r20 = [r0 retain];
    [r21 release];
    if (r20 == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd88] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 startAnimating];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r19 = *(int32_t *)(r19 + 0x1039e8000);
            [r19 contentInset];
            asm{ fneg       d1, d0 };
            asm{ movi.16b   v0, #0x0 };
            [r19 setContentOffset:0x1 animated:r3];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r20 release];
}

- (void)stopLockerTimesup
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xe80] };
    r0 = *(int32_t *)(self + r20);
    [r0 invalidate];
    r0 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = 0x0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r0 release];
    return;
}

- (void)beginLockerTimer
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    [self stopLockerTimesup];
    [IdleTimerUtil SetIdleTimeDisable:0x1];
    asm{ movz       x4, #0x0 };
    asm{ movz       w5, #0x0 };
    r0 = [MMTimer scheduledNoRetainTimerWithTimeInterval:self target:@selector(lockerTimesup) selector:STK1 userInfo:STK0 repeats:STK-1];
    r19 = [r0 retain];
    [self setM_LockerTimer:r19];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)lockerTimesup
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ movz       w2, #0x0 };
    [IdleTimerUtil SetIdleTimeDisable:r2];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [self stopLockerTimesup];
    return;
}

- (void)MenuControllerWillShow:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    asm{ movz       w2, #0x0 };
    r0 = [r0 setCanCancelContentTouches:arg2];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (void)MenuControllerWillHide:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 setCanCancelContentTouches:0x1];
    asm{ movz       x1, #0x0 };
    asm{ ldrsw      x8, [x8, #0xe4c] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = gettimeofday(self + 0x1039e8000, @selector(setCanCancelContentTouches:));
    return;
}

- (void)OnSendMessageOK:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = [arg2 retain];
    r19 = objc_loadWeakRetained(self + 0x1039e8000);
    r22 = [arg2 msgWrap];
    [r21 release];
    r21 = [r22 retain];
    [r19 SendMessageWrap:r21];
    [r21 release];
    [r19 release];
    asm{ ldrsw      x8, [x8, #0xe50] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    *(int32_t *)(self + 0x1039e8000) = 0x0;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r0 release];
    return;
}

- (void)OnSendMessageFail:(id)arg2 WithError:(id)arg3 
{
    asm{ ldrsw      x9, [x8, #0xe50] };
    r8 = *(int32_t *)(self + r9);
    *(int32_t *)(self + r9) = 0x0;
    r0 = [r8 release];
    return;
}

- (void)OnSendMessageCancel:(id)arg2 
{
    asm{ ldrsw      x9, [x8, #0xe50] };
    r8 = *(int32_t *)(self + r9);
    *(int32_t *)(self + r9) = 0x0;
    r0 = [r8 release];
    return;
}

- (void)viewDidLoad
{
    asm{ stp        d11, d10, [sp, #0xffffff80]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    0x0 = 0x0 - 0x80;
    r19 = self;
    *(int32_t *)(r31 + 0x70) = r19;
    *(int32_t *)(r31 + 0x78) = *(int32_t *)0x1039d3c98;
    [[0x70 super] viewDidLoad];
    asm{ ldrsw      x8, [x8, #0xdc8] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    r20 = @selector(defaultCenter);
    r23 = [[MMServiceCenter defaultCenter] retain];
    r21 = @selector(class);
    [MMConfigMgr class];
    r22 = @selector(getService:);
    r0 = [r23 getService:r2];
    r29 = 0x70;
    r0 = [r0 retain];
    r2 = @"SendMsg";
    r25 = [r0 IsShouldSendSignalInScene:r2];
    [r0 release];
    [r23 release];
    if (r25 != 0x0) {
            r20 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            r2 = [*(int32_t *)(0x1039c3000 + 0xcf8) class];
            r0 = [r20 getService:r2];
            r29 = 0x70;
            r0 = [r0 retain];
            r21 = r0;
            r0 = [r0 GetSignalInterval];
            asm{ movz       w8, #0x3e8 };
            asm{ mul        w8, w0, w8 };
            asm{ sxtw       x0, w8 };
            asm{ movz       w1, #0x4e20 };
            sub_1009516a8(r0, @selector(GetSignalInterval));
            [r21 release];
            [r20 release];
    }
    r28 = 0x1039c3000;
    r20 = @selector(sharedApplication);
    r0 = [UIApplication sharedApplication];
    r29 = r29;
    r0 = [r0 retain];
    r22 = r0;
    r21 = @selector(statusBarOrientation);
    if ([r0 statusBarOrientation] < 0x5) {
            r23 = @selector(view);
            r0 = [r19 view];
            r0 = [r0 retain];
            r25 = r0;
            r24 = @selector(width);
            [r0 width];
            r0 = [r19 view];
            r29 = r29;
            r0 = [r0 retain];
            r26 = r0;
            r27 = @selector(height);
            [r0 height];
            [r26 release];
            [r25 release];
            [r22 release];
            asm{ fcmp       d8, d9 };
            if (CPU_FLAGS & P) {
                    r22 = [[r19 view] retain];
                    r0 = [r19 view];
                    r0 = [r0 retain];
                    r25 = r0;
                    [r0 x];
                    r0 = [r19 view];
                    r0 = [r0 retain];
                    r26 = r0;
                    [r0 y];
                    r0 = [r19 view];
                    r0 = [r0 retain];
                    r28 = r0;
                    [r0 height];
                    r0 = [r19 view];
                    r29 = r29;
                    r0 = [r0 retain];
                    r23 = r0;
                    [r0 width];
                    [r22 setFrame:r2];
                    [r23 release];
                    [r28 release];
                    [r26 release];
                    [r25 release];
                    [r22 release];
                    r28 = 0x1039c3000;
            }
    }
    else {
            [r22 release];
    }
    asm{ ldrsw      x8, [x8, #0xe10] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xd80] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    r0 = *(int32_t *)(r28 + 0x840);
    r0 = [r0 sharedApplication];
    r29 = r29;
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 statusBarOrientation];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    *(int32_t *)(r19 + 0x1039e8000) = r0;
    [r20 release];
    asm{ ldrsw      x8, [x8, #0xd7c] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x1;
    asm{ ldrsw      x8, [x8, #0xe00] };
    if (*(int8_t *)(r19 + 0x1039e8000) != 0x0) {
            r21 = 0x1039c3000;
            asm{ movz       x2, #0x0 };
            asm{ movz       x3, #0x0 };
            [UIView beginAnimations:r2 context:r3];
            asm{ movi.16b   v0, #0x0 };
            [UIView setAnimationDuration:r2];
            [r19 initToolView];
            [r19 initMultiSelectToolView];
            asm{ ldrsw      x23, [x8, #0xdd4] };
            r0 = *(int32_t *)(r19 + r23);
            asm{ nop         };
            asm{ ldrsw      x8, [x8, #0xe84] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            [r0 setKeyboardHeight:r2];
            r0 = *(int32_t *)(r19 + r23);
            asm{ ldrsw      x22, [x8, #0xe88] };
            r2 = *(int32_t *)(r19 + r22);
            [r0 setText:r2];
            r0 = *(int32_t *)(r19 + r23);
            asm{ ldrsw      x8, [x8, #0xe8c] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ movz       w3, #0x0 };
            [r0 setInputMode:r2 animated:r3];
            r0 = *(int32_t *)(r19 + r23);
            asm{ ldrsw      x8, [x8, #0xe90] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ movz       w3, #0x0 };
            [r0 setPoisitionMode:r2 animated:r3];
            r0 = *(int32_t *)(r19 + r23);
            asm{ ldrsw      x8, [x8, #0xe94] };
            r2 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ movz       w3, #0x0 };
            [r0 setContentMode:r2 animated:r3];
            r0 = *(int32_t *)(r19 + r23);
            asm{ ldrsw      x8, [x8, #0xe98] };
            [r0 setFKeyboardAnimationDuration:r2];
            [r19 initTableView];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ ldrsw      x8, [x8, #0xe9c] };
            asm{ ldp        d0, d1, [x8] };
            [r0 setContentOffset:r2];
            r0 = [r19 view];
            r29 = r29;
            r0 = [r0 retain];
            r20 = r0;
            r2 = *(int32_t *)(r19 + r23);
            [r0 bringSubviewToFront:r2];
            [r20 release];
            asm{ movz       x3, #0x0 };
            sub_100a60a28(0x40);
            asm{ movz       w2, #0x0 };
            [r19 scrollTableToBottomAnimated:"scrollTableToBottomAnimated" init:0x1];
            sub_100a60a58(0x40);
            [UIView commitAnimations];
            r0 = *(int32_t *)(r19 + r22);
            *(int32_t *)(r19 + r22) = 0x0;
            [r0 release];
    }
    else {
            asm{ movz       x3, #0x0 };
            sub_100a60a28(0x40);
            [r19 initData];
            sub_100a60a58(0x40);
            asm{ movz       x3, #0x0 };
            sub_100a60a28(0x10);
            [r19 initView];
            sub_100a60a58(0x10);
            sub_100a60a98(0x10);
    }
    sub_100a60a98(0x40);
    r0 = [DeviceInfo hasForceTouchCapability:r19];
    if (r0 != 0x0) {
            asm{ ldrsw      x21, [x8, #0xe74] };
            if (*(int32_t *)(r19 + r21) != 0x0) {
                    r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
                    *(int32_t *)r31 = @"3D Touch already register but need to unregisterForPreviewing";
                    asm{ movz       w6, #0x1bb0 };
                    asm{ movz       x3, #0x0 };
                    asm{ movz       w4, #0x0 };
                    objc_msgSend(iConsole, r20);
                    r2 = *(int32_t *)(r19 + r21);
                    [r19 unregisterForPreviewingWithContext:r2];
            }
            else {
                    r20 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
            }
            *(int32_t *)r31 = @"3D Touch registerForPreviewing";
            asm{ movz       w6, #0x1bb3 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(iConsole, r20);
            asm{ ldrsw      x8, [x8, #0xd74] };
            r3 = *(int32_t *)(r19 + 0x1039e8000);
            r0 = [r19 registerForPreviewingWithDelegate:r19 sourceView:r3];
            r29 = r29;
            r0 = [r0 retain];
            r8 = *(int32_t *)(r19 + r21);
            *(int32_t *)(r19 + r21) = r0;
            r0 = [r8 release];
    }
    0x0 = r29 - 0x70;
    asm{ ldp        x29, x30, [sp, #0x70] };
    asm{ ldp        x20, x19, [sp, #0x60] };
    asm{ ldp        x22, x21, [sp, #0x50] };
    asm{ ldp        x24, x23, [sp, #0x40] };
    asm{ ldp        x26, x25, [sp, #0x30] };
    asm{ ldp        x28, x27, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x80 };
    return;
}

- (void)resetToolView
{
    r0 = [self initToolView];
    return;
}

- (void)dealloc
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    asm{ ldrsw      x20, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + r20);
    r0 = [r0 panGestureRecognizer];
    r0 = [r0 retain];
    r21 = r0;
    [r0 removeTarget:r19 action:@selector(onPan:)];
    [r21 release];
    r0 = *(int32_t *)(r19 + r20);
    asm{ movz       x2, #0x0 };
    [r0 setDelegate:r19];
    r0 = *(int32_t *)(r19 + r20);
    asm{ movz       x2, #0x0 };
    [r0 setDataSource:r19];
    r0 = *(int32_t *)(r19 + r20);
    asm{ movz       x2, #0x0 };
    [r0 setM_delegate:r19];
    asm{ movz       x2, #0x0 };
    [r19 setGesture:r19];
    asm{ movz       w2, #0x185 };
    [CAppUtil removeMessageObserverListItem:r19 andValue:r19];
    asm{ movz       w2, #0x186 };
    [CAppUtil removeMessageObserverListItem:r19 andValue:r19];
    r20 = @selector(defaultCenter);
    r24 = [[MMServiceCenter defaultCenter] retain];
    r21 = @selector(class);
    [MMExtensionCenter class];
    r22 = @selector(getService:);
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r23 = @selector(getExtension:);
    r0 = [r0 getExtension:r2];
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = 0x50;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r1 = r23;
    r0 = objc_msgSend(r0, r1);
    r29 = r29;
    r21 = [r0 retain];
    [r22 release];
    [r24 release];
    if (r21 != 0x0) {
            r1 = @selector(unregisterExtension:);
            [r21 unregisterExtension:r2];
    }
    [r21 release];
    asm{ ldrsw      x8, [x8, #0xda0] };
    asm{ movz       x1, #0x0 };
    objc_storeWeak(r19 + 0x1039e8000, r1);
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r22 = r0;
    r3 = **(int32_t *)UIMenuControllerWillShowMenuNotification;
    asm{ movz       x4, #0x0 };
    [r0 removeObserver:r19 name:r3 object:STK-1];
    [r22 release];
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r22 = r0;
    r3 = **(int32_t *)UIMenuControllerWillHideMenuNotification;
    asm{ movz       x4, #0x0 };
    [r0 removeObserver:r19 name:r3 object:STK-1];
    [r22 release];
    [r19 stopLockerTimesup];
    [r19 removeAllObjectsFromMessageNodeDatas];
    [r19 resetMsgSearchHelper];
    asm{ ldrsw      x8, [x8, #0xe20] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 removeAllObjects];
    asm{ ldrsw      x8, [x8, #0xe34] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 removeFromSuperview];
    *(int32_t *)(r31 + 0x10) = r19;
    *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d3c98;
    r0 = [[0x10 super] dealloc];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (id)init
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = self;
    *(int32_t *)(0x8 + r31 + 0xfffffffffffffff0) = *(int32_t *)0x1039d3c98;
    asm{ movz       x24, #0x0 };
    r19 = [[0x0 super] init];
    if (r19 != 0x0) {
            r20 = @selector(defaultCenter);
            r24 = [[MMServiceCenter defaultCenter] retain];
            r21 = @selector(class);
            [MMExtensionCenter class];
            r22 = @selector(getService:);
            r0 = [r24 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            r23 = @selector(getExtension:);
            r0 = [r0 getExtension:r2];
            r29 = 0x50;
            r25 = [r0 retain];
            [r26 release];
            [r24 release];
            if (r25 != 0x0) {
                    [r25 registerExtension:r19];
            }
            [r25 release];
            r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r24 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r25 = [r0 retain];
            [r26 release];
            [r24 release];
            if (r25 != 0x0) {
                    [r25 registerExtension:r19];
            }
            [r25 release];
            r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r24 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r25 = [r0 retain];
            [r26 release];
            [r24 release];
            if (r25 != 0x0) {
                    [r25 registerExtension:r19];
            }
            [r25 release];
            r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r24 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r25 = [r0 retain];
            [r26 release];
            [r24 release];
            if (r25 != 0x0) {
                    [r25 registerExtension:r19];
            }
            [r25 release];
            r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r24 getService:r2];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r25 = [r0 retain];
            [r26 release];
            [r24 release];
            if (r25 != 0x0) {
                    [r25 registerExtension:r19];
            }
            [r25 release];
            r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
            [*(int32_t *)(0x1039c3000 + 0x498) class];
            r0 = [r24 getService:r2];
            r0 = [r0 retain];
            r22 = r0;
            r2 = @protocol(IdleTimerUtilExt);
            r0 = [r0 getExtension:r2];
            r29 = r29;
            r21 = [r0 retain];
            [r22 release];
            [r24 release];
            if (r21 != 0x0) {
                    r2 = r19;
                    [r21 registerExtension:r2];
            }
            [r21 release];
            asm{ movz       w2, #0x186 };
            [CAppUtil addMessageObserverListItem:r2 andValue:r19];
            asm{ movz       w2, #0x185 };
            [CAppUtil addMessageObserverListItem:r2 andValue:r19];
            asm{ ldrsw      x8, [x8, #0xe00] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            asm{ ldrsw      x8, [x8, #0xea0] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
            asm{ nop         };
            asm{ ldrsw      x8, [x8, #0x86c] };
            *(int8_t *)(r19 + 0x1039ef000) = 0x1;
            asm{ ldrsw      x8, [x8, #0xea4] };
            *(int32_t *)(r19 + 0x1039e8000) = 0x0;
            asm{ ldrsw      x8, [x8, #0xe70] };
            *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    }
    r0 = r19;
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return r0;
}

- (void)Reset
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r19 = self;
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"reset";
    asm{ movz       w6, #0x1bf5 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r20 = @selector(defaultCenter);
    r24 = [[MMServiceCenter defaultCenter] retain];
    r21 = @selector(class);
    [MMExtensionCenter class];
    r22 = @selector(getService:);
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r23 = @selector(getExtension:);
    r0 = [r0 getExtension:r2];
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = 0x50;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 unregisterExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r21 = [r0 retain];
    [r22 release];
    [r24 release];
    if (r21 != 0x0) {
            [r21 unregisterExtension:r19];
    }
    [r21 release];
    [NSObject safeCancelPreviousPerformRequestsWithTarget:r19];
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 Reset];
    asm{ ldrsw      x8, [x8, #0xe00] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x23, [x8, #0xe44] };
    *(int8_t *)(r19 + r23) = 0x0;
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0xe64] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xdf0] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xdec] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    [r19 lockerTimesup];
    asm{ movz       w2, #0x0 };
    [r19 hideToolViewAnimated:r19];
    [r19 removeAllObjectsFromMessageNodeDatas];
    asm{ ldrsw      x22, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + r22);
    asm{ movz       x2, #0x0 };
    [r0 setDelegate:r19];
    r0 = *(int32_t *)(r19 + r22);
    asm{ movz       x2, #0x0 };
    [r0 setDataSource:r19];
    r0 = *(int32_t *)(r19 + r22);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(r19 + r22);
    *(int32_t *)(r19 + r22) = 0x0;
    [r0 release];
    [r19 resetMsgSearchHelper];
    asm{ ldrsw      x8, [x8, #0xdd0] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x22, [x8, #0xdb8] };
    r0 = *(int32_t *)(r19 + r22);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(r19 + r22);
    *(int32_t *)(r19 + r22) = 0x0;
    [r0 release];
    asm{ ldrsw      x22, [x8, #0xdb0] };
    r0 = *(int32_t *)(r19 + r22);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(r19 + r22);
    *(int32_t *)(r19 + r22) = 0x0;
    [r0 release];
    asm{ ldrsw      x8, [x8, #0xdcc] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x22, [x8, #0xdb4] };
    r0 = *(int32_t *)(r19 + r22);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(r19 + r22);
    *(int32_t *)(r19 + r22) = 0x0;
    [r0 release];
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r22 = r0;
    r3 = **(int32_t *)UIMenuControllerWillShowMenuNotification;
    asm{ movz       x4, #0x0 };
    [r0 removeObserver:r19 name:r3 object:STK-1];
    [r22 release];
    r0 = [NSNotificationCenter defaultCenter];
    r0 = [r0 retain];
    r20 = r0;
    r3 = **(int32_t *)UIMenuControllerWillHideMenuNotification;
    asm{ movz       x4, #0x0 };
    [r0 removeObserver:r19 name:r3 object:STK-1];
    [r20 release];
    asm{ ldrsw      x8, [x8, #0xe34] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r0 = [r0 setHidden:0x1];
    asm{ ldrsw      x8, [x8, #0xd84] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    *(int8_t *)(r19 + r23) = 0x0;
    asm{ ldrsw      x8, [x8, #0xdc8] };
    *(int32_t *)(r19 + 0x1039e8000) = 0x0;
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)ReloadView
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x1c0;
    r19 = self;
    r20 = @selector(defaultCenter);
    r24 = [[MMServiceCenter defaultCenter] retain];
    r21 = @selector(class);
    [MMExtensionCenter class];
    r22 = @selector(getService:);
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r23 = @selector(getExtension:);
    r0 = [r0 getExtension:r2];
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 registerExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = 0x50;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 registerExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 registerExtension:r19];
    }
    [r25 release];
    r24 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r24 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r25 = [r0 retain];
    [r26 release];
    [r24 release];
    if (r25 != 0x0) {
            [r25 registerExtension:r19];
    }
    [r25 release];
    r20 = [[*(int32_t *)(0x1039c3000 + 0x310) defaultCenter] retain];
    [*(int32_t *)(0x1039c3000 + 0x498) class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r2 = @protocol(BannerToastExt);
    r0 = [r0 getExtension:r2];
    r29 = r29;
    r21 = [r0 retain];
    [r22 release];
    [r20 release];
    if (r21 != 0x0) {
            r2 = r19;
            [r21 registerExtension:r2];
    }
    [r21 release];
    [r19 initData];
    asm{ ldrsw      x8, [x8, #0xe10] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xd80] };
    *(int8_t *)(r19 + 0x1039e8000) = 0x0;
    [r19 initToolEmoticonView];
    asm{ movz       w2, #0x0 };
    [r19 ScrollToBottomAnimated:r2];
    asm{ movz       x3, #0x0 };
    sub_100a60a28(r29 - 0x80);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(r29 - 0xb0);
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = r19 + 0x1039e8000;
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(ViewWillInit);
            asm{ nop         };
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    [r0 ViewWillInit];
                    [r21 release];
            }
    }
    sub_100a60a58(r29 - 0xb0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(r29 - 0xe0);
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(CustomToolViewEX:);
            asm{ nop         };
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r21 = r0;
                    asm{ ldrsw      x8, [x8, #0xdd4] };
                    [r0 CustomToolViewEX:r2];
                    [r21 release];
            }
    }
    sub_100a60a58(r29 - 0xe0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x100);
    [r19 reloadBackgroundView];
    sub_100a60a58(0x100);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0xd0);
    [r19 initTableView];
    sub_100a60a58(0xd0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0xa0);
    [r19 initNavigationView];
    sub_100a60a58(0xa0);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x70);
    asm{ movz       x2, #0x0 };
    [r19 updateTitleView:"updateTitleView"];
    sub_100a60a58(0x70);
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x40);
    r21 = objc_loadWeakRetained(r20);
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r22 = @selector(ViewDidInit);
            r24 = [r0 respondsToSelector:r22];
            [r0 release];
            [r21 release];
            if (r24 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r20 = r0;
                    [r0 ViewDidInit];
                    [r20 release];
            }
    }
    sub_100a60a58(0x40);
    r0 = [r19 view];
    r0 = [r0 retain];
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r2 = *(int32_t *)(r19 + 0x1039e8000);
    [r0 bringSubviewToFront:r2];
    [r20 release];
    asm{ movz       x3, #0x0 };
    sub_100a60a28(0x10);
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r19 + 0x1039e8000);
    asm{ movi.16b   v0, #0x0 };
    [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    asm{ movz       w2, #0x0 };
    [r19 scrollTableToBottomAnimated:r2 init:0x1];
    sub_100a60a58(0x10);
    sub_100a60a58(r29 - 0x80);
    sub_100a60a98(0x10);
    sub_100a60a98(0x40);
    sub_100a60a98(0x70);
    sub_100a60a98(0xa0);
    sub_100a60a98(0xd0);
    sub_100a60a98(0x100);
    sub_100a60a98(r29 - 0xe0);
    sub_100a60a98(r29 - 0xb0);
    r0 = sub_100a60a98(r29 - 0x80);
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    return;
}

- (void)onDeleteAllMsg
{
    r0 = [self animateHideFirstUnReadButton];
    return;
}

- (void)hideToolViewAnimated:(id)arg2 
{
    asm{ ldrsw      x8, [x8, #0xe64] };
    *(int8_t *)(self + 0x1039e8000) = 0x0;
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 hideToolView:arg2];
    return;
}

- (void)adjustDeleteViewRect
{
    asm{ stp        d11, d10, [sp, #0xffffffb0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    [UiUtil screenHeightCurOri];
    r0 = [self navigationController];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 navigationBar];
    r0 = [r0 retain];
    r21 = r0;
    [r0 frame];
    [UiUtil navigationBarHeightCurOri];
    [UiUtil screenWidthCurOri];
    asm{ fsub       d0, d8, d10 };
    asm{ fsub       d8, d0, d11 };
    [r21 release];
    [r20 release];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 isEditing];
    asm{ fadd       d0, d8, d0 };
    asm{ fcsel      d1, d0, d8, ne };
    asm{ ldrsw      x8, [x8, #0xe58] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    asm{ movi.16b   v0, #0x0 };
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x50 };
    r0 = [r0 setFrame:r2];
    return;
}

- (void)adjustViewAndNavBarRect
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    *(int32_t *)(r31 + 0x10) = r19;
    *(int32_t *)(r31 + 0x18) = *(int32_t *)0x1039d3c98;
    [[0x10 super] adjustViewAndNavBarRect];
    r0 = [UIApplication sharedApplication];
    r0 = [r0 retain];
    r23 = r0;
    [r0 statusBarOrientation];
    asm{ stp        x8, x0, [sp] };
    asm{ movz       w6, #0x1c7b };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    [r23 release];
    r0 = [UIApplication sharedApplication];
    r29 = 0x30;
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 statusBarOrientation];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r8 = *(int32_t *)(r19 + 0x1039e8000);
    if ((r0 != r8) && (r8 <= 0x2)) goto loc_101d37218;
    goto loc_101d3727c;

loc_101d37218:
    r21 = [DeviceInfo isiPadUniversal];
    r0 = [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) goto loc_101d37284;
    goto loc_101d3723c;

loc_101d37284:
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;

loc_101d3723c:
    r0 = [r19 view];
    r29 = 0x30;
    r20 = [r0 retain];
    [r19 getVisibleHeightOri:0x1];
    [r20 setHeight:0x1];

loc_101d3727c:
    r0 = [r20 release];
    goto loc_101d37284;
}

- (void)onTopBarFrameChanged
{
    r0 = self;
    return;
}

- (void)updateToolViewOrigin
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    r0 = [UiUtil isStatusBarLandscape];
    r2 = 0x1;
    if (r0 != 0x0) {
            asm{ csel       x2, x9, x8, ne };
    }
    *(int32_t *)r31 = r19;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
    r0 = [[0x0 super] getVisibleHeightOri:r2];
    asm{ ldrsw      x22, [x8, #0xe14] };
    if (*(int32_t *)(r19 + r22) != 0x0) {
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            r21 = [r0 isEditing];
            r20 = *(int32_t *)(r19 + r22);
            [r20 origin];
            if (r21 != 0x0) {
                    r0 = *(int32_t *)(r19 + r22);
                    [r0 height];
                    asm{ fsub       d1, d8, d0 };
                    r1 = @selector(setOrigin:);
                    r0 = r20;
            }
            else {
                    r1 = @selector(setOrigin:);
                    r0 = r20;
            }
            r0 = objc_msgSend(r0, r1);
    }
    0x0 = 0x30 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x40 };
    return;
}

- (void)PreviewAppNode:(id)arg2 MsgWrap:(id)arg3 Pop:(id)arg4 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x390;
    r28 = r4;
    *(int32_t *)(r31 + 0x60) = self;
    r27 = *(int32_t *)__stack_chk_guard;
    r27 = *(int32_t *)r27;
    asm{ stur       x27, [x29, #0xffffffa8] };
    r22 = [arg2 retain];
    r0 = [arg3 retain];
    r20 = r0;
    r24 = [r0 GetPreviewType];
    [@"" retain];
    r26 = @selector(m_nsTitle);
    r0 = [r20 m_nsTitle];
    r0 = [r0 retain];
    r23 = @selector(length);
    r21 = [r0 length];
    [r0 release];
    if (r21 == 0x0) goto loc_101d374c4;
    goto loc_101d37498;

loc_101d374c4:
    asm{ movz       x19, #0x0 };
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [ClassMethodDispatchCenter class];
    r0 = [r19 getService:r2];
    *(int32_t *)(r31 + 0x58) = r20;
    r21 = [r0 retain];
    [r19 release];
    r25 = 0x103957000;
    r0 = [r21 getClsMethodObservers:@protocol(IAppMsgPathMgr) selector:@selector(GetPathOfAppDataByUserName:andMessageWrap:retStrPath:)];
    *(int32_t *)(r31 + 0x48) = r23;
    r29 = 0x50;
    r0 = [r0 retain];
    asm{ stp        xzr, xzr, [sp, #0x178] };
    asm{ stp        xzr, xzr, [sp, #0x168] };
    asm{ stp        xzr, xzr, [sp, #0x158] };
    asm{ stp        xzr, xzr, [sp, #0x148] };
    r0 = [r0 retain];
    r27 = r0;
    r19 = [r0 countByEnumeratingWithState:0x148 objects:r29 - 0xd8 count:STK-1];
    if (r19 == 0x0) goto loc_101d37658;
    goto loc_101d3758c;

loc_101d37658:
    asm{ movz       x19, #0x0 };
    r20 = *(int32_t *)(r31 + 0x58);

loc_101d37664:
    [r27 release];
    [r27 release];
    [r21 release];
    r0 = [r19 lastPathComponent];
    r27 = *(int32_t *)__stack_chk_guard;
    r27 = *(int32_t *)r27;
    r29 = r29;
    r21 = [r0 retain];
    [@"" release];
    r0 = r19;

loc_101d376b4:
    [r0 release];
    r8 = r24;
    if (r24 <= 0xd) {
            asm{ nop         };
            asm{ ldrsw      x8, [x9, x8, lsl #2] };
            asm{ br         x8 };
            r0 = [AppDetailViewController alloc];
            r23 = [r0 init];
            [r23 setM_nsUsrName:r22];
            [r23 setM_wrapMsg:r20];
            [r23 setTitle:r21];
            r0 = *(int32_t *)(r31 + 0x60);
            r0 = [r0 navigationController];
            r29 = r29;
            r0 = [r0 retain];
            r19 = r0;
            r8 = 0x103950000;
            [r0 PushViewController:r23 animated:r28 ^ 0x1];
            [r19 release];
            [r23 release];
    }
    [r21 release];
    [r20 release];
    r0 = [r22 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r27 == r8) {
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;

loc_101d3758c:
    r20 = 0x103950000;
    *(int32_t *)(r31 + 0x40) = r21;
    *(int32_t *)(r31 + 0x50) = r22;
    r23 = **(int32_t *)(r31 + 0x158);
    *(int32_t *)(r31 + 0x38) = *(int32_t *)(r20 + 0xa18);

loc_101d375a4:
    asm{ movz       x20, #0x0 };
    r22 = *(int32_t *)(r25 + 0xdc8);
    r21 = r25;

loc_101d375b0:
    if (**(int32_t *)(r31 + 0x158) != r23) {
            objc_enumerationMutation(r27);
    }
    r25 = NSClassFromString(*(int32_t *)(*(int32_t *)(r31 + 0x150) + r20 * 0x8));
    if (class_getClassMethod(r25, r22) != 0x0) goto loc_101d37624;
    goto loc_101d375e8;

loc_101d37624:
    *(int32_t *)(r31 + 0x140) = 0x0;
    asm{ ldp        x22, x20, [sp, #0x50] };
    objc_msgSend(r25, r22);
    r19 = [*(int32_t *)(r31 + 0x140) retain];

loc_101d37650:
    asm{ ldp        x21, x23, [sp, #0x40] };
    goto loc_101d37664;

loc_101d375e8:
    r20 = r20 + 0x1;
    if (r20 < r19) goto loc_101d375b0;
    r19 = objc_msgSend(r27, *(int32_t *)(r31 + 0x38));
    r25 = r21;
    if (r19 != 0x0) goto loc_101d375a4;
    asm{ movz       x19, #0x0 };
    asm{ ldp        x22, x20, [sp, #0x50] };
    goto loc_101d37650;

loc_101d37498:
    r0 = [r20 m_nsTitle];
    r29 = 0x50;
    r21 = [r0 retain];
    r0 = @"";
    goto loc_101d376b4;
}

- (id)preferredInterfaceOrientationForPresentation
{
    return 0x1;
}

- (void)OnAppDataPreview:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = [arg2 retain];
    [self PreviewAppNode:r19 MsgWrap:arg3 Pop:STK-1];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (id)documentInteractionControllerViewControllerForPreview:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    r0 = [self navigationController];
    r0 = [r0 retain];
    asm{ ldp        x29, x30, [sp], #0x10 };
    r0 = [r0 autorelease];
    return r0;
}

- (void)OnMsgDownloadThumbOK:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x50;
    r26 = [arg2 retain];
    r27 = [arg3 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = [r0 isEqualToString:r26];
    [r0 release];
    [r19 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            *(int32_t *)(r31 + 0x48) = @selector(defaultCenter);
            r19 = [[MMServiceCenter defaultCenter] retain];
            *(int32_t *)(r31 + 0x40) = @selector(class);
            r2 = [LazyExtensionAgent class];
            *(int32_t *)(r31 + 0x38) = @selector(getService:);
            r20 = [[r19 getService:r2] retain];
            asm{ nop         };
            *(int32_t *)(r31 + 0x30) = @selector(m_uiMesLocalID);
            r2 = [r27 m_uiMesLocalID];
            *(int32_t *)(r31 + 0x28) = @selector(numberWithUnsignedInt:);
            r0 = [NSNumber numberWithUnsignedInt:r2];
            r22 = [r0 retain];
            *(int32_t *)(r31 + 0x10) = @selector(ensureLazyListenerInitedForExtension:withSelector:forKey:);
            [r20 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:@selector(onMessageUpdateStatus) forKey:STK-1];
            [r22 release];
            [r20 release];
            [r19 release];
            r19 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48)) retain];
            objc_msgSend(MMExtensionCenter, *(int32_t *)(r31 + 0x40));
            r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x38));
            r0 = [r0 retain];
            r20 = r0;
            *(int32_t *)(r31 + 0x8) = @selector(getExtension:);
            r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
            r29 = 0x50;
            r21 = [r0 retain];
            [r20 release];
            [r19 release];
            if (r21 != 0x0) {
                    objc_msgSend(r27, *(int32_t *)(r31 + 0x30));
                    r0 = objc_msgSend(NSNumber, *(int32_t *)(r31 + 0x28));
                    asm{ stp        x27, x26, [sp, #0x18] };
                    r20 = [r0 retain];
                    r8 = 0x103953000;
                    *(int32_t *)r31 = r21;
                    r0 = [r21 getKeyExtensionList:r20];
                    r29 = r29;
                    r19 = [r0 retain];
                    [r20 release];
                    asm{ movz       w8, #0x0 };
                    r20 = @selector(count);
                    asm{ nop         };
                    r26 = @selector(objectAtIndex:);
                    r27 = @selector(m_deleteMark);
                    asm{ nop         };
                    r21 = @selector(getObject);
                    r22 = *(int32_t *)(0x1039a0000 + 0x208);
                    r23 = @selector(respondsToSelector:);
                    do {
                            r24 = r8;
                            if (r24 >= [r19 count]) {
                                break;
                            }
                            r0 = [r19 objectAtIndex:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r25 = r0;
                            if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                    r0 = [r25 getObject];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r28 = r0;
                                    if ([r0 respondsToSelector:r2] != 0x0) {
                                            objc_msgSend(r28, r22);
                                    }
                                    [r28 release];
                            }
                            [r25 release];
                            r8 = r24 + 0x1;
                    } while (true);
                    [r19 release];
                    asm{ ldp        x27, x26, [sp, #0x18] };
                    r21 = *(int32_t *)r31;
            }
            [r21 release];
            r19 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48)) retain];
            objc_msgSend(LazyExtensionAgent, *(int32_t *)(r31 + 0x40));
            r20 = [objc_msgSend(r19, *(int32_t *)(r31 + 0x38)) retain];
            asm{ nop         };
            objc_msgSend(r27, *(int32_t *)(r31 + 0x30));
            r0 = objc_msgSend(NSNumber, *(int32_t *)(r31 + 0x28));
            r22 = [r0 retain];
            r1 = *(int32_t *)(r31 + 0x10);
            objc_msgSend(r20, r1);
            [r22 release];
            [r20 release];
            [r19 release];
            r19 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0x48)) retain];
            objc_msgSend(MMExtensionCenter, *(int32_t *)(r31 + 0x40));
            r0 = objc_msgSend(r19, *(int32_t *)(r31 + 0x38));
            r0 = [r0 retain];
            r20 = r0;
            r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x8));
            r29 = r29;
            r21 = [r0 retain];
            [r20 release];
            [r19 release];
            if (r21 != 0x0) {
                    objc_msgSend(r27, *(int32_t *)(r31 + 0x30));
                    r0 = objc_msgSend(NSNumber, *(int32_t *)(r31 + 0x28));
                    asm{ stp        x27, x26, [sp, #0x18] };
                    r20 = [r0 retain];
                    r8 = 0x103953000;
                    *(int32_t *)(r31 + 0x48) = r21;
                    r0 = [r21 getKeyExtensionList:r20];
                    r29 = r29;
                    r19 = [r0 retain];
                    [r20 release];
                    asm{ movz       w8, #0x0 };
                    r20 = @selector(count);
                    asm{ nop         };
                    r21 = @selector(objectAtIndex:);
                    r22 = @selector(m_deleteMark);
                    asm{ nop         };
                    r24 = @selector(getObject);
                    r25 = *(int32_t *)(0x1039a0000 + 0x3c0);
                    r26 = @selector(respondsToSelector:);
                    do {
                            r27 = r8;
                            if (r27 >= [r19 count]) {
                                break;
                            }
                            r0 = [r19 objectAtIndex:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r28 = r0;
                            if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                    r0 = [r28 getObject];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r23 = r0;
                                    if ([r0 respondsToSelector:r2] != 0x0) {
                                            objc_msgSend(r23, r25);
                                    }
                                    [r23 release];
                            }
                            [r28 release];
                            r8 = r27 + 0x1;
                    } while (true);
                    [r19 release];
                    asm{ ldp        x27, x26, [sp, #0x18] };
                    r21 = *(int32_t *)(r31 + 0x48);
            }
            [r21 release];
    }
    [r27 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r26 release];
    return;
}

- (void)OnMsgDownloadThumbFail:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r27 = [arg2 retain];
    r28 = [arg3 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = [r0 isEqualToString:r27];
    [r0 release];
    [r19 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            r0 = [MMServiceCenter defaultCenter];
            *(int32_t *)(r31 + 0x18) = r27;
            r21 = [r0 retain];
            r2 = [LazyExtensionAgent class];
            r19 = [[r21 getService:r2] retain];
            asm{ nop         };
            r22 = @selector(m_uiMesLocalID);
            *(int32_t *)(r31 + 0x10) = r28;
            [r28 m_uiMesLocalID];
            r23 = @selector(numberWithUnsignedInt:);
            r0 = [NSNumber numberWithUnsignedInt:r2];
            r28 = @selector(onMessageUpdateStatus);
            r27 = [r0 retain];
            [r19 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:r28 forKey:STK-1];
            [r27 release];
            [r19 release];
            [r21 release];
            asm{ ldp        x28, x27, [sp, #0x10] };
            r19 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r19 getService:[MMExtensionCenter class]];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
            r29 = 0x50;
            r21 = [r0 retain];
            [r20 release];
            [r19 release];
            if (r21 != 0x0) {
                    [r28 m_uiMesLocalID];
                    r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
                    r8 = 0x103953000;
                    *(int32_t *)(r31 + 0x8) = r21;
                    r0 = [r21 getKeyExtensionList:r19];
                    r29 = r29;
                    r22 = [r0 retain];
                    [r19 release];
                    asm{ movz       w8, #0x0 };
                    r23 = @selector(count);
                    asm{ nop         };
                    r24 = @selector(objectAtIndex:);
                    r25 = @selector(m_deleteMark);
                    asm{ nop         };
                    r26 = @selector(getObject);
                    r27 = @selector(onMessageUpdateStatus);
                    r28 = @selector(respondsToSelector:);
                    do {
                            r20 = r8;
                            if (r20 >= [r22 count]) {
                                break;
                            }
                            r0 = [r22 objectAtIndex:r2];
                            r29 = r29;
                            r0 = [r0 retain];
                            r19 = r0;
                            if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                    r0 = [r19 getObject];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r21 = r0;
                                    if ([r0 respondsToSelector:r2] != 0x0) {
                                            [r21 onMessageUpdateStatus];
                                    }
                                    [r21 release];
                            }
                            [r19 release];
                            r8 = r20 + 0x1;
                    } while (true);
                    [r22 release];
                    asm{ ldp        x28, x27, [sp, #0x10] };
                    r21 = *(int32_t *)(r31 + 0x8);
            }
            [r21 release];
    }
    [r28 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r27 release];
    return;
}

- (void)OnMsgDownloadAppAttachExpiredFail:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r25 = [arg2 retain];
    r28 = [arg3 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = [r0 isEqualToString:r25];
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ nop         };
            r0 = [UIApplication sharedApplication];
            r0 = [r0 retain];
            r20 = r0;
            r19 = [[r0 keyWindow] retain];
            r0 = [CAppViewControllerManager topViewControllerOfWindow:r19];
            r29 = 0x50;
            r21 = [r0 retain];
            [r19 release];
            [r20 release];
            r22 = @selector(class);
            r2 = [BaseMsgContentViewController class];
            if ([r21 isKindOfClass:r2] != 0x0) {
                    r0 = [MMServiceCenter defaultCenter];
                    *(int32_t *)(r31 + 0x8) = r21;
                    *(int32_t *)(r31 + 0x18) = r25;
                    r25 = [r0 retain];
                    r2 = [LazyExtensionAgent class];
                    r20 = [[r25 getService:r2] retain];
                    asm{ nop         };
                    r23 = @selector(m_uiMesLocalID);
                    *(int32_t *)(r31 + 0x10) = r28;
                    [r28 m_uiMesLocalID];
                    r24 = @selector(numberWithUnsignedInt:);
                    r0 = [NSNumber numberWithUnsignedInt:r2];
                    r28 = @selector(onMessageDownloadAppAttachExpired);
                    r19 = [r0 retain];
                    [r20 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:r28 forKey:STK-1];
                    [r19 release];
                    [r20 release];
                    [r25 release];
                    asm{ ldp        x28, x25, [sp, #0x10] };
                    r21 = *(int32_t *)(r31 + 0x8);
                    r20 = [[MMServiceCenter defaultCenter] retain];
                    r0 = [r20 getService:[MMExtensionCenter class]];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
                    r29 = r29;
                    r22 = [r0 retain];
                    [r19 release];
                    [r20 release];
                    if (r22 != 0x0) {
                            [r28 m_uiMesLocalID];
                            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
                            r8 = 0x103953000;
                            *(int32_t *)r31 = r22;
                            r0 = [r22 getKeyExtensionList:r19];
                            r29 = r29;
                            r23 = [r0 retain];
                            [r19 release];
                            asm{ movz       w8, #0x0 };
                            r24 = @selector(count);
                            asm{ nop         };
                            r25 = @selector(objectAtIndex:);
                            r26 = @selector(m_deleteMark);
                            asm{ nop         };
                            r27 = @selector(getObject);
                            r28 = @selector(onMessageDownloadAppAttachExpired);
                            r21 = @selector(respondsToSelector:);
                            do {
                                    r20 = r8;
                                    if (r20 >= [r23 count]) {
                                        break;
                                    }
                                    r0 = [r23 objectAtIndex:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                            r0 = [r22 getObject];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r19 = r0;
                                            if ([r0 respondsToSelector:r2] != 0x0) {
                                                    [r19 onMessageDownloadAppAttachExpired];
                                            }
                                            [r19 release];
                                    }
                                    [r22 release];
                                    r8 = r20 + 0x1;
                            } while (true);
                            [r23 release];
                            asm{ ldp        x28, x25, [sp, #0x10] };
                            asm{ ldp        x22, x21, [sp] };
                    }
                    [r22 release];
            }
            [r21 release];
    }
    [r28 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r25 release];
    return;
}

- (void)OnMsgDownloadAppAttachCommonFail:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r25 = [arg2 retain];
    r28 = [arg3 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = [r0 isEqualToString:r25];
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ nop         };
            r0 = [UIApplication sharedApplication];
            r0 = [r0 retain];
            r20 = r0;
            r19 = [[r0 keyWindow] retain];
            r0 = [CAppViewControllerManager topViewControllerOfWindow:r19];
            r29 = 0x50;
            r21 = [r0 retain];
            [r19 release];
            [r20 release];
            r22 = @selector(class);
            r2 = [BaseMsgContentViewController class];
            if ([r21 isKindOfClass:r2] != 0x0) {
                    r0 = [MMServiceCenter defaultCenter];
                    *(int32_t *)(r31 + 0x8) = r21;
                    *(int32_t *)(r31 + 0x18) = r25;
                    r25 = [r0 retain];
                    r2 = [LazyExtensionAgent class];
                    r20 = [[r25 getService:r2] retain];
                    asm{ nop         };
                    r23 = @selector(m_uiMesLocalID);
                    *(int32_t *)(r31 + 0x10) = r28;
                    [r28 m_uiMesLocalID];
                    r24 = @selector(numberWithUnsignedInt:);
                    r0 = [NSNumber numberWithUnsignedInt:r2];
                    r28 = @selector(onMessageDownloadAppAttachFail);
                    r19 = [r0 retain];
                    [r20 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:r28 forKey:STK-1];
                    [r19 release];
                    [r20 release];
                    [r25 release];
                    asm{ ldp        x28, x25, [sp, #0x10] };
                    r21 = *(int32_t *)(r31 + 0x8);
                    r20 = [[MMServiceCenter defaultCenter] retain];
                    r0 = [r20 getService:[MMExtensionCenter class]];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
                    r29 = r29;
                    r22 = [r0 retain];
                    [r19 release];
                    [r20 release];
                    if (r22 != 0x0) {
                            [r28 m_uiMesLocalID];
                            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
                            r8 = 0x103953000;
                            *(int32_t *)r31 = r22;
                            r0 = [r22 getKeyExtensionList:r19];
                            r29 = r29;
                            r23 = [r0 retain];
                            [r19 release];
                            asm{ movz       w8, #0x0 };
                            r24 = @selector(count);
                            asm{ nop         };
                            r25 = @selector(objectAtIndex:);
                            r26 = @selector(m_deleteMark);
                            asm{ nop         };
                            r27 = @selector(getObject);
                            r28 = @selector(onMessageDownloadAppAttachFail);
                            r21 = @selector(respondsToSelector:);
                            do {
                                    r20 = r8;
                                    if (r20 >= [r23 count]) {
                                        break;
                                    }
                                    r0 = [r23 objectAtIndex:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                            r0 = [r22 getObject];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r19 = r0;
                                            if ([r0 respondsToSelector:r2] != 0x0) {
                                                    [r19 onMessageDownloadAppAttachFail];
                                            }
                                            [r19 release];
                                    }
                                    [r22 release];
                                    r8 = r20 + 0x1;
                            } while (true);
                            [r23 release];
                            asm{ ldp        x28, x25, [sp, #0x10] };
                            asm{ ldp        x22, x21, [sp] };
                    }
                    [r22 release];
            }
            [r21 release];
    }
    [r28 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r25 release];
    return;
}

- (void)OnMsgDownloadVideoExpiredFail:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r25 = [arg2 retain];
    r28 = [arg3 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = [r0 isEqualToString:r25];
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ nop         };
            r0 = [UIApplication sharedApplication];
            r0 = [r0 retain];
            r20 = r0;
            r19 = [[r0 keyWindow] retain];
            r0 = [CAppViewControllerManager topViewControllerOfWindow:r19];
            r29 = 0x50;
            r21 = [r0 retain];
            [r19 release];
            [r20 release];
            r22 = @selector(class);
            r2 = [BaseMsgContentViewController class];
            if ([r21 isKindOfClass:r2] != 0x0) {
                    r0 = [MMServiceCenter defaultCenter];
                    *(int32_t *)(r31 + 0x8) = r21;
                    *(int32_t *)(r31 + 0x18) = r25;
                    r25 = [r0 retain];
                    r2 = [LazyExtensionAgent class];
                    r20 = [[r25 getService:r2] retain];
                    asm{ nop         };
                    r23 = @selector(m_uiMesLocalID);
                    *(int32_t *)(r31 + 0x10) = r28;
                    [r28 m_uiMesLocalID];
                    r24 = @selector(numberWithUnsignedInt:);
                    r0 = [NSNumber numberWithUnsignedInt:r2];
                    r28 = @selector(onMessageDownloadVideoExpired);
                    r19 = [r0 retain];
                    [r20 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:r28 forKey:STK-1];
                    [r19 release];
                    [r20 release];
                    [r25 release];
                    asm{ ldp        x28, x25, [sp, #0x10] };
                    r21 = *(int32_t *)(r31 + 0x8);
                    r20 = [[MMServiceCenter defaultCenter] retain];
                    r0 = [r20 getService:[MMExtensionCenter class]];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
                    r29 = r29;
                    r22 = [r0 retain];
                    [r19 release];
                    [r20 release];
                    if (r22 != 0x0) {
                            [r28 m_uiMesLocalID];
                            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
                            r8 = 0x103953000;
                            *(int32_t *)r31 = r22;
                            r0 = [r22 getKeyExtensionList:r19];
                            r29 = r29;
                            r23 = [r0 retain];
                            [r19 release];
                            asm{ movz       w8, #0x0 };
                            r24 = @selector(count);
                            asm{ nop         };
                            r25 = @selector(objectAtIndex:);
                            r26 = @selector(m_deleteMark);
                            asm{ nop         };
                            r27 = @selector(getObject);
                            r28 = @selector(onMessageDownloadVideoExpired);
                            r21 = @selector(respondsToSelector:);
                            do {
                                    r20 = r8;
                                    if (r20 >= [r23 count]) {
                                        break;
                                    }
                                    r0 = [r23 objectAtIndex:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                            r0 = [r22 getObject];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r19 = r0;
                                            if ([r0 respondsToSelector:r2] != 0x0) {
                                                    [r19 onMessageDownloadVideoExpired];
                                            }
                                            [r19 release];
                                    }
                                    [r22 release];
                                    r8 = r20 + 0x1;
                            } while (true);
                            [r23 release];
                            asm{ ldp        x28, x25, [sp, #0x10] };
                            asm{ ldp        x22, x21, [sp] };
                    }
                    [r22 release];
            }
            [r21 release];
    }
    [r28 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r25 release];
    return;
}

- (void)OnMsgDownloadVideoCommonFail:(id)arg2 MsgWrap:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r25 = [arg2 retain];
    r28 = [arg3 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r0 = [r0 m_nsUsrName];
    r29 = 0x50;
    r0 = [r0 retain];
    r21 = [r0 isEqualToString:r25];
    [r0 release];
    [r20 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            asm{ nop         };
            r0 = [UIApplication sharedApplication];
            r0 = [r0 retain];
            r20 = r0;
            r19 = [[r0 keyWindow] retain];
            r0 = [CAppViewControllerManager topViewControllerOfWindow:r19];
            r29 = 0x50;
            r21 = [r0 retain];
            [r19 release];
            [r20 release];
            r22 = @selector(class);
            r2 = [BaseMsgContentViewController class];
            if ([r21 isKindOfClass:r2] != 0x0) {
                    r0 = [MMServiceCenter defaultCenter];
                    *(int32_t *)(r31 + 0x8) = r21;
                    *(int32_t *)(r31 + 0x18) = r25;
                    r25 = [r0 retain];
                    r2 = [LazyExtensionAgent class];
                    r20 = [[r25 getService:r2] retain];
                    asm{ nop         };
                    r23 = @selector(m_uiMesLocalID);
                    *(int32_t *)(r31 + 0x10) = r28;
                    [r28 m_uiMesLocalID];
                    r24 = @selector(numberWithUnsignedInt:);
                    r0 = [NSNumber numberWithUnsignedInt:r2];
                    r28 = @selector(onMessageDownloadVideoFail);
                    r19 = [r0 retain];
                    [r20 ensureLazyListenerInitedForExtension:@protocol(IMessageNodeStatusExt) withSelector:r28 forKey:STK-1];
                    [r19 release];
                    [r20 release];
                    [r25 release];
                    asm{ ldp        x28, x25, [sp, #0x10] };
                    r21 = *(int32_t *)(r31 + 0x8);
                    r20 = [[MMServiceCenter defaultCenter] retain];
                    r0 = [r20 getService:[MMExtensionCenter class]];
                    r0 = [r0 retain];
                    r19 = r0;
                    r0 = [r0 getExtension:@protocol(IMessageNodeStatusExt)];
                    r29 = r29;
                    r22 = [r0 retain];
                    [r19 release];
                    [r20 release];
                    if (r22 != 0x0) {
                            [r28 m_uiMesLocalID];
                            r19 = [[NSNumber numberWithUnsignedInt:r2] retain];
                            r8 = 0x103953000;
                            *(int32_t *)r31 = r22;
                            r0 = [r22 getKeyExtensionList:r19];
                            r29 = r29;
                            r23 = [r0 retain];
                            [r19 release];
                            asm{ movz       w8, #0x0 };
                            r24 = @selector(count);
                            asm{ nop         };
                            r25 = @selector(objectAtIndex:);
                            r26 = @selector(m_deleteMark);
                            asm{ nop         };
                            r27 = @selector(getObject);
                            r28 = @selector(onMessageDownloadVideoFail);
                            r21 = @selector(respondsToSelector:);
                            do {
                                    r20 = r8;
                                    if (r20 >= [r23 count]) {
                                        break;
                                    }
                                    r0 = [r23 objectAtIndex:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    if (([r0 m_deleteMark] & 0x1 << 0x0) == 0x0) {
                                            r0 = [r22 getObject];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r19 = r0;
                                            if ([r0 respondsToSelector:r2] != 0x0) {
                                                    [r19 onMessageDownloadVideoFail];
                                            }
                                            [r19 release];
                                    }
                                    [r22 release];
                                    r8 = r20 + 0x1;
                            } while (true);
                            [r23 release];
                            asm{ ldp        x28, x25, [sp, #0x10] };
                            asm{ ldp        x22, x21, [sp] };
                    }
                    [r22 release];
            }
            [r21 release];
    }
    [r28 release];
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r25 release];
    return;
}

- (id)isAllowVoip
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r20 = [r0 CanSendVoipMsg];
    [r0 release];
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)initAllowVoip
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r21 = @selector(isPluginInstalled:);
    if ([PluginUtil isPluginInstalled:r2] != 0x0) {
            r20 = [r19 isAllowVoip];
    }
    else {
            asm{ movz       w20, #0x0 };
    }
    r0 = *(int32_t *)(0x1039c3000 + 0x810);
    r21 = [r0 isPluginInstalled:r2];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMConfigMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = [r0 uintFromDynamicConfigForKey:@"VoiceVOIPSwitch"];
    [r0 release];
    [r22 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            r0 = [r19 isAllowVoip];
            asm{ cset       w8, eq };
            r3 = 0x1039a0000 & r0;
    }
    else {
            asm{ movz       w3, #0x0 };
    }
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r0 setIsAllowVoip:r20 VoiceVoip:r3];
    return;
}

- (id)isAllowVoiceInput
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [self GetContact];
    r0 = [r0 retain];
    r20 = [r0 isLbsroom];
    [r0 release];
    r0 = r20 ^ 0x1;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)initAllowVoiceInput
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r20 = self;
    asm{ movz       w2, #0x11 };
    r0 = [PluginUtil isPluginInstalled:r2];
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r19 = *(int32_t *)(r20 + 0x1039e8000);
    if (r0 != 0x0) {
            r2 = [r20 isAllowVoiceInput];
    }
    else {
            asm{ movz       w2, #0x0 };
    }
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 setIsAllowVoiceInput:r2];
    return;
}

- (id)isAllowWxTalk
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    r20 = @selector(GetContact);
    r0 = [self GetContact];
    r0 = [r0 retain];
    r22 = [r0 isLbsroom];
    [r0 release];
    if ((r22 & 0x1 << 0x0) == 0x0) {
            r0 = [r19 GetContact];
            r29 = 0x40;
            r0 = [r0 retain];
            r22 = [r0 isSelf];
            [r0 release];
            if ((r22 & 0x1 << 0x0) == 0x0) {
                    r0 = [r19 GetContact];
                    r0 = [r0 retain];
                    r22 = r0;
                    r21 = @selector(m_nsUsrName);
                    r0 = [r0 m_nsUsrName];
                    r29 = r29;
                    r24 = [r0 retain];
                    r23 = [MMKernelUtil IsBottleContact:r24];
                    [r24 release];
                    [r22 release];
                    if ((r23 & 0x1 << 0x0) == 0x0) {
                            r23 = *(int32_t *)(0x1039c4000 + 0x1f8);
                            r0 = [r19 GetContact];
                            r0 = [r0 retain];
                            r22 = r0;
                            r0 = [r0 m_nsUsrName];
                            r29 = r29;
                            r24 = [r0 retain];
                            r23 = [r23 IsQQContact:r24];
                            [r24 release];
                            [r22 release];
                            if ((r23 & 0x1 << 0x0) == 0x0) {
                                    r22 = *(int32_t *)(0x1039c4000 + 0x1f8);
                                    r0 = [r19 GetContact];
                                    r0 = [r0 retain];
                                    r20 = r0;
                                    r0 = [r0 m_nsUsrName];
                                    r21 = [r0 retain];
                                    r22 = [r22 IsSXContact:r21];
                                    [r21 release];
                                    [r20 release];
                                    if ((r22 & 0x1 << 0x0) != 0x0) {
                                            asm{ movz       w19, #0x0 };
                                    }
                                    else {
                                            asm{ ldrsw      x8, [x8, #0xd6c] };
                                            r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
                                            r19 = [r0 CanWXTalk];
                                            [r0 release];
                                    }
                            }
                            else {
                                    asm{ movz       w19, #0x0 };
                            }
                    }
                    else {
                            asm{ movz       w19, #0x0 };
                    }
            }
            else {
                    asm{ movz       w19, #0x0 };
            }
    }
    else {
            asm{ movz       w19, #0x0 };
    }
    r0 = r19;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    return r0;
}

- (void)initAllowWxTalk
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r19 = *(int32_t *)(self + 0x1039e8000);
    r2 = [self isAllowWxTalk];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 setIsAllowWxTalk:r2];
    return;
}

- (void)initAllowMultiTalk
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    0x0 = 0x0 - 0x10;
    r19 = self;
    if ([MultiTalkServerConfig shouldBlockCaller] != 0x0) {
            *(int32_t *)r31 = @"[MultiTalk] ServerConfig shouldBlockCaller.";
            asm{ movz       w6, #0x1ddb };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            0x0 = 0x20 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            return;
    }
    else {
            r20 = @selector(GetContact);
            r0 = [r19 GetContact];
            r29 = 0x20;
            r21 = [r0 retain];
            r2 = [CEnterpriseContact class];
            r22 = [r21 isKindOfClass:r2];
            [r21 release];
            if (r22 != 0x0) {
                    asm{ movz       w2, #0x0 };
                    asm{ ldrsw      x8, [x8, #0xdd4] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    r1 = @selector(setIsAllowMultiTalk:);
            }
            else {
                    r0 = [r19 GetContact];
                    r29 = r29;
                    r0 = [r0 retain];
                    r21 = [r0 isChatroom];
                    [r0 release];
                    asm{ ldrsw      x8, [x8, #0xdd4] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    r1 = @selector(setIsAllowMultiTalk:);
                    if (r21 != 0x0) {
                    }
                    else {
                            asm{ movz       w2, #0x0 };
                    }
            }
            0x0 = r29 - 0x20;
            asm{ ldp        x29, x30, [sp, #0x20] };
            asm{ ldp        x20, x19, [sp, #0x10] };
            asm{ ldp        x22, x21, [sp], #0x30 };
            r0 = objc_msgSend(r0, r1);
    }
    return;
}

- (void)initAllowRecommendApp
{
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 setIsAllowRecommendApp:0x1];
    return;
}

- (void)initAllowWxTalkFollowSight
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r20 = self;
    r0 = [self GetContact];
    r19 = [r0 retain];
    if (r19 == 0x0) {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            asm{ movz       w2, #0x0 };
            [r0 setIsAllowWxTalkFollowSight:r2];
    }
    r8 = [r19 isChatroom];
    asm{ ldrsw      x9, [x9, #0xdd4] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r1 = @selector(setIsAllowWxTalkFollowSight:);
    if (r8 != 0x0) {
            [r0 setIsAllowWxTalkFollowSight:r2];
    }
    else {
            asm{ movz       w2, #0x0 };
            [r0 setIsAllowWxTalkFollowSight:r2];
    }
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)initAllowNameCardFollowRedEnvelope
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r20 = self;
    r0 = [self GetContact];
    r19 = [r0 retain];
    if (r19 == 0x0) {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            asm{ movz       w2, #0x0 };
            [r0 setIsAllowNameCardFollowRedEnveLope:r2];
    }
    r8 = [r19 isChatroom];
    asm{ ldrsw      x9, [x9, #0xdd4] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r1 = @selector(setIsAllowNameCardFollowRedEnveLope:);
    if (r8 != 0x0) {
            [r0 setIsAllowNameCardFollowRedEnveLope:r2];
    }
    else {
            asm{ movz       w2, #0x0 };
            [r0 setIsAllowNameCardFollowRedEnveLope:r2];
    }
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (id)canShowFavEntry
{
    return 0x1;
}

- (id)canShowLocation
{
    return 0x1;
}

- (id)canShowEnterpriseBrandEntry
{
    r0 = self;
    asm{ movz       w0, #0x0 };
    return r0;
}

- (id)GetCurrentViewController
{
    r0 = self;
    return r0;
}

- (void)updateChatRoomData:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0xd0;
    r20 = self;
    r25 = *(int32_t *)__stack_chk_guard;
    r25 = *(int32_t *)r25;
    asm{ stur       x25, [x29, #0xffffffa8] };
    r19 = [arg2 retain];
    asm{ stp        xzr, xzr, [sp, #0x38] };
    asm{ stp        xzr, xzr, [sp, #0x28] };
    asm{ stp        xzr, xzr, [sp, #0x18] };
    asm{ stp        xzr, xzr, [sp, #0x8] };
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r0 retain];
    r21 = r0;
    r23 = [r0 countByEnumeratingWithState:0x8 objects:0x48 count:STK-1];
    if (r23 != 0x0) {
            r26 = **(int32_t *)(r31 + 0x18);
            r22 = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x28, #0x0 };
                    r24 = *(int32_t *)(0x1039a0000 + 0x418);
                    do {
                            if (**(int32_t *)(r31 + 0x18) != r26) {
                                    objc_enumerationMutation(r21);
                            }
                            r0 = *(int32_t *)(*(int32_t *)(r31 + 0x10) + r28 * 0x8);
                            objc_msgSend(r0, r24);
                            r28 = r28 + 0x1;
                    } while (r28 < r23);
                    r23 = objc_msgSend(r21, r22);
            } while (r23 != 0x0);
    }
    [r21 release];
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    [r0 reloadData];
    r0 = [r19 release];
    asm{ ldur       x8, [x29, #0xffffffa8] };
    if (r25 == 0x103950000) {
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)showLoadingView
{
    asm{ movz       x2, #0x0 };
    r0 = [self showLoadingViewWithText:r2];
    return;
}

- (void)showLoadingViewWithText:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r29 = 0x40;
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x25, [x8, #0xea8] };
    if (*(int32_t *)(r20 + r25) == 0x0) {
            r0 = [MMLoadingView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)(r20 + r25);
            *(int32_t *)(r20 + r25) = r0;
            [r8 release];
            r0 = *(int32_t *)(r20 + r25);
            r21 = [[r0 m_label] retain];
            r22 = [[MMServiceCenter defaultCenter] retain];
            r2 = [MMLanguageMgr class];
            r0 = [r22 getService:r2];
            r0 = [r0 retain];
            r23 = r0;
            r24 = [[r0 getStringForCurLanguage:0x1032a4000 defaultTo:@"Common_DefaultLoadingText"] retain];
            [r21 setText:r24];
            [r24 release];
            [r23 release];
            [r22 release];
            [r21 release];
            r0 = *(int32_t *)(r20 + r25);
            asm{ movz       w2, #0x0 };
            [r0 setM_bIgnoringInteractionEventsWhenLoading:r24];
            r0 = [r20 view];
            r29 = 0x40;
            r0 = [r0 retain];
            r21 = r0;
            r2 = *(int32_t *)(r20 + r25);
            [r0 addSubview:r2];
            [r21 release];
    }
    if ((r19 != 0x0) && ([r19 length] != 0x0)) {
            r0 = *(int32_t *)(r20 + r25);
            r0 = [r0 m_label];
            r29 = r29;
            r0 = [r0 retain];
            r21 = r0;
            r2 = r19;
            [r0 setText:r2];
            [r21 release];
    }
    r0 = *(int32_t *)(r20 + r25);
    [r0 startLoading];
    r0 = [r20 navigationItem];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 leftBarButtonItem];
    r0 = [r0 retain];
    r24 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setEnabled:r2];
    [r24 release];
    [r23 release];
    r0 = [r20 navigationItem];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 backBarButtonItem];
    r0 = [r0 retain];
    r24 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setEnabled:r2];
    [r24 release];
    [r23 release];
    r0 = [r20 navigationItem];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 rightBarButtonItem];
    r0 = [r0 retain];
    r23 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setEnabled:r2];
    [r23 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)stopLoading
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    asm{ ldrsw      x8, [x8, #0xea8] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 stopLoading];
    asm{ nop         };
    asm{ ldrsw      x8, [x8, #0x80c] };
    r0 = *(int32_t *)(self + 0x1039ef000);
    [r0 stopLoading];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 leftBarButtonItem];
    r0 = [r0 retain];
    r23 = r0;
    [r0 setEnabled:0x1];
    [r23 release];
    [r22 release];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 backBarButtonItem];
    r0 = [r0 retain];
    r23 = r0;
    [r0 setEnabled:0x1];
    [r23 release];
    [r22 release];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 rightBarButtonItem];
    r0 = [r0 retain];
    r22 = r0;
    [r0 setEnabled:0x1];
    [r22 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r21 release];
    return;
}

- (void)stopLoadingAndShowOkWithText:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xea8] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 stopLoadingAndShowOK:r19];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 leftBarButtonItem];
    r0 = [r0 retain];
    r24 = r0;
    [r0 setEnabled:0x1];
    [r24 release];
    [r23 release];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 backBarButtonItem];
    r0 = [r0 retain];
    r24 = r0;
    [r0 setEnabled:0x1];
    [r24 release];
    [r23 release];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 rightBarButtonItem];
    r0 = [r0 retain];
    r23 = r0;
    [r0 setEnabled:0x1];
    [r23 release];
    [r22 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)stopLoadingAndAndShowErrorWithText:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xea8] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 stopLoadingAndShowError:r19];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 leftBarButtonItem];
    r0 = [r0 retain];
    r24 = r0;
    [r0 setEnabled:0x1];
    [r24 release];
    [r23 release];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 backBarButtonItem];
    r0 = [r0 retain];
    r24 = r0;
    [r0 setEnabled:0x1];
    [r24 release];
    [r23 release];
    r0 = [self navigationItem];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 rightBarButtonItem];
    r0 = [r0 retain];
    r23 = r0;
    [r0 setEnabled:0x1];
    [r23 release];
    [r22 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)loadingAfterForwardMessageOK
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r29 = 0x20;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xea8] };
    r20 = r19 + 0x1039e8000;
    r0 = *(int32_t *)r20;
    if (r0 == 0x0) {
            r0 = [MMLoadingView alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r20;
            *(int32_t *)r20 = r0;
            [r8 release];
            r0 = *(int32_t *)r20;
            asm{ movz       w2, #0x0 };
            [r0 setM_bIgnoringInteractionEventsWhenLoading:r2];
            r0 = [r19 view];
            r29 = 0x20;
            r0 = [r0 retain];
            r19 = r0;
            r2 = *(int32_t *)r20;
            [r0 addSubview:r2];
            [r19 release];
            r0 = *(int32_t *)r20;
    }
    [r0 startLoading];
    r20 = *(int32_t *)r20;
    r19 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r19 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    r0 = [r0 getStringForCurLanguage:0x103269000 defaultTo:@"Connector_Forward_Message_Send_OK"];
    r22 = [r0 retain];
    [r20 stopLoadingAndShowOK:r22];
    [r22 release];
    [r21 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (id)getCustomizedAreaWidth
{
    r0 = self;
    asm{ movi.16b   v0, #0x0 };
    return r0;
}

- (id)shouldHideOrginInputToolView
{
    return 0x1;
}

- (void)updateBanner
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x20;
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r19 + 0x1039e8000);
    r21 = [r0 CanShowBanner];
    [r0 release];
    if ((r21 & 0x1 << 0x0) != 0x0) {
            r22 = @selector(defaultCenter);
            r20 = [[MMServiceCenter defaultCenter] retain];
            *(int32_t *)(r31 + 0x18) = @selector(class);
            [TrackPresentMgr class];
            r23 = @selector(getService:);
            r24 = [[r20 getService:r2] retain];
            r25 = @selector(GetContact);
            r0 = [r19 GetContact];
            r0 = [r0 retain];
            r27 = r0;
            r26 = @selector(m_nsUsrName);
            r0 = [r0 m_nsUsrName];
            r29 = 0x50;
            r21 = [r0 retain];
            r2 = r21;
            r28 = [r24 isTrackRoomEmpty:r2];
            [r21 release];
            [r27 release];
            [r24 release];
            [r20 release];
            if ((r28 & 0x1 << 0x0) != 0x0) {
                    [r19 hideTrackRoomTips];
                    asm{ ldrsw      x21, [x8, #0xdc8] };
                    [r19 updateFirstUnReadButtonOnShowBanner:r2];
                    r24 = [[MMServiceCenter defaultCenter] retain];
                    objc_msgSend(MultiTalkMgr, *(int32_t *)(r31 + 0x18));
                    r27 = [[r24 getService:r2] retain];
                    r0 = [r19 GetContact];
                    asm{ stp        x21, x20, [sp, #0x8] };
                    r0 = [r0 retain];
                    r28 = r0;
                    r0 = [r0 m_nsUsrName];
                    r29 = r29;
                    r20 = [r0 retain];
                    r21 = [r27 isMultiTalkValidWithWxGroupId:r20];
                    [r20 release];
                    [r28 release];
                    [r27 release];
                    [r24 release];
                    if (r21 != 0x0) {
                            r24 = [[MMServiceCenter defaultCenter] retain];
                            objc_msgSend(MultiTalkMgr, *(int32_t *)(r31 + 0x18));
                            r0 = [r24 getService:r2];
                            r0 = [r0 retain];
                            r27 = r0;
                            r28 = [[r0 getCurrentTalkingGroupId] retain];
                            r0 = [r19 GetContact];
                            r0 = [r0 retain];
                            r25 = r0;
                            r0 = [r0 m_nsUsrName];
                            r29 = r29;
                            r26 = [r0 retain];
                            if ([r28 isEqualToString:r26] != 0x0) {
                                    r22 = [[MMServiceCenter defaultCenter] retain];
                                    objc_msgSend(*(int32_t *)(0x1039c3000 + 0xe60), *(int32_t *)(r31 + 0x18));
                                    r0 = [r22 getService:r2];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r21 = [r0 isMultiTalkMinimized];
                                    [r0 release];
                                    [r22 release];
                                    [r26 release];
                                    [r25 release];
                                    [r28 release];
                                    [r27 release];
                                    [r24 release];
                                    if (r21 != 0x0) {
                                            [r19 hideMultiTalkTips];
                                    }
                                    else {
                                            [r19 showMultiTalkTips];
                                            asm{ ldrsw      x8, [x8, #0xe28] };
                                            r0 = *(int32_t *)(r19 + 0x1039e8000);
                                            [r0 height];
                                    }
                            }
                            else {
                                    [r26 release];
                                    [r25 release];
                                    [r28 release];
                                    [r27 release];
                                    [r24 release];
                                    [r19 showMultiTalkTips];
                                    asm{ ldrsw      x8, [x8, #0xe28] };
                                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                                    [r0 height];
                            }
                    }
                    else {
                            [r19 hideMultiTalkTips];
                    }
                    r0 = r19;
                    r1 = *(int32_t *)(r31 + 0x10);
            }
            else {
                    [r19 showTrackRoomTips];
                    [r19 hideMultiTalkTips];
                    asm{ ldrsw      x8, [x8, #0xe2c] };
                    r0 = *(int32_t *)(r19 + 0x1039e8000);
                    [r0 height];
                    r1 = @selector(updateFirstUnReadButtonOnShowBanner:);
                    r0 = r19;
            }
            0x0 = r29 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            r0 = objc_msgSend(r0, r1);
    }
    else {
            *(int32_t *)r31 = @"Can not Show Banner";
            asm{ movz       w6, #0x1e6a };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [iConsole logWithLevel:0x3 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            0x0 = 0x50 - 0x50;
            asm{ ldp        x29, x30, [sp, #0x50] };
            asm{ ldp        x20, x19, [sp, #0x40] };
            asm{ ldp        x22, x21, [sp, #0x30] };
            asm{ ldp        x24, x23, [sp, #0x20] };
            asm{ ldp        x26, x25, [sp, #0x10] };
            asm{ ldp        x28, x27, [sp], #0x60 };
            return;
    }
    return;
}

- (void)showTrackRoomTips
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r20 = self;
    r0 = [self GetContact];
    r29 = 0x50;
    r19 = [r0 retain];
    if (r19 == 0x0) goto loc_101d3c7e0;
    goto loc_101d3c514;

loc_101d3c7e0:
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;

loc_101d3c514:
    if ([r19 isChatroom] == 0x0) goto loc_101d3c56c;
    goto loc_101d3c528;

loc_101d3c56c:
    asm{ ldrsw      x27, [x8, #0xe2c] };
    r0 = *(int32_t *)(r20 + r27);
    if (r0 != 0x0) {
            [r0 setContact:r19];
    }
    else {
            r0 = [TrackRoomTipsView alloc];
            r0 = [r0 initWithContact:r19];
            r8 = *(int32_t *)(r20 + r27);
            *(int32_t *)(r20 + r27) = r0;
            [r8 release];
            r0 = *(int32_t *)(r20 + r27);
            [r0 setAutoresizingMask:0x2];
            r0 = *(int32_t *)(r20 + r27);
            [r0 setDelegate:r20];
    }
    r22 = @selector(view);
    r0 = [r20 view];
    r0 = [r0 retain];
    r21 = r0;
    r24 = [[r0 subviews] retain];
    asm{ ldrsw      x28, [x8, #0xd9c] };
    r0 = *(int32_t *)(r20 + r28);
    r23 = @selector(searchBar);
    r0 = [r0 searchBar];
    r29 = r29;
    r25 = [r0 retain];
    r26 = [r24 containsObject:r25];
    [r25 release];
    [r24 release];
    [r21 release];
    if (r26 != 0x0) {
            r21 = [[r20 view] retain];
            r22 = *(int32_t *)(r20 + r27);
            r0 = *(int32_t *)(r20 + r28);
            r0 = [r0 searchBar];
            r29 = r29;
            r23 = [r0 retain];
            r2 = r22;
            [r21 insertSubview:r2 belowSubview:r23];
            [r23 release];
    }
    else {
            r0 = [r20 view];
            r29 = r29;
            r0 = [r0 retain];
            r21 = r0;
            r2 = *(int32_t *)(r20 + r27);
            [r0 addSubview:r2];
    }
    [r21 release];
    r21 = *(int32_t *)(r20 + r27);
    [r20 getContentViewY];
    [r21 setY:r2];
    r0 = *(int32_t *)(r20 + r27);
    [r0 updateTipsView];
    r0 = [UIApplication sharedApplication];
    r0 = [r0 retain];
    r21 = r0;
    if ([r0 statusBarOrientation] > 0x4) goto loc_101d3c7b0;
    goto loc_101d3c774;

loc_101d3c7b0:
    r0 = r21;

loc_101d3c7dc:
    [r0 release];
    goto loc_101d3c7e0;

loc_101d3c774:
    r22 = [DeviceInfo isiPadUniversal];
    [r21 release];
    if ((r22 & 0x1 << 0x0) == 0x0) {
            r0 = *(int32_t *)(r20 + r27);
            [r0 setHidden:0x1];
    }
    goto loc_101d3c7e0;

loc_101d3c528:
    r0 = [SettingUtil getCurUsrName];
    r29 = 0x50;
    r21 = [r0 retain];
    r22 = [r19 IsUserInChatRoom:r21];
    [r21 release];
    if ((r22 & 0x1 << 0x0) == 0x0) goto loc_101d3c7b8;
    goto loc_101d3c56c;

loc_101d3c7b8:
    asm{ ldrsw      x21, [x8, #0xe2c] };
    r0 = *(int32_t *)(r20 + r21);
    if (r0 == 0x0) goto loc_101d3c7e0;
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(r20 + r21);
    *(int32_t *)(r20 + r21) = 0x0;
    goto loc_101d3c7dc;
}

- (void)showMultiTalkTips
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r21 = self;
    r25 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    r20 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
    r31 = r31 + 0xffffffffffffffe0;
    *(int32_t *)r31 = @"MultiTalkMgr: showMultiTalkTips!";
    r23 = "BaseMsgContentViewController.mm";
    asm{ movz       w6, #0x1eb9 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r25);
    r22 = @selector(GetContact);
    r0 = [r21 GetContact];
    r29 = 0x50;
    r26 = [r0 retain];
    if (r26 != 0x0) {
            if ([r26 isChatroom] != 0x0) {
                    r0 = [SettingUtil getCurUsrName];
                    r29 = 0x50;
                    r23 = [r0 retain];
                    r24 = [r26 IsUserInChatRoom:r23];
                    [r23 release];
                    if ((r24 & 0x1 << 0x0) != 0x0) {
                            asm{ ldrsw      x19, [x8, #0xe28] };
                            if (*(int32_t *)(r21 + 0x1039c3000) == 0x0) {
                                    r0 = [MultiTalkTipsView alloc];
                                    r0 = [r0 initWithContact:r26];
                                    r8 = *(int32_t *)(r21 + 0x1039c3000);
                                    *(int32_t *)(r21 + 0x1039c3000) = r0;
                                    [r8 release];
                                    r0 = *(int32_t *)(r21 + 0x1039c3000);
                                    [r0 setAutoresizingMask:0x2];
                            }
                            r24 = @selector(view);
                            r0 = [r21 view];
                            asm{ stp        x19, x26, [sp, #0x10] };
                            r20 = r22;
                            r0 = [r0 retain];
                            r23 = r0;
                            r0 = [r0 subviews];
                            r22 = r25;
                            r26 = [r0 retain];
                            asm{ ldrsw      x19, [x8, #0xd9c] };
                            r0 = *(int32_t *)(r21 + 0x1039c3000);
                            r25 = @selector(searchBar);
                            r0 = [r0 searchBar];
                            r29 = r29;
                            r27 = [r0 retain];
                            r28 = [r26 containsObject:r27];
                            [r27 release];
                            [r26 release];
                            [r23 release];
                            if (r28 != 0x0) {
                                    r26 = *(int32_t *)(r31 + 0x18);
                                    r0 = [r21 view];
                                    r27 = r22;
                                    r28 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                    r22 = r20;
                                    r20 = *(int32_t *)(r31 + 0x10);
                                    r23 = [r0 retain];
                                    r24 = *(int32_t *)(r21 + r20);
                                    r0 = *(int32_t *)(r21 + 0x1039c3000);
                                    r0 = [r0 searchBar];
                                    r29 = r29;
                                    r25 = [r0 retain];
                                    [r23 insertSubview:r24 belowSubview:r25];
                                    [r25 release];
                                    [r23 release];
                                    *(int32_t *)r31 = @"MultiTalkMgr: showMultiTalkTips add view under search bar!";
                                    r2 = 0x2;
                                    asm{ movz       w6, #0x1ed2 };
                                    asm{ movz       x3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    objc_msgSend(iConsole, r27);
                            }
                            else {
                                    r26 = *(int32_t *)(r31 + 0x18);
                                    r0 = [r21 view];
                                    r27 = r22;
                                    r28 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                                    r22 = r20;
                                    r20 = *(int32_t *)(r31 + 0x10);
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r23 = r0;
                                    r2 = *(int32_t *)(r21 + r20);
                                    [r0 addSubview:r2];
                                    [r23 release];
                            }
                            r23 = *(int32_t *)(r21 + r20);
                            [r21 getContentViewY];
                            [r23 setY:r2];
                            r23 = *(int32_t *)(r21 + r20);
                            r0 = objc_msgSend(r21, r22);
                            r0 = [r0 retain];
                            r22 = r0;
                            r24 = [[r0 m_nsUsrName] retain];
                            [r23 updateTipsView:r24];
                            [r24 release];
                            [r22 release];
                            r0 = [UIApplication sharedApplication];
                            r29 = r29;
                            r0 = [r0 retain];
                            r22 = r0;
                            if ([r0 statusBarOrientation] <= 0x4) {
                                    r23 = [DeviceInfo isiPadUniversal];
                                    [r22 release];
                                    if ((r23 & 0x1 << 0x0) == 0x0) {
                                            *(int32_t *)r31 = @"MultiTalkMgr: hideMultiTalkTips orientation is landscape!";
                                            asm{ movz       w6, #0x1ede };
                                            asm{ movz       x3, #0x0 };
                                            asm{ movz       w4, #0x0 };
                                            objc_msgSend(iConsole, r27);
                                            r0 = *(int32_t *)(r21 + r20);
                                            [r0 setHidden:0x1];
                                    }
                            }
                            else {
                                    [r22 release];
                            }
                    }
                    else {
                            asm{ ldrsw      x19, [x8, #0xe28] };
                            r0 = *(int32_t *)(r21 + 0x1039c3000);
                            if (r0 != 0x0) {
                                    [r0 removeFromSuperview];
                                    r0 = *(int32_t *)(r21 + 0x1039c3000);
                                    *(int32_t *)(r21 + 0x1039c3000) = 0x0;
                                    [r0 release];
                                    *(int32_t *)r31 = @"MultiTalkMgr: hideMultiTalkTips for user not in chatroom!";
                                    asm{ movz       w6, #0x1ec5 };
                                    asm{ movz       x3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    objc_msgSend(iConsole, r25);
                            }
                    }
            }
            else {
                    asm{ ldrsw      x19, [x8, #0xe28] };
                    if (*(int32_t *)(r21 + 0x1039c3000) == 0x0) {
                            r0 = [MultiTalkTipsView alloc];
                            r0 = [r0 initWithContact:r26];
                            r8 = *(int32_t *)(r21 + 0x1039c3000);
                            *(int32_t *)(r21 + 0x1039c3000) = r0;
                            [r8 release];
                            r0 = *(int32_t *)(r21 + 0x1039c3000);
                            [r0 setAutoresizingMask:0x2];
                    }
                    r24 = @selector(view);
                    r0 = [r21 view];
                    asm{ stp        x19, x26, [sp, #0x10] };
                    r20 = r22;
                    r0 = [r0 retain];
                    r23 = r0;
                    r0 = [r0 subviews];
                    r22 = r25;
                    r26 = [r0 retain];
                    asm{ ldrsw      x19, [x8, #0xd9c] };
                    r0 = *(int32_t *)(r21 + 0x1039c3000);
                    r25 = @selector(searchBar);
                    r0 = [r0 searchBar];
                    r29 = r29;
                    r27 = [r0 retain];
                    r28 = [r26 containsObject:r27];
                    [r27 release];
                    [r26 release];
                    [r23 release];
                    if (r28 != 0x0) {
                            r26 = *(int32_t *)(r31 + 0x18);
                            r0 = [r21 view];
                            r27 = r22;
                            r28 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                            r22 = r20;
                            r20 = *(int32_t *)(r31 + 0x10);
                            r23 = [r0 retain];
                            r24 = *(int32_t *)(r21 + r20);
                            r0 = *(int32_t *)(r21 + 0x1039c3000);
                            r0 = [r0 searchBar];
                            r29 = r29;
                            r25 = [r0 retain];
                            [r23 insertSubview:r24 belowSubview:r25];
                            [r25 release];
                            [r23 release];
                            *(int32_t *)r31 = @"MultiTalkMgr: showMultiTalkTips add view under search bar!";
                            r2 = 0x2;
                            asm{ movz       w6, #0x1ed2 };
                            asm{ movz       x3, #0x0 };
                            asm{ movz       w4, #0x0 };
                            objc_msgSend(iConsole, r27);
                    }
                    else {
                            r26 = *(int32_t *)(r31 + 0x18);
                            r0 = [r21 view];
                            r27 = r22;
                            r28 = "/Users/ioscmechine/Desktop/hudson/workspace/release_appstore_6.5.3_v2/MMMain/Message/Controller/MsgViewController/BaseMsgContentViewController.mm";
                            r22 = r20;
                            r20 = *(int32_t *)(r31 + 0x10);
                            r29 = r29;
                            r0 = [r0 retain];
                            r23 = r0;
                            r2 = *(int32_t *)(r21 + r20);
                            [r0 addSubview:r2];
                            [r23 release];
                    }
                    r23 = *(int32_t *)(r21 + r20);
                    [r21 getContentViewY];
                    [r23 setY:r2];
                    r23 = *(int32_t *)(r21 + r20);
                    r0 = objc_msgSend(r21, r22);
                    r0 = [r0 retain];
                    r22 = r0;
                    r24 = [[r0 m_nsUsrName] retain];
                    [r23 updateTipsView:r24];
                    [r24 release];
                    [r22 release];
                    r0 = [UIApplication sharedApplication];
                    r29 = r29;
                    r0 = [r0 retain];
                    r22 = r0;
                    if ([r0 statusBarOrientation] <= 0x4) {
                            r23 = [DeviceInfo isiPadUniversal];
                            [r22 release];
                            if ((r23 & 0x1 << 0x0) == 0x0) {
                                    *(int32_t *)r31 = @"MultiTalkMgr: hideMultiTalkTips orientation is landscape!";
                                    asm{ movz       w6, #0x1ede };
                                    asm{ movz       x3, #0x0 };
                                    asm{ movz       w4, #0x0 };
                                    objc_msgSend(iConsole, r27);
                                    r0 = *(int32_t *)(r21 + r20);
                                    [r0 setHidden:0x1];
                            }
                    }
                    else {
                            [r22 release];
                    }
            }
    }
    else {
            r0 = *(int32_t *)(0x1039c3000 + 0x380);
            *(int32_t *)r31 = @"MultiTalkMgr: hideMultiTalkTips for contact is nil!";
            asm{ movz       w6, #0x1ebc };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            objc_msgSend(r0, r25);
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r26 release];
    return;
}

- (void)hideTrackRoomTips
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xe2c] };
    r0 = *(int32_t *)(self + r20);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = 0x0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r0 release];
    return;
}

- (void)hideMultiTalkTips
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"MultiTalkMgr: hideMultiTalkTips!";
    asm{ movz       w6, #0x1ee9 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    asm{ ldrsw      x20, [x8, #0xe28] };
    r0 = *(int32_t *)(self + r20);
    [r0 removeFromSuperview];
    r0 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = 0x0;
    0x0 = 0x10 - 0x10;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r0 release];
    return;
}

- (void)alertView:(id)arg2 clickedButtonAtIndex:(id)arg3 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r21 = arg3;
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    r22 = @selector(tag);
    r0 = [r0 tag];
    asm{ movz       w8, #0x41a0 };
    if (r0 != 0x103953000) goto loc_101d3cfd8;
    goto loc_101d3cec4;

loc_101d3cfd8:
    r0 = [r19 tag];
    asm{ movz       w8, #0x41a2 };
    if (r0 != 0x103953000) goto loc_101d3d0dc;
    goto loc_101d3cff0;

loc_101d3d0dc:
    r0 = [r19 tag];
    asm{ movz       w8, #0x41a1 };
    if (r0 != 0x103953000) goto loc_101d3d1e0;
    goto loc_101d3d0f4;

loc_101d3d1e0:
    r0 = [r19 tag];
    asm{ movz       w8, #0x41a4 };
    if (r0 != 0x103953000) goto loc_101d3d41c;
    goto loc_101d3d1f8;

loc_101d3d41c:
    r0 = [r19 tag];
    asm{ movz       w8, #0x41a5 };
    if (r0 == 0x103953000) {
            if ([r19 cancelButtonIndex] != r21) {
                    r21 = [[r19 getAttachedObjectForKey:@"path"] retain];
                    r0 = [r19 getAttachedObjectForKey:@"thumb"];
                    r22 = [r0 retain];
                    asm{ movz       x4, #0x0 };
                    [r20 sendShortVideoMsg:r21 thumbImg:r22 statInfo:STK-1];
                    [r22 release];
                    [r21 release];
            }
            [r19 detachObjectForKey:@"path"];
            [r19 detachObjectForKey:@"thumb"];
    }

loc_101d3d4f0:
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;

loc_101d3d1f8:
    r0 = [SettingUtil getMainSettingExt];
    r0 = [r0 retain];
    r22 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setM_bShowShareLocationTip:r2];
    [r22 release];
    r25 = [[MMServiceCenter defaultCenter] retain];
    r2 = [AccountStorageMgr class];
    r0 = [r25 getService:r2];
    r0 = [r0 retain];
    r26 = r0;
    [r0 SaveSettingExt];
    [r26 release];
    [r25 release];
    r21 = [[r19 buttonTitleAtIndex:r21] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r22 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Confirm"];
    r29 = 0x50;
    r24 = [r0 retain];
    r25 = [r21 isEqualToString:r24];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if (r25 == 0x0) goto loc_101d3d4f0;
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r21 = r20 + 0x1039e8000;
    r23 = objc_loadWeakRetained(r21);
    if (r23 == 0x0) goto loc_101d3d4f0;
    r0 = objc_loadWeakRetained(r21);
    r22 = @selector(openTrackRoom:);
    r25 = [r0 respondsToSelector:r22];
    [r0 release];
    [r23 release];
    if (r25 == 0x0) goto loc_101d3d4f0;
    r21 = objc_loadWeakRetained(r21);
    asm{ ldrsw      x8, [x8, #0xe54] };
    r2 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [NSNumber numberWithUnsignedInteger:r2];
    r23 = [r0 retain];
    [r21 openTrackRoom:r2];
    [r23 release];

loc_101d3cfcc:
    [r21 release];
    goto loc_101d3d4f0;

loc_101d3d0f4:
    r21 = [[r19 buttonTitleAtIndex:r21] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x103338000 defaultTo:@"ShareLocation_Alert_Someone_Is_Tracking_Join"];
    r24 = [r0 retain];
    r25 = [r21 isEqualToString:r24];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if (r25 != 0x0) {
            [r20 onOpenTrackRoom:0x2];
    }
    goto loc_101d3d4f0;

loc_101d3cff0:
    r21 = [[r19 buttonTitleAtIndex:r21] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x103338000 defaultTo:@"ShareLocation_Alert_Button_Open_Track"];
    r24 = [r0 retain];
    r25 = [r21 isEqualToString:r24];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if (r25 != 0x0) {
            [r20 onOpenTrackRoom:0x2];
    }
    goto loc_101d3d4f0;

loc_101d3cec4:
    r21 = [[r19 buttonTitleAtIndex:r21] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 getStringForCurLanguage:0x10325c000 defaultTo:@"Common_Confirm"];
    r24 = [r0 retain];
    r25 = [r21 isEqualToString:r24];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if (r25 == 0x0) goto loc_101d3d4f0;
    [r20 DismissMyselfAnimated:0x1];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
    r21 = r0;
    [r0 exitTracking];
    goto loc_101d3cfcc;
}

- (void)onTrackRoomTipsViewClick
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r2 = 0x1;
    [self hideToolViewAnimated:r2];
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r20 = self + 0x1039e8000;
    r0 = objc_loadWeakRetained(r20);
    r21 = r0;
    if (r21 != 0x0) {
            r0 = objc_loadWeakRetained(r20);
            r19 = @selector(openTrackRoom:);
            r23 = [r0 respondsToSelector:r19];
            [r0 release];
            r0 = [r21 release];
            if (r23 != 0x0) {
                    r20 = objc_loadWeakRetained(r20);
                    asm{ movz       x2, #0x0 };
                    r0 = [NSNumber numberWithUnsignedInteger:r2];
                    r21 = [r0 retain];
                    [r20 openTrackRoom:r2];
                    [r21 release];
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    r0 = [r20 release];
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        x24, x23, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        x24, x23, [sp], #0x40 };
            return;
    }
    return;
}

- (id)ToolViewStatusCanSupportAutorotateToInterfaceOrientation:(id)arg2 
{
    r2 = arg2;
    r0 = self;
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r8 = *(int32_t *)(r0 + 0x1039e8000);
    if (r8 == 0x1) {
            if (r2 <= 0x4) {
                    asm{ ldrsw      x8, [x8, #0xdd4] };
                    r0 = *(int32_t *)(r0 + 0x1039e8000);
                    r0 = [r0 textView];
                    r0 = [r0 retain];
                    r20 = [r0 isFirstResponder];
                    [r0 release];
            }
            else {
                    asm{ cset       w20, eq };
            }
    }
    else {
            asm{ cset       w20, lo };
    }
    r0 = r20;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    return r0;
}

- (void)rotate:(id)arg2 duration:(id)arg3 
{
    r3 = arg3;
    asm{ stp        d11, d10, [sp, #0xffffff80]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    r29 = 0x70;
    0x0 = 0x0 - 0x120;
    r21 = arg2;
    r20 = self;
    r28 = *(int32_t *)__stack_chk_guard;
    r28 = *(int32_t *)r28;
    asm{ stur       x28, [x29, #0xffffff88] };
    r22 = @selector(isiPadUniversal);
    r0 = [DeviceInfo isiPadUniversal];
    if (r0 == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd78] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            r0 = [r0 viewAlreadyShow];
            if (r0 != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd8c] };
                    r8 = *(int32_t *)(r20 + 0x1039e8000);
                    if (r8 != 0x1) {
                            asm{ ldrsw      x8, [x8, #0xeac] };
                            r8 = *(int8_t *)(r20 + 0x1039e8000);
                            if (r8 == 0x0) {
                                    asm{ ldrsw      x8, [x8, #0xd6c] };
                                    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                                    r23 = r0;
                                    [r0 viewWillRotateToOrientation:r21];
                                    *(int32_t *)(r31 + 0x20) = r20 + 0x1039e8000;
                                    [r23 release];
                                    r24 = @selector(checkTips:);
                                    r2 = 0x1;
                                    [r20 checkTips:r2];
                                    asm{ ldrsw      x8, [x8, #0xd8c] };
                                    *(int32_t *)(r31 + 0x28) = 0x1039e8000;
                                    r8 = *(int32_t *)(r20 + 0x1039e8000);
                                    *(int32_t *)(r31 + 0x18) = r8;
                                    if (r8 != r21) {
                                            asm{ ldrsw      x8, [x8, #0xd94] };
                                            if (*(int8_t *)(r20 + 0x1039e8000) == 0x0) {
                                                    asm{ ldrsw      x8, [x8, #0xd74] };
                                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                                    r0 = [r0 tableHeaderView];
                                                    r29 = 0x70;
                                                    r0 = [r0 retain];
                                                    r23 = r0;
                                                    [r0 frame];
                                                    *(int32_t *)(r31 + 0x10) = r21;
                                                    [r23 release];
                                                    asm{ stp        xzr, xzr, [sp, #0x88] };
                                                    asm{ stp        xzr, xzr, [sp, #0x78] };
                                                    asm{ stp        xzr, xzr, [sp, #0x68] };
                                                    asm{ stp        xzr, xzr, [sp, #0x58] };
                                                    asm{ ldrsw      x8, [x8, #0xd70] };
                                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                                    r0 = [r0 retain];
                                                    r23 = r0;
                                                    r2 = 0x58;
                                                    r3 = 0x98;
                                                    r26 = [r0 countByEnumeratingWithState:r2 objects:r3 count:STK-1];
                                                    if (r26 != 0x0) {
                                                            r19 = 0x103950000;
                                                            r28 = **(int32_t *)(r31 + 0x68);
                                                            r25 = *(int32_t *)(r19 + 0xa18);
                                                            do {
                                                                    asm{ movz       x19, #0x0 };
                                                                    r27 = *(int32_t *)(0x10399f000 + 0xaa8);
                                                                    do {
                                                                            if (**(int32_t *)(r31 + 0x68) != r28) {
                                                                                    objc_enumerationMutation(r23);
                                                                            }
                                                                            r0 = *(int32_t *)(*(int32_t *)(r31 + 0x60) + r19 * 0x8);
                                                                            objc_msgSend(r0, r27);
                                                                            r19 = r19 + 0x1;
                                                                    } while (r19 < r26);
                                                                    r2 = 0x58;
                                                                    r3 = 0x98;
                                                                    r26 = objc_msgSend(r23, r25);
                                                            } while (r26 != 0x0);
                                                    }
                                                    [r23 release];
                                                    r28 = *(int32_t *)__stack_chk_guard;
                                                    r28 = *(int32_t *)r28;
                                                    r21 = *(int32_t *)(r31 + 0x10);
                                            }
                                    }
                                    asm{ ldrsw      x27, [x8, #0xdd4] };
                                    r0 = *(int32_t *)(r20 + r27);
                                    [r0 layoutSubviews];
                                    r0 = *(int32_t *)(r20 + r27);
                                    r23 = @selector(textView);
                                    r0 = [r0 textView];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r25 = r0;
                                    [r0 layoutSubviews];
                                    [r25 release];
                                    if (r21 < 0x5) {
                                            r2 = [*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal];
                                            [r20 checkTips:r2];
                                            r0 = *(int32_t *)(0x1039c3000 + 0x5c8);
                                            r0 = [r0 isiPadUniversal];
                                            r25 = *(int32_t *)(r31 + 0x28);
                                            if ((r0 & 0x1 << 0x0) == 0x0) {
                                                    asm{ ldrsw      x8, [x8, #0xe34] };
                                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                                    r2 = 0x1;
                                                    [r0 setHidden:r2];
                                            }
                                            if (*(int32_t *)(r20 + r25) <= 0x2) {
                                                    if (([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] & 0x1 << 0x0) == 0x0) {
                                                            asm{ ldrsw      x8, [x8, #0xe2c] };
                                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                                            [r0 setHidden:0x1];
                                                    }
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    r0 = [r0 textView];
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r22 = r0;
                                                    [r0 adjustSize];
                                                    [r22 release];
                                                    r2 = r21;
                                                    [r20 updateTableLayoutAnimateDuration:r2 Orientation:r3];
                                                    asm{ ldrsw      x19, [x8, #0xd74] };
                                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                                    [r0 width];
                                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                                    [r0 height];
                                                    asm{ ldrsw      x21, [x8, #0xe0c] };
                                                    r0 = *(int32_t *)(r20 + r21);
                                                    [r0 height];
                                                    r0 = *(int32_t *)(r20 + r21);
                                                    [r0 width];
                                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                                    asm{ fdiv       d9, d9, d0 };
                                                    [r0 width];
                                                    asm{ fmul       d9, d9, d0 };
                                                    r22 = *(int32_t *)(r20 + r21);
                                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                                    [r0 frame];
                                                    [r22 setFrame:r2];
                                                    [UiUtil statusBarHeight];
                                                    r0 = *(int32_t *)(r20 + r21);
                                                    r21 = r21;
                                                    asm{ movi.16b   v0, #0x0 };
                                                    [r0 setFrame:r2];
                                            }
                                    }
                                    else {
                                            r25 = *(int32_t *)(r31 + 0x28);
                                            if ((r21 == 0x1) && (*(int32_t *)(r20 + r25) <= 0x4)) {
                                                    asm{ ldrsw      x8, [x8, #0xe2c] };
                                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                                    asm{ movz       w2, #0x0 };
                                                    [r0 setHidden:r2];
                                                    if (([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] & 0x1 << 0x0) == 0x0) {
                                                            r0 = [r20 navigationController];
                                                            r29 = r29;
                                                            r0 = [r0 retain];
                                                            r24 = r0;
                                                            asm{ movz       w2, #0x0 };
                                                            [r0 setNavigationBarHidden:r2];
                                                            [r24 release];
                                                    }
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    r24 = [r0 isFirstResponder];
                                                    if ([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] != 0x0) {
                                                            r0 = *(int32_t *)(r20 + r27);
                                                            r0 = [r0 textView];
                                                            r29 = r29;
                                                            r0 = [r0 retain];
                                                            r22 = r0;
                                                            [r0 adjustSize];
                                                            [r22 release];
                                                    }
                                                    if (r24 != 0x0) {
                                                            *(int32_t *)r31 = @"landscpaeInputToolView is shown";
                                                            asm{ movz       w6, #0x1f68 };
                                                            asm{ movz       x3, #0x0 };
                                                            asm{ movz       w4, #0x0 };
                                                            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                                            r0 = *(int32_t *)(r20 + r27);
                                                            r0 = [r0 textView];
                                                            r0 = [r0 retain];
                                                            r22 = r0;
                                                            [r0 becomeFirstResponder];
                                                            [r22 release];
                                                            r0 = *(int32_t *)(r20 + r27);
                                                            asm{ movz       w3, #0x0 };
                                                            [r0 setPoisitionMode:0x2 animated:r3];
                                                            r0 = *(int32_t *)(r20 + r27);
                                                            asm{ movz       w3, #0x0 };
                                                            [r0 setContentMode:0x1 animated:r3];
                                                            r0 = [r20 GetContact];
                                                            r29 = r29;
                                                            r22 = [r0 retain];
                                                            r2 = [CEnterpriseContact class];
                                                            r23 = [r22 isKindOfClass:r2];
                                                            [r22 release];
                                                            r0 = *(int32_t *)(r20 + r27);
                                                            r1 = @selector(setInputMode:animated:);
                                                            if (r23 == 0x0) {
                                                            }
                                                            asm{ movz       w3, #0x0 };
                                                            [r0 setInputMode:r2 animated:r1];
                                                            [r20 updateToolViewOrigin];
                                                    }
                                                    else {
                                                            r0 = *(int32_t *)(r20 + r27);
                                                            [r0 resignFirstResponder];
                                                            r22 = *(int32_t *)(r20 + r27);
                                                            r2 = [r22 contentMode];
                                                            asm{ movz       w3, #0x0 };
                                                            [r22 setContentMode:r2 animated:r3];
                                                            r22 = *(int32_t *)(r20 + r27);
                                                            r2 = [r22 inputMode];
                                                            asm{ movz       w3, #0x0 };
                                                            [r22 setInputMode:r2 animated:r3];
                                                            r22 = *(int32_t *)(r20 + r27);
                                                            r2 = [r22 positionMode];
                                                            asm{ movz       w3, #0x0 };
                                                            [r22 setPoisitionMode:r2 animated:r3];
                                                    }
                                                    [r20 updateTableLayoutAnimateDuration:0x1 Orientation:r3];
                                                    [r20 reloadBackgroundView];
                                                    r0 = [r20 title];
                                                    r29 = r29;
                                                    r22 = [r0 retain];
                                                    r2 = r22;
                                                    [r20 updateTitleView:r2];
                                                    [r22 release];
                                            }
                                    }
                                    r0 = *(int32_t *)(r20 + r27);
                                    r22 = @selector(contentMode);
                                    if ([r0 contentMode] == 0x4) {
                                            r0 = *(int32_t *)(r20 + r27);
                                            [r0 resetVoiceInputView];
                                    }
                                    if ([*(int32_t *)(r20 + r27) contentMode] == 0x3) {
                                            r0 = *(int32_t *)(r20 + r27);
                                            [r0 resetSelectAttachmentView];
                                    }
                                    asm{ ldrsw      x19, [x8, #0xd88] };
                                    r22 = *(int32_t *)(r20 + 0x1039c3000);
                                    [UiUtil screenWidthCurOri];
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    r23 = @selector(frame);
                                    [r0 frame];
                                    asm{ fsub       d0, d8, d2 };
                                    asm{ fcvtzs     w8, d0 };
                                    asm{ cinc       w8, w8, lt };
                                    asm{ scvtf      d8, w8 };
                                    asm{ ldrsw      x8, [x8, #0xe08] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    [r0 frame];
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    [r0 frame];
                                    asm{ fsub       d0, d9, d3 };
                                    asm{ fcvtzs     w8, d0 };
                                    asm{ cinc       w8, w8, lt };
                                    asm{ scvtf      d9, w8 };
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    [r0 frame];
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    [r0 frame];
                                    [r22 setFrame:r2];
                                    asm{ ldrsw      x8, [x8, #0xe50] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    r2 = r21;
                                    [r0 rotateToOrientaion:r2];
                                    *(int32_t *)(r20 + r25) = r21;
                                    asm{ ldrsw      x8, [x8, #0xd74] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    [r0 reloadData];
                                    asm{ ldp        x8, x23, [sp, #0x18] };
                                    if (0x103950000 != r21) {
                                            asm{ ldrsw      x19, [x8, #0xd94] };
                                            if (*(int8_t *)(r20 + 0x1039c3000) != 0x0) {
                                                    asm{ movz       w2, #0x0 };
                                                    asm{ movz       w3, #0x0 };
                                                    [r20 scrollTableToBottomAnimated:r2 init:r3];
                                                    *(int8_t *)(r20 + 0x1039c3000) = 0x0;
                                            }
                                            else {
                                                    *(int32_t *)(r31 + 0x30) = *(int32_t *)_NSConcreteStackBlock;
                                                    asm{ movz       w8, #0xc200, lsl #16 };
                                                    asm{ stp        w8, wzr, [sp, #0x38] };
                                                    asm{ nop         };
                                                    *(int32_t *)(r31 + 0x40) = 0x101d3e1c0;
                                                    *(int32_t *)(r31 + 0x48) = 0x103218940;
                                                    [r20 retain];
                                                    *(int32_t *)(r31 + 0x50) = r20;
                                                    asm{ movi.16b   v0, #0x0 };
                                                    asm{ movz       x3, #0x0 };
                                                    [UIView animateWithDuration:0x30 animations:r3 completion:STK-1];
                                                    r0 = *(int32_t *)(r31 + 0x50);
                                                    [r0 release];
                                            }
                                    }
                                    r0 = objc_loadWeakRetained(r23);
                                    r20 = r0;
                                    r8 = 0x1039a0000;
                                    [r0 viewDidRotateToOrientation:r21];
                                    r0 = [r20 release];
                            }
                    }
            }
            else {
                    asm{ ldrsw      x8, [x8, #0xeac] };
                    r8 = *(int8_t *)(r20 + 0x1039e8000);
                    if (r8 == 0x0) {
                            asm{ ldrsw      x8, [x8, #0xd6c] };
                            r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                            r23 = r0;
                            [r0 viewWillRotateToOrientation:r21];
                            *(int32_t *)(r31 + 0x20) = r20 + 0x1039e8000;
                            [r23 release];
                            r24 = @selector(checkTips:);
                            r2 = 0x1;
                            [r20 checkTips:r2];
                            asm{ ldrsw      x8, [x8, #0xd8c] };
                            *(int32_t *)(r31 + 0x28) = 0x1039e8000;
                            r8 = *(int32_t *)(r20 + 0x1039e8000);
                            *(int32_t *)(r31 + 0x18) = r8;
                            if (r8 != r21) {
                                    asm{ ldrsw      x8, [x8, #0xd94] };
                                    if (*(int8_t *)(r20 + 0x1039e8000) == 0x0) {
                                            asm{ ldrsw      x8, [x8, #0xd74] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            r0 = [r0 tableHeaderView];
                                            r29 = 0x70;
                                            r0 = [r0 retain];
                                            r23 = r0;
                                            [r0 frame];
                                            *(int32_t *)(r31 + 0x10) = r21;
                                            [r23 release];
                                            asm{ stp        xzr, xzr, [sp, #0x88] };
                                            asm{ stp        xzr, xzr, [sp, #0x78] };
                                            asm{ stp        xzr, xzr, [sp, #0x68] };
                                            asm{ stp        xzr, xzr, [sp, #0x58] };
                                            asm{ ldrsw      x8, [x8, #0xd70] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            r0 = [r0 retain];
                                            r23 = r0;
                                            r2 = 0x58;
                                            r3 = 0x98;
                                            r26 = [r0 countByEnumeratingWithState:r2 objects:r3 count:STK-1];
                                            if (r26 != 0x0) {
                                                    r19 = 0x103950000;
                                                    r28 = **(int32_t *)(r31 + 0x68);
                                                    r25 = *(int32_t *)(r19 + 0xa18);
                                                    do {
                                                            asm{ movz       x19, #0x0 };
                                                            r27 = *(int32_t *)(0x10399f000 + 0xaa8);
                                                            do {
                                                                    if (**(int32_t *)(r31 + 0x68) != r28) {
                                                                            objc_enumerationMutation(r23);
                                                                    }
                                                                    r0 = *(int32_t *)(*(int32_t *)(r31 + 0x60) + r19 * 0x8);
                                                                    objc_msgSend(r0, r27);
                                                                    r19 = r19 + 0x1;
                                                            } while (r19 < r26);
                                                            r2 = 0x58;
                                                            r3 = 0x98;
                                                            r26 = objc_msgSend(r23, r25);
                                                    } while (r26 != 0x0);
                                            }
                                            [r23 release];
                                            r28 = *(int32_t *)__stack_chk_guard;
                                            r28 = *(int32_t *)r28;
                                            r21 = *(int32_t *)(r31 + 0x10);
                                    }
                            }
                            asm{ ldrsw      x27, [x8, #0xdd4] };
                            r0 = *(int32_t *)(r20 + r27);
                            [r0 layoutSubviews];
                            r0 = *(int32_t *)(r20 + r27);
                            r23 = @selector(textView);
                            r0 = [r0 textView];
                            r29 = r29;
                            r0 = [r0 retain];
                            r25 = r0;
                            [r0 layoutSubviews];
                            [r25 release];
                            if (r21 < 0x5) {
                                    r2 = [*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal];
                                    [r20 checkTips:r2];
                                    r0 = *(int32_t *)(0x1039c3000 + 0x5c8);
                                    r0 = [r0 isiPadUniversal];
                                    r25 = *(int32_t *)(r31 + 0x28);
                                    if ((r0 & 0x1 << 0x0) == 0x0) {
                                            asm{ ldrsw      x8, [x8, #0xe34] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            r2 = 0x1;
                                            [r0 setHidden:r2];
                                    }
                                    if (*(int32_t *)(r20 + r25) <= 0x2) {
                                            if (([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] & 0x1 << 0x0) == 0x0) {
                                                    asm{ ldrsw      x8, [x8, #0xe2c] };
                                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                                    [r0 setHidden:0x1];
                                            }
                                            r0 = *(int32_t *)(r20 + r27);
                                            r0 = [r0 textView];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r22 = r0;
                                            [r0 adjustSize];
                                            [r22 release];
                                            r2 = r21;
                                            [r20 updateTableLayoutAnimateDuration:r2 Orientation:r3];
                                            asm{ ldrsw      x19, [x8, #0xd74] };
                                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                                            [r0 width];
                                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                                            [r0 height];
                                            asm{ ldrsw      x21, [x8, #0xe0c] };
                                            r0 = *(int32_t *)(r20 + r21);
                                            [r0 height];
                                            r0 = *(int32_t *)(r20 + r21);
                                            [r0 width];
                                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                                            asm{ fdiv       d9, d9, d0 };
                                            [r0 width];
                                            asm{ fmul       d9, d9, d0 };
                                            r22 = *(int32_t *)(r20 + r21);
                                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                                            [r0 frame];
                                            [r22 setFrame:r2];
                                            [UiUtil statusBarHeight];
                                            r0 = *(int32_t *)(r20 + r21);
                                            r21 = r21;
                                            asm{ movi.16b   v0, #0x0 };
                                            [r0 setFrame:r2];
                                    }
                            }
                            else {
                                    r25 = *(int32_t *)(r31 + 0x28);
                                    if ((r21 == 0x1) && (*(int32_t *)(r20 + r25) <= 0x4)) {
                                            asm{ ldrsw      x8, [x8, #0xe2c] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            asm{ movz       w2, #0x0 };
                                            [r0 setHidden:r2];
                                            if (([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] & 0x1 << 0x0) == 0x0) {
                                                    r0 = [r20 navigationController];
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r24 = r0;
                                                    asm{ movz       w2, #0x0 };
                                                    [r0 setNavigationBarHidden:r2];
                                                    [r24 release];
                                            }
                                            r0 = *(int32_t *)(r20 + r27);
                                            r24 = [r0 isFirstResponder];
                                            if ([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] != 0x0) {
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    r0 = [r0 textView];
                                                    r29 = r29;
                                                    r0 = [r0 retain];
                                                    r22 = r0;
                                                    [r0 adjustSize];
                                                    [r22 release];
                                            }
                                            if (r24 != 0x0) {
                                                    *(int32_t *)r31 = @"landscpaeInputToolView is shown";
                                                    asm{ movz       w6, #0x1f68 };
                                                    asm{ movz       x3, #0x0 };
                                                    asm{ movz       w4, #0x0 };
                                                    [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    r0 = [r0 textView];
                                                    r0 = [r0 retain];
                                                    r22 = r0;
                                                    [r0 becomeFirstResponder];
                                                    [r22 release];
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    asm{ movz       w3, #0x0 };
                                                    [r0 setPoisitionMode:0x2 animated:r3];
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    asm{ movz       w3, #0x0 };
                                                    [r0 setContentMode:0x1 animated:r3];
                                                    r0 = [r20 GetContact];
                                                    r29 = r29;
                                                    r22 = [r0 retain];
                                                    r2 = [CEnterpriseContact class];
                                                    r23 = [r22 isKindOfClass:r2];
                                                    [r22 release];
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    r1 = @selector(setInputMode:animated:);
                                                    if (r23 == 0x0) {
                                                    }
                                                    asm{ movz       w3, #0x0 };
                                                    [r0 setInputMode:r2 animated:r1];
                                                    [r20 updateToolViewOrigin];
                                            }
                                            else {
                                                    r0 = *(int32_t *)(r20 + r27);
                                                    [r0 resignFirstResponder];
                                                    r22 = *(int32_t *)(r20 + r27);
                                                    r2 = [r22 contentMode];
                                                    asm{ movz       w3, #0x0 };
                                                    [r22 setContentMode:r2 animated:r3];
                                                    r22 = *(int32_t *)(r20 + r27);
                                                    r2 = [r22 inputMode];
                                                    asm{ movz       w3, #0x0 };
                                                    [r22 setInputMode:r2 animated:r3];
                                                    r22 = *(int32_t *)(r20 + r27);
                                                    r2 = [r22 positionMode];
                                                    asm{ movz       w3, #0x0 };
                                                    [r22 setPoisitionMode:r2 animated:r3];
                                            }
                                            [r20 updateTableLayoutAnimateDuration:0x1 Orientation:r3];
                                            [r20 reloadBackgroundView];
                                            r0 = [r20 title];
                                            r29 = r29;
                                            r22 = [r0 retain];
                                            r2 = r22;
                                            [r20 updateTitleView:r2];
                                            [r22 release];
                                    }
                            }
                            r0 = *(int32_t *)(r20 + r27);
                            r22 = @selector(contentMode);
                            if ([r0 contentMode] == 0x4) {
                                    r0 = *(int32_t *)(r20 + r27);
                                    [r0 resetVoiceInputView];
                            }
                            if ([*(int32_t *)(r20 + r27) contentMode] == 0x3) {
                                    r0 = *(int32_t *)(r20 + r27);
                                    [r0 resetSelectAttachmentView];
                            }
                            asm{ ldrsw      x19, [x8, #0xd88] };
                            r22 = *(int32_t *)(r20 + 0x1039c3000);
                            [UiUtil screenWidthCurOri];
                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                            r23 = @selector(frame);
                            [r0 frame];
                            asm{ fsub       d0, d8, d2 };
                            asm{ fcvtzs     w8, d0 };
                            asm{ cinc       w8, w8, lt };
                            asm{ scvtf      d8, w8 };
                            asm{ ldrsw      x8, [x8, #0xe08] };
                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                            [r0 frame];
                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                            [r0 frame];
                            asm{ fsub       d0, d9, d3 };
                            asm{ fcvtzs     w8, d0 };
                            asm{ cinc       w8, w8, lt };
                            asm{ scvtf      d9, w8 };
                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                            [r0 frame];
                            r0 = *(int32_t *)(r20 + 0x1039c3000);
                            [r0 frame];
                            [r22 setFrame:r2];
                            asm{ ldrsw      x8, [x8, #0xe50] };
                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                            r2 = r21;
                            [r0 rotateToOrientaion:r2];
                            *(int32_t *)(r20 + r25) = r21;
                            asm{ ldrsw      x8, [x8, #0xd74] };
                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                            [r0 reloadData];
                            asm{ ldp        x8, x23, [sp, #0x18] };
                            if (0x103950000 != r21) {
                                    asm{ ldrsw      x19, [x8, #0xd94] };
                                    if (*(int8_t *)(r20 + 0x1039c3000) != 0x0) {
                                            asm{ movz       w2, #0x0 };
                                            asm{ movz       w3, #0x0 };
                                            [r20 scrollTableToBottomAnimated:r2 init:r3];
                                            *(int8_t *)(r20 + 0x1039c3000) = 0x0;
                                    }
                                    else {
                                            *(int32_t *)(r31 + 0x30) = *(int32_t *)_NSConcreteStackBlock;
                                            asm{ movz       w8, #0xc200, lsl #16 };
                                            asm{ stp        w8, wzr, [sp, #0x38] };
                                            asm{ nop         };
                                            *(int32_t *)(r31 + 0x40) = 0x101d3e1c0;
                                            *(int32_t *)(r31 + 0x48) = 0x103218940;
                                            [r20 retain];
                                            *(int32_t *)(r31 + 0x50) = r20;
                                            asm{ movi.16b   v0, #0x0 };
                                            asm{ movz       x3, #0x0 };
                                            [UIView animateWithDuration:0x30 animations:r3 completion:STK-1];
                                            r0 = *(int32_t *)(r31 + 0x50);
                                            [r0 release];
                                    }
                            }
                            r0 = objc_loadWeakRetained(r23);
                            r20 = r0;
                            r8 = 0x1039a0000;
                            [r0 viewDidRotateToOrientation:r21];
                            r0 = [r20 release];
                    }
            }
    }
    else {
            asm{ ldrsw      x8, [x8, #0xeac] };
            r8 = *(int8_t *)(r20 + 0x1039e8000);
            if (r8 == 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r0 = objc_loadWeakRetained(r20 + 0x1039e8000);
                    r23 = r0;
                    [r0 viewWillRotateToOrientation:r21];
                    *(int32_t *)(r31 + 0x20) = r20 + 0x1039e8000;
                    [r23 release];
                    r24 = @selector(checkTips:);
                    r2 = 0x1;
                    [r20 checkTips:r2];
                    asm{ ldrsw      x8, [x8, #0xd8c] };
                    *(int32_t *)(r31 + 0x28) = 0x1039e8000;
                    r8 = *(int32_t *)(r20 + 0x1039e8000);
                    *(int32_t *)(r31 + 0x18) = r8;
                    if (r8 != r21) {
                            asm{ ldrsw      x8, [x8, #0xd94] };
                            if (*(int8_t *)(r20 + 0x1039e8000) == 0x0) {
                                    asm{ ldrsw      x8, [x8, #0xd74] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    r0 = [r0 tableHeaderView];
                                    r29 = 0x70;
                                    r0 = [r0 retain];
                                    r23 = r0;
                                    [r0 frame];
                                    *(int32_t *)(r31 + 0x10) = r21;
                                    [r23 release];
                                    asm{ stp        xzr, xzr, [sp, #0x88] };
                                    asm{ stp        xzr, xzr, [sp, #0x78] };
                                    asm{ stp        xzr, xzr, [sp, #0x68] };
                                    asm{ stp        xzr, xzr, [sp, #0x58] };
                                    asm{ ldrsw      x8, [x8, #0xd70] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    r0 = [r0 retain];
                                    r23 = r0;
                                    r2 = 0x58;
                                    r3 = 0x98;
                                    r26 = [r0 countByEnumeratingWithState:r2 objects:r3 count:STK-1];
                                    if (r26 != 0x0) {
                                            r19 = 0x103950000;
                                            r28 = **(int32_t *)(r31 + 0x68);
                                            r25 = *(int32_t *)(r19 + 0xa18);
                                            do {
                                                    asm{ movz       x19, #0x0 };
                                                    r27 = *(int32_t *)(0x10399f000 + 0xaa8);
                                                    do {
                                                            if (**(int32_t *)(r31 + 0x68) != r28) {
                                                                    objc_enumerationMutation(r23);
                                                            }
                                                            r0 = *(int32_t *)(*(int32_t *)(r31 + 0x60) + r19 * 0x8);
                                                            objc_msgSend(r0, r27);
                                                            r19 = r19 + 0x1;
                                                    } while (r19 < r26);
                                                    r2 = 0x58;
                                                    r3 = 0x98;
                                                    r26 = objc_msgSend(r23, r25);
                                            } while (r26 != 0x0);
                                    }
                                    [r23 release];
                                    r28 = *(int32_t *)__stack_chk_guard;
                                    r28 = *(int32_t *)r28;
                                    r21 = *(int32_t *)(r31 + 0x10);
                            }
                    }
                    asm{ ldrsw      x27, [x8, #0xdd4] };
                    r0 = *(int32_t *)(r20 + r27);
                    [r0 layoutSubviews];
                    r0 = *(int32_t *)(r20 + r27);
                    r23 = @selector(textView);
                    r0 = [r0 textView];
                    r29 = r29;
                    r0 = [r0 retain];
                    r25 = r0;
                    [r0 layoutSubviews];
                    [r25 release];
                    if (r21 < 0x5) {
                            r2 = [*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal];
                            [r20 checkTips:r2];
                            r0 = *(int32_t *)(0x1039c3000 + 0x5c8);
                            r0 = [r0 isiPadUniversal];
                            r25 = *(int32_t *)(r31 + 0x28);
                            if ((r0 & 0x1 << 0x0) == 0x0) {
                                    asm{ ldrsw      x8, [x8, #0xe34] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    r2 = 0x1;
                                    [r0 setHidden:r2];
                            }
                            if (*(int32_t *)(r20 + r25) <= 0x2) {
                                    if (([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] & 0x1 << 0x0) == 0x0) {
                                            asm{ ldrsw      x8, [x8, #0xe2c] };
                                            r0 = *(int32_t *)(r20 + 0x1039e8000);
                                            [r0 setHidden:0x1];
                                    }
                                    r0 = *(int32_t *)(r20 + r27);
                                    r0 = [r0 textView];
                                    r29 = r29;
                                    r0 = [r0 retain];
                                    r22 = r0;
                                    [r0 adjustSize];
                                    [r22 release];
                                    r2 = r21;
                                    [r20 updateTableLayoutAnimateDuration:r2 Orientation:r3];
                                    asm{ ldrsw      x19, [x8, #0xd74] };
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    [r0 width];
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    [r0 height];
                                    asm{ ldrsw      x21, [x8, #0xe0c] };
                                    r0 = *(int32_t *)(r20 + r21);
                                    [r0 height];
                                    r0 = *(int32_t *)(r20 + r21);
                                    [r0 width];
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    asm{ fdiv       d9, d9, d0 };
                                    [r0 width];
                                    asm{ fmul       d9, d9, d0 };
                                    r22 = *(int32_t *)(r20 + r21);
                                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                                    [r0 frame];
                                    [r22 setFrame:r2];
                                    [UiUtil statusBarHeight];
                                    r0 = *(int32_t *)(r20 + r21);
                                    r21 = r21;
                                    asm{ movi.16b   v0, #0x0 };
                                    [r0 setFrame:r2];
                            }
                    }
                    else {
                            r25 = *(int32_t *)(r31 + 0x28);
                            if ((r21 == 0x1) && (*(int32_t *)(r20 + r25) <= 0x4)) {
                                    asm{ ldrsw      x8, [x8, #0xe2c] };
                                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                                    asm{ movz       w2, #0x0 };
                                    [r0 setHidden:r2];
                                    if (([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] & 0x1 << 0x0) == 0x0) {
                                            r0 = [r20 navigationController];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r24 = r0;
                                            asm{ movz       w2, #0x0 };
                                            [r0 setNavigationBarHidden:r2];
                                            [r24 release];
                                    }
                                    r0 = *(int32_t *)(r20 + r27);
                                    r24 = [r0 isFirstResponder];
                                    if ([*(int32_t *)(0x1039c3000 + 0x5c8) isiPadUniversal] != 0x0) {
                                            r0 = *(int32_t *)(r20 + r27);
                                            r0 = [r0 textView];
                                            r29 = r29;
                                            r0 = [r0 retain];
                                            r22 = r0;
                                            [r0 adjustSize];
                                            [r22 release];
                                    }
                                    if (r24 != 0x0) {
                                            *(int32_t *)r31 = @"landscpaeInputToolView is shown";
                                            asm{ movz       w6, #0x1f68 };
                                            asm{ movz       x3, #0x0 };
                                            asm{ movz       w4, #0x0 };
                                            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
                                            r0 = *(int32_t *)(r20 + r27);
                                            r0 = [r0 textView];
                                            r0 = [r0 retain];
                                            r22 = r0;
                                            [r0 becomeFirstResponder];
                                            [r22 release];
                                            r0 = *(int32_t *)(r20 + r27);
                                            asm{ movz       w3, #0x0 };
                                            [r0 setPoisitionMode:0x2 animated:r3];
                                            r0 = *(int32_t *)(r20 + r27);
                                            asm{ movz       w3, #0x0 };
                                            [r0 setContentMode:0x1 animated:r3];
                                            r0 = [r20 GetContact];
                                            r29 = r29;
                                            r22 = [r0 retain];
                                            r2 = [CEnterpriseContact class];
                                            r23 = [r22 isKindOfClass:r2];
                                            [r22 release];
                                            r0 = *(int32_t *)(r20 + r27);
                                            r1 = @selector(setInputMode:animated:);
                                            if (r23 == 0x0) {
                                            }
                                            asm{ movz       w3, #0x0 };
                                            [r0 setInputMode:r2 animated:r1];
                                            [r20 updateToolViewOrigin];
                                    }
                                    else {
                                            r0 = *(int32_t *)(r20 + r27);
                                            [r0 resignFirstResponder];
                                            r22 = *(int32_t *)(r20 + r27);
                                            r2 = [r22 contentMode];
                                            asm{ movz       w3, #0x0 };
                                            [r22 setContentMode:r2 animated:r3];
                                            r22 = *(int32_t *)(r20 + r27);
                                            r2 = [r22 inputMode];
                                            asm{ movz       w3, #0x0 };
                                            [r22 setInputMode:r2 animated:r3];
                                            r22 = *(int32_t *)(r20 + r27);
                                            r2 = [r22 positionMode];
                                            asm{ movz       w3, #0x0 };
                                            [r22 setPoisitionMode:r2 animated:r3];
                                    }
                                    [r20 updateTableLayoutAnimateDuration:0x1 Orientation:r3];
                                    [r20 reloadBackgroundView];
                                    r0 = [r20 title];
                                    r29 = r29;
                                    r22 = [r0 retain];
                                    r2 = r22;
                                    [r20 updateTitleView:r2];
                                    [r22 release];
                            }
                    }
                    r0 = *(int32_t *)(r20 + r27);
                    r22 = @selector(contentMode);
                    if ([r0 contentMode] == 0x4) {
                            r0 = *(int32_t *)(r20 + r27);
                            [r0 resetVoiceInputView];
                    }
                    if ([*(int32_t *)(r20 + r27) contentMode] == 0x3) {
                            r0 = *(int32_t *)(r20 + r27);
                            [r0 resetSelectAttachmentView];
                    }
                    asm{ ldrsw      x19, [x8, #0xd88] };
                    r22 = *(int32_t *)(r20 + 0x1039c3000);
                    [UiUtil screenWidthCurOri];
                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                    r23 = @selector(frame);
                    [r0 frame];
                    asm{ fsub       d0, d8, d2 };
                    asm{ fcvtzs     w8, d0 };
                    asm{ cinc       w8, w8, lt };
                    asm{ scvtf      d8, w8 };
                    asm{ ldrsw      x8, [x8, #0xe08] };
                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                    [r0 frame];
                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                    [r0 frame];
                    asm{ fsub       d0, d9, d3 };
                    asm{ fcvtzs     w8, d0 };
                    asm{ cinc       w8, w8, lt };
                    asm{ scvtf      d9, w8 };
                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                    [r0 frame];
                    r0 = *(int32_t *)(r20 + 0x1039c3000);
                    [r0 frame];
                    [r22 setFrame:r2];
                    asm{ ldrsw      x8, [x8, #0xe50] };
                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                    r2 = r21;
                    [r0 rotateToOrientaion:r2];
                    *(int32_t *)(r20 + r25) = r21;
                    asm{ ldrsw      x8, [x8, #0xd74] };
                    r0 = *(int32_t *)(r20 + 0x1039e8000);
                    [r0 reloadData];
                    asm{ ldp        x8, x23, [sp, #0x18] };
                    if (0x103950000 != r21) {
                            asm{ ldrsw      x19, [x8, #0xd94] };
                            if (*(int8_t *)(r20 + 0x1039c3000) != 0x0) {
                                    asm{ movz       w2, #0x0 };
                                    asm{ movz       w3, #0x0 };
                                    [r20 scrollTableToBottomAnimated:r2 init:r3];
                                    *(int8_t *)(r20 + 0x1039c3000) = 0x0;
                            }
                            else {
                                    *(int32_t *)(r31 + 0x30) = *(int32_t *)_NSConcreteStackBlock;
                                    asm{ movz       w8, #0xc200, lsl #16 };
                                    asm{ stp        w8, wzr, [sp, #0x38] };
                                    asm{ nop         };
                                    *(int32_t *)(r31 + 0x40) = 0x101d3e1c0;
                                    *(int32_t *)(r31 + 0x48) = 0x103218940;
                                    [r20 retain];
                                    *(int32_t *)(r31 + 0x50) = r20;
                                    asm{ movi.16b   v0, #0x0 };
                                    asm{ movz       x3, #0x0 };
                                    [UIView animateWithDuration:0x30 animations:r3 completion:STK-1];
                                    r0 = *(int32_t *)(r31 + 0x50);
                                    [r0 release];
                            }
                    }
                    r0 = objc_loadWeakRetained(r23);
                    r20 = r0;
                    r8 = 0x1039a0000;
                    [r0 viewDidRotateToOrientation:r21];
                    r0 = [r20 release];
            }
    }
    asm{ ldur       x8, [x29, #0xffffff88] };
    if (r28 == r8) {
            0x0 = r29 - 0x70;
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        x26, x25, [sp, #0x30] };
            asm{ ldp        x28, x27, [sp, #0x20] };
            asm{ ldp        d9, d8, [sp, #0x10] };
            asm{ ldp        d11, d10, [sp], #0x80 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)willAnimateRotationToInterfaceOrientation:(id)arg2 duration:(id)arg3 
{
    r0 = [self rotate:arg2 duration:arg3];
    return;
}

- (void)didRotateFromInterfaceOrientation:(id)arg2 
{
    r0 = self;
    if (arg2 <= 0x4) {
            asm{ movz       w2, #0x0 };
            asm{ movz       w3, #0x0 };
            r0 = [r0 scrollTableToBottomAnimated:r2 init:r3];
    }
    else {
            return;
    }
    return;
}

- (void)onVideoVoipViewDidAppear:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r19 = [arg2 retain];
    r0 = [self GetContact];
    r0 = [r0 retain];
    r20 = r0;
    r21 = @selector(m_nsUsrName);
    r22 = [[r0 m_nsUsrName] retain];
    r0 = [r19 m_nsUsrName];
    r29 = 0x30;
    r23 = [r0 retain];
    r24 = [r22 isEqualToString:r23];
    [r23 release];
    [r22 release];
    [r20 release];
    if ((r24 & 0x1 << 0x0) != 0x0) {
            asm{ nop         };
            r20 = [[r19 m_nsUsrName] retain];
            r0 = [NSString generatePrivacyString:r20];
            r29 = 0x30;
            r21 = [r0 retain];
            asm{ stp        x8, x21, [sp] };
            asm{ movz       w6, #0x1fe8 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            [r21 release];
            [r20 release];
    }
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)gestureWillBeginTransition:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r0 = [UIMenuController sharedMenuController];
    r0 = [r0 retain];
    r20 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setMenuVisible:arg2 animated:0x1];
    r0 = [r20 release];
    asm{ ldrsw      x8, [x8, #0xeb0] };
    *(int8_t *)(self + 0x1039e8000) = 0x1;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)gestureWillEndTransition:(id)arg2 isCanceld:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = arg3;
    r21 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xe18] };
    if (*(int32_t *)(r21 + 0x1039e8000) == r19) {
            asm{ ldrsw      x8, [x8, #0xeb0] };
            *(int8_t *)(r21 + 0x1039e8000) = 0x0;
            if ((r20 & 0x1 << 0x0) == 0x0) {
                    r0 = [UIMenuController sharedMenuController];
                    r0 = [r0 retain];
                    r20 = r0;
                    asm{ movz       w2, #0x0 };
                    [r0 setMenuVisible:r2 animated:0x1];
                    [r20 release];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)onMoreOperateWithMsgId:(id)arg2 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    asm{ movz       w0, #0x2a3b };
    asm{ movz       w2, #0x0 };
    asm{ movz       w3, #0x0 };
    r0 = loc_1028e2f90(r0, @"1,0,0", arg2, r3, STK0, STK-1);
    asm{ movz       w0, #0xc9 };
    asm{ movz       w1, #0x14 };
    asm{ movz       w3, #0x0 };
    loc_1029929b8(r0, @"1,0,0", 0x1, r3, STK-1);
    asm{ ldrsw      x8, [x8, #0xe20] };
    r21 = r20 + 0x1039e8000;
    r0 = *(int32_t *)r21;
    if (r0 == 0x0) {
            r0 = [NSMutableArray alloc];
            r0 = [r0 init];
            r8 = *(int32_t *)r21;
            *(int32_t *)r21 = r0;
            [r8 release];
            r0 = *(int32_t *)r21;
    }
    [r0 removeAllObjects];
    r0 = *(int32_t *)r21;
    [r0 addObject:r19];
    asm{ movz       x2, #0x0 };
    [r20 onEditMessage:r19];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)showAlertTooMany
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    0x0 = 0x0 - 0x10;
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r25 = r0;
    r26 = [[r0 getStringForCurLanguage:0x103338000 defaultTo:@"MultiSessionSelect_Alert_TooMany"] retain];
    asm{ movz       w8, #0x64 };
    *(int32_t *)r31 = 0x103950000;
    r19 = [[NSString stringWithFormat:r26] retain];
    [r26 release];
    [r25 release];
    [r20 release];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r20 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r22 = [[r0 getStringForCurLanguage:0x103267000 defaultTo:@"Common_I_Know"] retain];
    [r0 release];
    [r20 release];
    r0 = [MMUIAlertView alloc];
    asm{ movz       x4, #0x0 };
    asm{ movz       x6, #0x0 };
    r20 = [r0 initWithTitle:@"" message:r19 delegate:STK1 cancelButtonTitle:STK0 otherButtonTitles:STK-1];
    [r20 show];
    [r20 release];
    [r22 release];
    0x0 = 0x50 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r19 release];
    return;
}

- (void)OnMultiFavAddMessage
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x25, [x8, #0xe20] };
    r0 = *(int32_t *)(r19 + r25);
    if ((r0 == 0x0) || ([r0 count] < 0x65)) {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r20);
            r21 = r0;
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(addMultiMsgToMyFav:);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    r0 = [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            [r0 addMultiMsgToMyFav:r2];
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            r0 = [r19 showAlertTooMany];
    }
    return;
}

- (void)OnMultiDeleteMessage:(id)arg2 
{
    asm{ stp        x28, x27, [sp, #0xffffffa0]! };
    asm{ stp        x26, x25, [sp, #0x10] };
    asm{ stp        x24, x23, [sp, #0x20] };
    asm{ stp        x22, x21, [sp, #0x30] };
    asm{ stp        x20, x19, [sp, #0x40] };
    asm{ stp        x29, x30, [sp, #0x50] };
    r29 = 0x50;
    0x0 = 0x0 - 0x10;
    r21 = self;
    r20 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xe20] };
    r0 = *(int32_t *)(r21 + 0x1039e8000);
    if ((r0 == 0x0) || ([r0 count] < 0x65)) {
            r22 = [WCActionSheet alloc];
            r0 = [MMServiceCenter defaultCenter];
            *(int32_t *)(r31 + 0x8) = r20;
            r20 = [r0 retain];
            r2 = [MMLanguageMgr class];
            r0 = [r20 getService:r2];
            *(int32_t *)r31 = r20;
            r20 = r22;
            r0 = [r0 retain];
            r22 = r0;
            r24 = [[r0 getStringForCurLanguage:0x103268000 defaultTo:@"Common_Cancel"] retain];
            r25 = [[MMServiceCenter defaultCenter] retain];
            r0 = [r25 getService:[MMLanguageMgr class]];
            r0 = [r0 retain];
            r26 = r0;
            r0 = [r0 getStringForCurLanguage:0x103260000 defaultTo:@"Common_Delete"];
            r29 = 0x50;
            r27 = [r0 retain];
            asm{ movz       x2, #0x0 };
            asm{ movz       x6, #0x0 };
            r23 = [r20 initWithTitle:0x103260000 delegate:r21 cancelButtonTitle:STK1 destructiveButtonTitle:STK0 otherButtonTitles:STK-1];
            [r27 release];
            [r26 release];
            [r25 release];
            [r24 release];
            [r22 release];
            r0 = *(int32_t *)r31;
            [r0 release];
            r20 = *(int32_t *)(r31 + 0x8);
            [r23 setTag:0x4];
            [r23 showInView:r20];
            [r23 release];
    }
    else {
            [r21 showAlertTooMany];
    }
    0x0 = r29 - 0x50;
    asm{ ldp        x29, x30, [sp, #0x50] };
    asm{ ldp        x20, x19, [sp, #0x40] };
    asm{ ldp        x22, x21, [sp, #0x30] };
    asm{ ldp        x24, x23, [sp, #0x20] };
    asm{ ldp        x26, x25, [sp, #0x10] };
    asm{ ldp        x28, x27, [sp], #0x60 };
    r0 = [r20 release];
    return;
}

- (void)OnMultiForwardMessage
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ ldrsw      x25, [x8, #0xe20] };
    r0 = *(int32_t *)(r19 + r25);
    if ((r0 == 0x0) || ([r0 count] < 0x65)) {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r20);
            r21 = r0;
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(sendMultiMsgToFriend:);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    r0 = [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            [r0 sendMultiMsgToFriend:r2];
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            r0 = [r19 showAlertTooMany];
    }
    return;
}

- (void)OnMultiEmailMessage:(id)arg2 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r19 = self;
    asm{ movz       w0, #0xc9 };
    asm{ movz       w1, #0x23 };
    asm{ movz       w3, #0x0 };
    loc_1029929b8(self, _cmd, 0x1, r3, STK-1);
    asm{ ldrsw      x25, [x8, #0xe20] };
    r0 = *(int32_t *)(r19 + r25);
    if ((r0 == 0x0) || ([r0 count] < 0x65)) {
            asm{ ldrsw      x8, [x8, #0xd6c] };
            r20 = r19 + 0x1039e8000;
            r0 = objc_loadWeakRetained(r20);
            r21 = r0;
            if (r21 != 0x0) {
                    r0 = objc_loadWeakRetained(r20);
                    r22 = @selector(sendMultiMsgByMail:);
                    r24 = [r0 respondsToSelector:r22];
                    [r0 release];
                    r0 = [r21 release];
                    if (r24 != 0x0) {
                            r0 = objc_loadWeakRetained(r20);
                            r20 = r0;
                            [r0 sendMultiMsgByMail:r2];
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            r0 = [r20 release];
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x40] };
                            asm{ ldp        x20, x19, [sp, #0x30] };
                            asm{ ldp        x22, x21, [sp, #0x20] };
                            asm{ ldp        x24, x23, [sp, #0x10] };
                            asm{ ldp        x26, x25, [sp], #0x50 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x40] };
                    asm{ ldp        x20, x19, [sp, #0x30] };
                    asm{ ldp        x22, x21, [sp, #0x20] };
                    asm{ ldp        x24, x23, [sp, #0x10] };
                    asm{ ldp        x26, x25, [sp], #0x50 };
                    return;
            }
    }
    else {
            r0 = [r19 showAlertTooMany];
            asm{ ldp        x29, x30, [sp, #0x40] };
            asm{ ldp        x20, x19, [sp, #0x30] };
            asm{ ldp        x22, x21, [sp, #0x20] };
            asm{ ldp        x24, x23, [sp, #0x10] };
            asm{ ldp        x26, x25, [sp], #0x50 };
            return;
    }
    return;
}

- (void)ShowMultiSelectMoreOperation:(id)arg2 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x1a0;
    *(int32_t *)(r31 + 0x40) = self;
    r8 = *(int32_t *)__stack_chk_guard;
    asm{ stur       x8, [x29, #0xffffff98] };
    r25 = [arg2 retain];
    r0 = [NSMutableArray alloc];
    *(int32_t *)(r31 + 0x60) = [r0 init];
    r26 = @selector(defaultCenter);
    r21 = [[MMServiceCenter defaultCenter] retain];
    r27 = @selector(class);
    r2 = [BrandServiceMgr class];
    r0 = [r21 getService:r2];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 GetBrandUserForConnectMessageType:0x1] retain];
    r0 = *(int32_t *)(r31 + 0x60);
    [r0 addObjectsFromArray:r23];
    [r23 release];
    [r22 release];
    [r21 release];
    r21 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r21 getService:[EnterpriseBrandContactMgr class]];
    r0 = [r0 retain];
    r22 = r0;
    r23 = [[r0 getMainAndChatBrandListForConnectMsgType:0x1] retain];
    r0 = *(int32_t *)(r31 + 0x60);
    [r0 addObjectsFromArray:r23];
    [r23 release];
    [r22 release];
    [r21 release];
    *(int32_t *)(r31 + 0x58) = [[NSMutableArray array] retain];
    *(int32_t *)(r31 + 0x80) = [[NSMutableArray alloc] init];
    r24 = [[MMScrollActionSheetItem alloc] init];
    r19 = [[MMServiceCenter defaultCenter] retain];
    r0 = [r19 getService:[MMLanguageMgr class]];
    r0 = [r0 retain];
    r21 = r0;
    *(int32_t *)(r31 + 0x38) = @selector(getStringForCurLanguage:defaultTo:);
    r22 = [[r0 getStringForCurLanguage:0x1032c2000 defaultTo:@"Webview_shareEmail"] retain];
    [r24 setTitle:r22];
    [r22 release];
    [r21 release];
    [r19 release];
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 imageNamed:@"AS_Email.png"];
    r29 = 0x60;
    r21 = [r0 retain];
    [r24 setIconImg:r21];
    [r21 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x80);
    [r0 addObject:r24];
    asm{ stp        x19, x20, [sp, #0x10] };
    asm{ stp        x28, x27, [sp, #0x20] };
    *(int32_t *)(r31 + 0x30) = r26;
    asm{ stp        x24, x25, [sp, #0x48] };
    asm{ stp        xzr, xzr, [sp, #0x108] };
    asm{ stp        xzr, xzr, [sp, #0xf8] };
    asm{ stp        xzr, xzr, [sp, #0xe8] };
    asm{ stp        xzr, xzr, [sp, #0xd8] };
    r0 = *(int32_t *)(r31 + 0x60);
    r0 = [r0 retain];
    *(int32_t *)(r31 + 0x70) = r0;
    r28 = [r0 countByEnumeratingWithState:0xd8 objects:r29 - 0xe8 count:STK-1];
    if (r28 != 0x0) {
            *(int32_t *)(r31 + 0x78) = **(int32_t *)(r31 + 0xe8);
            *(int32_t *)(r31 + 0x68) = *(int32_t *)(0x103950000 + 0xa18);
            do {
                    asm{ movz       x22, #0x0 };
                    *(int32_t *)(r31 + 0xd0) = @selector(alloc);
                    *(int32_t *)(r31 + 0xc8) = @selector(init);
                    *(int32_t *)(r31 + 0xc0) = @selector(setUserInfo:);
                    *(int32_t *)(r31 + 0xb8) = @selector(getContactDisplayName);
                    *(int32_t *)(r31 + 0xb0) = @selector(setTitle:);
                    *(int32_t *)(r31 + 0xa8) = @selector(defaultCenter);
                    *(int32_t *)(r31 + 0xa0) = @selector(class);
                    *(int32_t *)(r31 + 0x98) = @selector(getService:);
                    *(int32_t *)(r31 + 0x90) = @selector(m_nsUsrName);
                    *(int32_t *)(r31 + 0x88) = @selector(getRoundImage:size:cornerSize:withCategory:);
                    r20 = @selector(setIconImg:);
                    r25 = @selector(addObject:);
                    do {
                            if (**(int32_t *)(r31 + 0xe8) != *(int32_t *)(r31 + 0x78)) {
                                    r0 = *(int32_t *)(r31 + 0x70);
                                    objc_enumerationMutation(r0);
                            }
                            r24 = *(int32_t *)(*(int32_t *)(r31 + 0xe0) + r22 * 0x8);
                            r26 = objc_msgSend(objc_msgSend(MMScrollActionSheetItem, *(int32_t *)(r31 + 0xd0)), *(int32_t *)(r31 + 0xc8));
                            r1 = *(int32_t *)(r31 + 0xc0);
                            objc_msgSend(r26, r1);
                            r27 = [objc_msgSend(r24, *(int32_t *)(r31 + 0xb8)) retain];
                            r1 = *(int32_t *)(r31 + 0xb0);
                            objc_msgSend(r26, r1);
                            r21 = [objc_msgSend(MMServiceCenter, *(int32_t *)(r31 + 0xa8)) retain];
                            objc_msgSend(MMHeadImageMgr, *(int32_t *)(r31 + 0xa0));
                            r19 = [objc_msgSend(r21, *(int32_t *)(r31 + 0x98)) retain];
                            r23 = [objc_msgSend(r24, *(int32_t *)(r31 + 0x90)) retain];
                            r1 = *(int32_t *)(r31 + 0x88);
                            asm{ movz       w4, #0x0 };
                            r0 = objc_msgSend(r19, r1);
                            r29 = r29;
                            r24 = [r0 retain];
                            [r23 release];
                            [r19 release];
                            [r21 release];
                            [r26 setIconImg:r2];
                            r0 = *(int32_t *)(r31 + 0x80);
                            r1 = r25;
                            objc_msgSend(r0, r1);
                            [r24 release];
                            [r27 release];
                            r0 = [r26 release];
                            r22 = r22 + 0x1;
                    } while (r22 < r28);
                    asm{ ldp        x1, x0, [sp, #0x68] };
                    r28 = objc_msgSend(r0, r1);
            } while (r28 != 0x0);
    }
    r0 = *(int32_t *)(r31 + 0x70);
    r0 = [r0 release];
    asm{ ldp        x25, x0, [sp, #0x50] };
    r1 = *(int32_t *)(r31 + 0x10);
    r24 = *(int32_t *)(r31 + 0x48);
    objc_msgSend(r0, r1);
    asm{ ldp        x26, x23, [sp, #0x28] };
    asm{ ldp        x1, x27, [sp, #0x18] };
    r20 = objc_msgSend(MMScrollActionSheet, r1);
    r21 = [objc_msgSend(MMServiceCenter, r23) retain];
    [MMLanguageMgr defaultCenter];
    r0 = [r21 class];
    r0 = [r0 retain];
    r19 = r0;
    r28 = *(int32_t *)(r31 + 0x38);
    r22 = [objc_msgSend(r0, r28) retain];
    r23 = [objc_msgSend(MMServiceCenter, r23) retain];
    [MMLanguageMgr defaultCenter];
    r0 = [r23 class];
    r26 = r25;
    r27 = r24;
    r0 = [r0 retain];
    r24 = r0;
    r0 = objc_msgSend(r0, r28);
    r29 = r29;
    r25 = [r0 retain];
    r2 = *(int32_t *)(r31 + 0x58);
    r0 = [r20 initWithItems:r2 desciption:r22 cancelButtonTitle:STK-1];
    asm{ ldrsw      x20, [x8, #0xeb4] };
    r28 = *(int32_t *)(r31 + 0x40);
    r8 = *(int32_t *)(r28 + r20);
    *(int32_t *)(r28 + r20) = r0;
    [r8 release];
    [r25 release];
    [r24 release];
    [r23 release];
    [r22 release];
    [r19 release];
    [r21 release];
    r0 = *(int32_t *)(r28 + r20);
    [r0 setDelegate:r28];
    r0 = *(int32_t *)(r28 + r20);
    [r0 showInView:r26];
    [r27 release];
    r0 = *(int32_t *)(r31 + 0x80);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x58);
    [r0 release];
    r0 = *(int32_t *)(r31 + 0x70);
    [r0 release];
    r0 = [r26 release];
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (**(int32_t *)__stack_chk_guard == 0x103956000) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            return;
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return;
}

- (void)OnMultiMsgMoreOperation:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r20 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xe20] };
    r0 = *(int32_t *)(r20 + 0x1039e8000);
    if ((r0 == 0x0) || ([r0 count] < 0x65)) {
            [r20 ShowMultiSelectMoreOperation:r19];
    }
    else {
            [r20 showAlertTooMany];
    }
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)scrollActionSheet:(id)arg2 didSelecteItem:(id)arg3 
{
    asm{ stp        x26, x25, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r20 = self;
    r0 = [arg3 retain];
    r19 = r0;
    r21 = [[r0 title] retain];
    r22 = [[MMServiceCenter defaultCenter] retain];
    r2 = [MMLanguageMgr class];
    r0 = [r22 getService:r2];
    r0 = [r0 retain];
    r23 = r0;
    r3 = @"Webview_shareEmail";
    r0 = [r0 getStringForCurLanguage:0x1032c2000 defaultTo:r3];
    r24 = [r0 retain];
    r2 = r24;
    r25 = [r21 isEqualToString:r2];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    if (r25 != 0x0) {
            asm{ movz       x2, #0x0 };
            [r20 OnMultiEmailMessage:r2];
    }
    else {
            r0 = [r19 userInfo];
            r21 = [r0 retain];
            if (r21 != 0x0) {
                    asm{ ldrsw      x8, [x8, #0xd6c] };
                    r22 = r20 + 0x1039e8000;
                    r23 = objc_loadWeakRetained(r22);
                    if (r23 != 0x0) {
                            r0 = objc_loadWeakRetained(r22);
                            r24 = @selector(sendMultiMsgToBrandContact:To:);
                            r26 = [r0 respondsToSelector:r24];
                            [r0 release];
                            [r23 release];
                            if (r26 != 0x0) {
                                    r0 = objc_loadWeakRetained(r22);
                                    r22 = r0;
                                    asm{ ldrsw      x8, [x8, #0xe20] };
                                    [r0 sendMultiMsgToBrandContact:r2 To:r1];
                                    [r22 release];
                            }
                    }
            }
            [r21 release];
    }
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        x26, x25, [sp], #0x50 };
    r0 = [r19 release];
    return;
}

- (void)endSearchAndDisplay
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(r19 + 0x1039e8000);
    r0 = [r0 isEditing];
    if (r0 != 0x0) {
            asm{ movz       x2, #0x0 };
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            r0 = [r19 onEditMessage:r2];
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x10] };
            asm{ ldp        x20, x19, [sp], #0x20 };
            return;
    }
    return;
}

- (id)isContactSizeOverScreen
{
    asm{ stp        d11, d10, [sp, #0xffffffc0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    [self getCurContentSizeHeight];
    asm{ ucvtf      d10, x0 };
    [UiUtil screenHeightCurOri];
    [UiUtil statusBarHeight];
    [UiUtil taskBarHeight];
    asm{ fadd       d0, d9, d0 };
    asm{ fsub       d8, d8, d0 };
    [UiUtil statusBarHeight];
    asm{ fsub       d8, d8, d0 };
    r0 = [UiUtil navigationBarHeightCurOri];
    asm{ fsub       d0, d8, d0 };
    asm{ fadd       d0, d0, d1 };
    asm{ fcmp       d10, d0 };
    asm{ cset       w0, gt };
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x40 };
    return r0;
}

- (id)getInvisibleHeight
{
    asm{ stp        d9, d8, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    [r0 contentOffset];
    [self getCurContentSizeHeight];
    asm{ ucvtf      d9, x0 };
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(self + 0x1039e8000);
    r0 = [self getTableViewVisibleHeightWithOrientation:r2];
    asm{ fsub       d0, d9, d0 };
    asm{ fsub       d0, d0, d8 };
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x30 };
    return r0;
}

- (void)startReceiveMsgWithTips:(id)arg2 
{
    asm{ stp        d13, d12, [sp, #0xffffff70]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x28, x27, [sp, #0x30] };
    asm{ stp        x26, x25, [sp, #0x40] };
    asm{ stp        x24, x23, [sp, #0x50] };
    asm{ stp        x22, x21, [sp, #0x60] };
    asm{ stp        x20, x19, [sp, #0x70] };
    asm{ stp        x29, x30, [sp, #0x80] };
    0x0 = 0x0 - 0x40;
    r21 = self;
    r19 = [arg2 retain];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r21 + 0x1039e8000);
    [r21 getTableViewVisibleHeightWithOrientation:r2];
    r26 = @selector(screenWidthCurOri);
    [UiUtil screenWidthCurOri];
    r28 = @selector(alloc);
    r0 = [UIView alloc];
    asm{ fadd       d1, d8, d0 };
    r27 = @selector(initWithFrame:);
    asm{ movi.16b   v0, #0x0 };
    r20 = [r0 initWithFrame:r2];
    [r21 setM_msgReceivingTipsView:r20];
    [r20 release];
    r0 = [r21 view];
    r0 = [r0 retain];
    r20 = r0;
    asm{ ldrsw      x8, [x8, #0xe48] };
    *(int32_t *)(r31 + 0x30) = 0x1039e8000;
    r2 = *(int32_t *)(r21 + 0x1039e8000);
    *(int32_t *)(r31 + 0x38) = @selector(addSubview:);
    [r0 addSubview:r2];
    [r20 release];
    [UiUtil screenWidthCurOri];
    r0 = [UIImageView alloc];
    asm{ movi.16b   v0, #0x0 };
    asm{ movi.16b   v1, #0x0 };
    r25 = [r0 initWithFrame:r2];
    r23 = @selector(sharedThemeManager);
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r22 = r0;
    r0 = [r0 imageNamed:@"receive_msg_bg.png"];
    r0 = [r0 retain];
    r24 = r0;
    asm{ movz       w2, #0xa };
    r0 = [r0 stretchableImageWithLeftCapWidth:@"receive_msg_bg.png" topCapHeight:0x6];
    r29 = 0x80;
    r20 = [r0 retain];
    [r25 setImage:r20];
    [r20 release];
    [r24 release];
    [r22 release];
    asm{ ldp        x8, x1, [sp, #0x30] };
    r0 = *(int32_t *)(r21 + 0x103952000);
    [r0 setImage:r25];
    r0 = [UIActivityIndicatorView alloc];
    r24 = [r0 initWithActivityIndicatorStyle:0x1];
    r22 = @selector(setFrame:);
    asm{ fmov       d0, #0x1b };
    asm{ fmov       d1, #0x7 };
    asm{ fmov       d2, #0x16 };
    [r24 setFrame:r2];
    [r24 setHidesWhenStopped:0x1];
    r1 = *(int32_t *)(r31 + 0x38);
    r2 = r24;
    objc_msgSend(r25, r1);
    [r24 startAnimating];
    if ([r19 length] == 0x0) {
            r0 = [MMServiceCenter defaultCenter];
            asm{ stp        x24, x19, [sp, #0x18] };
            *(int32_t *)(r31 + 0x28) = r25;
            r25 = [r0 retain];
            r2 = [MMLanguageMgr class];
            r0 = [r25 getService:r2];
            r0 = [r0 retain];
            r24 = r0;
            r2 = 0x103299000;
            r0 = [r0 getStringForCurLanguage:r2 defaultTo:@"BrandMsgReceiving"];
            r29 = 0x80;
            r20 = [r0 retain];
            r0 = *(int32_t *)(r31 + 0x20);
            [r0 release];
            [r24 release];
            [r25 release];
            r19 = r20;
            r25 = *(int32_t *)(r31 + 0x28);
            r24 = *(int32_t *)(r31 + 0x18);
    }
    *(int32_t *)(r31 + 0x10) = r22;
    r20 = [r19 retain];
    asm{ fmov       d0, #0x11 };
    r22 = [[UIFont systemFontOfSize:r2] retain];
    [CControlUtil labelWidth:r20 maxWidth:r22 font:STK-1];
    *(int32_t *)(r31 + 0x8) = r26;
    [CControlUtil labelHeight:r20 maxWidth:r22 font:STK-1];
    *(int32_t *)(r31 + 0x28) = r25;
    r26 = @selector(frame);
    [r24 frame];
    [r24 frame];
    r0 = [MMUILabel alloc];
    asm{ fcvtzs     x19, d8 };
    asm{ fcvtzs     x8, d9 };
    asm{ fadd       d0, d10, d11 };
    asm{ fmov       d1, #0xa };
    asm{ fadd       d0, d0, d1 };
    asm{ scvtf      d2, x19 };
    asm{ scvtf      d3, x8 };
    asm{ fmov       d10, #0x0 };
    asm{ fmul       d1, d13, d10 };
    asm{ fadd       d1, d12, d1 };
    asm{ fmul       d4, d3, d10 };
    asm{ movi.16b   v5, #0x0 };
    asm{ fadd       d4, d4, d5 };
    asm{ fsub       d1, d1, d4 };
    asm{ fadd       d1, d1, d5 };
    r27 = [r0 initWithFrame:r2];
    *(int32_t *)(r31 + 0x18) = r24;
    *(int32_t *)(r31 + 0x20) = r20;
    [r27 setText:r20];
    [r27 setFont:r22];
    r20 = [[UIColor whiteColor] retain];
    [r27 setTextColor:r20];
    [r20 release];
    asm{ movz       x2, #0x0 };
    [r27 setTextAlignment:r20];
    r0 = [MMThemeManager sharedThemeManager];
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 colorList];
    r0 = [r0 retain];
    r28 = r0;
    r0 = [r0 getColorByName:@"clear"];
    r29 = r29;
    r24 = [[r0 retain] retain];
    if (r24 != 0x0) {
            r0 = [r24 retain];
    }
    else {
            r0 = *(int32_t *)(0x1039c3000 + 0x3c0);
            r0 = [r0 clearColor];
            r29 = r29;
            r0 = [r0 retain];
    }
    r20 = r0;
    [r24 release];
    [r27 setBackgroundColor:r20];
    [r20 release];
    [r24 release];
    [r28 release];
    [r23 release];
    asm{ movz       x2, #0x0 };
    [r27 setLineBreakMode:r20];
    asm{ movz       x2, #0x0 };
    [r27 setNumberOfLines:r20];
    r0 = *(int32_t *)(r31 + 0x28);
    r1 = *(int32_t *)(r31 + 0x38);
    objc_msgSend(r0, r1);
    [CControlUtil autoFitRectForLableAllowMultipleLines:r27];
    r20 = *(int32_t *)(r31 + 0x28);
    [r20 frame];
    objc_msgSend(UiUtil, *(int32_t *)(r31 + 0x8));
    asm{ scvtf      d2, x8 };
    asm{ fsub       d0, d0, d2 };
    asm{ fmul       d0, d0, d10 };
    r1 = *(int32_t *)(r31 + 0x10);
    objc_msgSend(r20, r1);
    r0 = *(int32_t *)(r21 + *(int32_t *)(r31 + 0x30));
    asm{ movi.16b   v0, #0x0 };
    r3 = UIGraphicsGetCurrentContext([r0 setAlpha:r27]);
    asm{ movz       x2, #0x0 };
    r19 = *(int32_t *)(r31 + 0x20);
    [UIView beginAnimations:r27 context:r3];
    r0 = *(int32_t *)(r21 + *(int32_t *)(r31 + 0x30));
    asm{ fmov       d0, #0x1 };
    [r0 setAlpha:r27];
    [r21 showReceiveMsgTips];
    asm{ movz       x2, #0x0 };
    [UIView setAnimationCurve:r27];
    [UIView setAnimationDelay:r27];
    [UIView setAnimationBeginsFromCurrentState:0x1];
    [UIView commitAnimations];
    [r27 release];
    [r22 release];
    [r19 release];
    r0 = *(int32_t *)(r31 + 0x18);
    [r0 release];
    [r20 release];
    0x0 = r29 - 0x80;
    asm{ ldp        x29, x30, [sp, #0x80] };
    asm{ ldp        x20, x19, [sp, #0x70] };
    asm{ ldp        x22, x21, [sp, #0x60] };
    asm{ ldp        x24, x23, [sp, #0x50] };
    asm{ ldp        x26, x25, [sp, #0x40] };
    asm{ ldp        x28, x27, [sp, #0x30] };
    asm{ ldp        d9, d8, [sp, #0x20] };
    asm{ ldp        d11, d10, [sp, #0x10] };
    asm{ ldp        d13, d12, [sp], #0x90 };
    r0 = [r19 release];
    return;
}

- (void)stopReceiveMsg
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r19 = self;
    r3 = UIGraphicsGetCurrentContext(self);
    asm{ movz       x2, #0x0 };
    [UIView beginAnimations:r2 context:r3];
    asm{ ldrsw      x22, [x8, #0xe48] };
    r0 = *(int32_t *)(r19 + r22);
    asm{ movi.16b   v0, #0x0 };
    [r0 setAlpha:r2];
    asm{ ldrsw      x20, [x8, #0xea0] };
    if (*(int8_t *)(r19 + r20) != 0x0) {
            [r19 getCurContentSizeHeight];
            asm{ ucvtf      d1, x0 };
            asm{ ldrsw      x8, [x8, #0xd74] };
            r0 = *(int32_t *)(r19 + 0x1039e8000);
            asm{ movi.16b   v0, #0x0 };
            [r0 setContentSize:r2];
    }
    r0 = *(int32_t *)(0x1039c3000 + 0x3f0);
    asm{ movz       x2, #0x0 };
    [r0 setAnimationCurve:r2];
    r0 = *(int32_t *)(0x1039c3000 + 0x3f0);
    [r0 setAnimationDelay:r2];
    r0 = *(int32_t *)(0x1039c3000 + 0x3f0);
    [r0 setAnimationBeginsFromCurrentState:0x1];
    r0 = *(int32_t *)(0x1039c3000 + 0x3f0);
    [r0 commitAnimations];
    r0 = *(int32_t *)(r19 + r22);
    [r0 removeFromSuperview];
    asm{ movz       x2, #0x0 };
    r0 = [r19 setM_msgReceivingTipsView:0x1];
    if (*(int8_t *)(r19 + r20) != 0x0) {
            *(int8_t *)(r19 + r20) = 0x0;
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    return;
}

- (void)showReceiveMsgTips
{
    asm{ stp        d9, d8, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r19 = self;
    r20 = @selector(getInvisibleHeight);
    r0 = [self getInvisibleHeight];
    asm{ fcmp       d0, d1 };
    if (CPU_FLAGS & P) {
            asm{ ldrsw      x8, [x8, #0xea0] };
            if (*(int8_t *)(r19 + 0x1039e8000) == 0x0) {
                    *(int8_t *)(r19 + 0x1039e8000) = 0x1;
                    [r19 getCurContentSizeHeight] + 0x32;
                    asm{ ucvtf      d8, x8 };
                    asm{ ldrsw      x21, [x8, #0xd74] };
                    r0 = *(int32_t *)(r19 + r21);
                    asm{ movi.16b   v0, #0x0 };
                    [r0 setContentSize:r2];
                    r0 = [r19 isContactSizeOverScreen];
                    if (r0 != 0x0) {
                            r0 = [r19 getInvisibleHeight];
                            asm{ fmov       d1, #0x5 };
                            asm{ fcmp       d0, d1 };
                            if (CPU_FLAGS & P) {
                                    [r19 getVisibleHeight];
                                    asm{ fsub       d1, d8, d0 };
                                    r0 = *(int32_t *)(r19 + r21);
                                    asm{ movi.16b   v0, #0x0 };
                                    asm{ movz       w2, #0x0 };
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        d9, d8, [sp], #0x40 };
                                    r0 = [r0 setContentOffset:r2 animated:r3];
                            }
                            else {
                                    asm{ ldp        x29, x30, [sp, #0x30] };
                                    asm{ ldp        x20, x19, [sp, #0x20] };
                                    asm{ ldp        x22, x21, [sp, #0x10] };
                                    asm{ ldp        d9, d8, [sp], #0x40 };
                                    return;
                            }
                    }
                    else {
                            asm{ ldp        x29, x30, [sp, #0x30] };
                            asm{ ldp        x20, x19, [sp, #0x20] };
                            asm{ ldp        x22, x21, [sp, #0x10] };
                            asm{ ldp        d9, d8, [sp], #0x40 };
                            return;
                    }
            }
            else {
                    asm{ ldp        x29, x30, [sp, #0x30] };
                    asm{ ldp        x20, x19, [sp, #0x20] };
                    asm{ ldp        x22, x21, [sp, #0x10] };
                    asm{ ldp        d9, d8, [sp], #0x40 };
                    return;
            }
    }
    else {
            asm{ ldp        x29, x30, [sp, #0x30] };
            asm{ ldp        x20, x19, [sp, #0x20] };
            asm{ ldp        x22, x21, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x40 };
            return;
    }
    return;
}

- (void)MessageReturn:(id)arg2 MessageInfo:(id)arg3 Event:(id)arg4 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r21 = arg2;
    r20 = self;
    r19 = [arg3 retain];
    if (r21 != 0x186) {
            if (r21 == 0x185) {
                    asm{ ldrsw      x8, [x8, #0xddc] };
                    *(int32_t *)(r20 + 0x1039e8000) = 0x0;
            }
    }
    else {
            asm{ ldrsw      x8, [x8, #0xddc] };
            if (*(int32_t *)(r20 + 0x1039e8000) >= 0x2) {
                    asm{ movz       x3, #0x0 };
                    asm{ fmov       d0, #0x3 };
                    [r20 safePerformSelector:@selector(onSYncEnd) withObject:r3 afterDelay:STK-1];
            }
    }
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)onSYncEnd
{
    asm{ stp        d9, d8, [sp, #0xffffffb0]! };
    asm{ stp        x24, x23, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r21 = self;
    r19 = @selector(logWithLevel:module:errorCode:file:line:func:format:);
    r31 = r31 + 0xfffffffffffffff0;
    *(int32_t *)r31 = @"multi revoke in one sync";
    r20 = "BaseMsgContentViewController.mm";
    asm{ movz       w6, #0x2136 };
    asm{ movz       w4, #0x0 };
    objc_msgSend(iConsole, r19);
    asm{ ldrsw      x23, [x8, #0xd74] };
    r0 = *(int32_t *)(r21 + r23);
    [r0 contentOffset];
    asm{ ldrsw      x8, [x8, #0xd8c] };
    r2 = *(int32_t *)(r21 + 0x1039e8000);
    [r21 getTableViewVisibleHeightWithOrientation:r2];
    asm{ fadd       d8, d8, d0 };
    r0 = *(int32_t *)(r21 + r23);
    r0 = [r0 contentSize];
    asm{ fcmp       d8, d1 };
    if (CPU_FLAGS & LE) {
            asm{ movz       w2, #0x0 };
            [r21 ScrollToBottomAnimated:r2];
            r0 = *(int32_t *)(0x1039c3000 + 0x380);
            *(int32_t *)r31 = @"fix table content offset";
            asm{ movz       w6, #0x213a };
            asm{ movz       w4, #0x0 };
            r0 = objc_msgSend(r0, r19);
    }
    0x0 = 0x40 - 0x40;
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        x24, x23, [sp, #0x10] };
    asm{ ldp        d9, d8, [sp], #0x50 };
    return;
}

- (void)onMsgImgWindowWillShowFromMsg:(id)arg2 
{
    r0 = self;
    return;
}

- (void)onMsgImgWindowDidShowFromMsg:(id)arg2 
{
    r0 = self;
    return;
}

- (void)onMsgImgWindowWillHideToMsg:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = self;
    if ([DeviceInfo isiPadUniversal] == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd8c] };
            if (*(int32_t *)(r19 + 0x1039e8000) <= 0x2) {
                    [r19 startForcedRotationToPortrait];
            }
    }
    [r19 updateToolViewOrigin];
    r0 = [UIApplication sharedApplication];
    r0 = [r0 retain];
    r20 = r0;
    r2 = [r0 statusBarOrientation];
    asm{ movi.16b   v0, #0x0 };
    [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 release];
    return;
}

- (void)onMsgImgWindowDidHideToMsg:(id)arg2 
{
    r0 = self;
    return;
}

- (void)onCurrentPageMsgReMoved:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r0 = [self navigationController];
    r0 = [r0 retain];
    r19 = r0;
    asm{ movz       w3, #0x0 };
    r0 = [r0 PopToViewController:self animated:r3];
    r0 = [r0 retain];
    [r0 release];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)onImgMsgLocate:(id)arg2 vc:(id)arg3 
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    r21 = self;
    r19 = [arg2 retain];
    r20 = [arg3 retain];
    if ([r21 getMessageNodePosition:r19] != 0x0) {
            [r21 locateToMsg:r19];
            [r20 onSingleTap];
    }
    else {
            [r20 onSingleTap];
    }
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r19 release];
    return;
}

- (void)onPlayAttachVideo:(id)arg2 vc:(id)arg3 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r21 = self;
    r19 = [arg2 retain];
    r0 = [arg3 retain];
    r20 = r0;
    asm{ movz       w2, #0x0 };
    [r0 setAllowRotate:r2];
    asm{ movz       w2, #0x0 };
    [r20 DismissMyselfAnimated:r2];
    asm{ ldrsw      x8, [x8, #0xd78] };
    r23 = r21 + 0x1039e8000;
    r22 = *(int32_t *)r23;
    if (r22 == 0x0) {
            r0 = [MsgImgFullScreenWindow alloc];
            r0 = [r0 initWithDelegate:r21];
            r8 = *(int32_t *)r23;
            *(int32_t *)r23 = r0;
            [r8 release];
            r22 = *(int32_t *)r23;
    }
    r0 = [r19 GetChatName];
    r21 = [r0 retain];
    [r22 setChatname:r21];
    [r21 release];
    r0 = *(int32_t *)r23;
    [r0 onPlayAttachVideo:r19];
    [r20 release];
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)onSightViewDetail:(id)arg2 vc:(id)arg3 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r19 = [arg2 retain];
    [self onClosePlayerForViewDetail:r19];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r19 release];
    return;
}

- (void)onMsgImgPreviewDataRequired:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r20 = self;
    r0 = [arg2 retain];
    r19 = r0;
    asm{ ldrsw      x8, [x8, #0xd8c] };
    asm{ cset       w2, eq };
    [r0 setShouldRotateToPortrait:r2];
    r21 = @selector(msgWrap);
    r0 = [r19 msgWrap];
    r22 = [r0 retain];
    r23 = [r20 getMessageNodePosition:r22];
    [r22 release];
    r1 = @selector(setIsNodeViewVisible:);
    if (r23 != 0x0) {
            asm{ movz       w2, #0x0 };
            [r19 setIsNodeViewVisible:r2];
    }
    else {
            [r19 setIsNodeViewVisible:r2];
            r0 = [r19 msgWrap];
            r0 = [r0 retain];
            r21 = r0;
            r2 = [r0 m_uiMesLocalID];
            [r20 getNodeRectInScreen:r2];
            [r19 setNodeViewWindowFrame:r2];
            [r21 release];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)onJumpToViewDetail:(id)arg2 
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    r0 = [self safePerformSelector:@selector(jumpToDetail:) withObject:arg2 afterDelay:STK-1];
    asm{ ldp        x29, x30, [sp], #0x10 };
    return;
}

- (id)getMessageNodePosition:(id)arg2 
{
    asm{ stp        d13, d12, [sp, #0xffffff70]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x28, x27, [sp, #0x30] };
    asm{ stp        x26, x25, [sp, #0x40] };
    asm{ stp        x24, x23, [sp, #0x50] };
    asm{ stp        x22, x21, [sp, #0x60] };
    asm{ stp        x20, x19, [sp, #0x70] };
    asm{ stp        x29, x30, [sp, #0x80] };
    0x0 = 0x0 - 0x20;
    r22 = self;
    *(int32_t *)r31 = [arg2 retain];
    asm{ ldrsw      x21, [x8, #0xd74] };
    r19 = *(int32_t *)(r22 + r21);
    [r19 contentOffset];
    r0 = *(int32_t *)(r22 + r21);
    [r0 contentInset];
    r0 = *(int32_t *)(r22 + r21);
    [r0 width];
    r0 = *(int32_t *)(r22 + r21);
    [r0 height];
    r0 = *(int32_t *)(r22 + r21);
    [r0 contentInset];
    r0 = *(int32_t *)(r22 + r21);
    [r0 contentInset];
    asm{ fadd       d1, d8, d10 };
    asm{ fmov       d2, #0xa };
    asm{ fadd       d1, d1, d2 };
    asm{ fsub       d2, d11, d12 };
    asm{ fsub       d0, d2, d0 };
    asm{ fmov       d2, #0xffffffffffffffec };
    asm{ fadd       d3, d0, d2 };
    asm{ movi.16b   v0, #0x0 };
    r0 = [r19 indexPathsForRowsInRect:r2];
    r29 = 0x80;
    [r0 retain];
    asm{ stp        xzr, x0, [sp, #0x10] };
    asm{ movz       x23, #0x0 };
    r24 = @selector(count);
    asm{ nop         };
    *(int32_t *)(r31 + 0x8) = @selector(objectAtIndex:);
    r26 = @selector(section);
    r27 = @selector(objectAtIndexedSubscript:);
    r28 = @selector(messageWrap);
    do {
            if (r23 >= [*(int32_t *)(r31 + 0x18) count]) {
                break;
            }
            r0 = *(int32_t *)(r31 + 0x18);
            r1 = *(int32_t *)(r31 + 0x8);
            r0 = objc_msgSend(r0, r1);
            r0 = [r0 retain];
            r19 = r0;
            asm{ ldrsw      x8, [x8, #0xd70] };
            r20 = *(int32_t *)(r22 + 0x1039e8000);
            r25 = r22;
            [r0 section];
            r0 = [r20 objectAtIndexedSubscript:r2];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 messageWrap];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            [r0 release];
            if ((*(int32_t *)(r31 + 0x10) == 0x0) && (r22 != 0x0)) {
                    *(int32_t *)(r31 + 0x10) = 0x0;
                    r0 = [r20 messageWrap];
                    r29 = r29;
                    *(int32_t *)(r31 + 0x10) = [r0 retain];
                    asm{ movz       w21, #0x0 };
            }
            [r20 release];
            [r19 release];
            r23 = r23 + 0x1;
            r22 = r25;
    } while ((0x1 & 0x1 << 0x0) != 0x0);
    asm{ movz       x23, #0x0 };
    r0 = *(int32_t *)(r31 + 0x18);
    r0 = [r0 count];
    asm{ movz       x23, #0x0 };
    *(int32_t *)(r31 + 0x8) = @selector(objectAtIndex:);
    r25 = @selector(section);
    r26 = @selector(objectAtIndexedSubscript:);
    r27 = r0 - 0x1;
    r28 = @selector(messageWrap);
    do {
            if ((r27 & 0x1 << 0x3f) != 0x0) {
                break;
            }
            r0 = *(int32_t *)(r31 + 0x18);
            r1 = *(int32_t *)(r31 + 0x8);
            r0 = objc_msgSend(r0, r1);
            r0 = [r0 retain];
            r19 = r0;
            asm{ ldrsw      x8, [x8, #0xd70] };
            r20 = *(int32_t *)(r22 + 0x1039e8000);
            r24 = r22;
            [r0 section];
            r0 = [r20 objectAtIndexedSubscript:r2];
            r0 = [r0 retain];
            r20 = r0;
            r0 = [r0 messageWrap];
            r29 = r29;
            r0 = [r0 retain];
            r22 = r0;
            [r0 release];
            if ((r23 == 0x0) && (r22 != 0x0)) {
                    asm{ movz       x23, #0x0 };
                    r0 = [r20 messageWrap];
                    r29 = r29;
                    r23 = [r0 retain];
                    asm{ movz       w21, #0x0 };
            }
            [r20 release];
            [r19 release];
            r27 = r27 - 0x1;
            r22 = r24;
    } while ((0x1 & 0x1 << 0x0) != 0x0);
    r19 = @selector(m_uiCreateTime);
    r21 = *(int32_t *)r31;
    r20 = [r21 m_uiCreateTime];
    if (r20 >= [*(int32_t *)(r31 + 0x10) m_uiCreateTime]) {
            if ([r21 m_uiCreateTime] == [*(int32_t *)(r31 + 0x10) m_uiCreateTime]) {
                    r20 = @selector(m_uiMesLocalID);
                    if ([r21 m_uiMesLocalID] < [*(int32_t *)(r31 + 0x10) m_uiMesLocalID]) {
                            asm{ movn       x20, #0x0 };
                    }
                    else {
                            r22 = [r21 m_uiCreateTime];
                            r0 = [r23 m_uiCreateTime];
                            r20 = 0x1;
                            if (r22 <= r0) {
                                    r20 = [r21 m_uiCreateTime];
                                    if (r20 == [r23 m_uiCreateTime]) {
                                            r19 = [r21 m_uiMesLocalID];
                                            r0 = [r23 m_uiMesLocalID];
                                            r20 = 0x1;
                                            if (r19 <= r0) {
                                                    asm{ movz       x20, #0x0 };
                                            }
                                    }
                                    else {
                                            asm{ movz       x20, #0x0 };
                                    }
                            }
                    }
            }
            else {
                    r22 = [r21 m_uiCreateTime];
                    r0 = [r23 m_uiCreateTime];
                    r20 = 0x1;
                    if (r22 <= r0) {
                            r20 = [r21 m_uiCreateTime];
                            if (r20 == [r23 m_uiCreateTime]) {
                                    r19 = [r21 m_uiMesLocalID];
                                    r0 = [r23 m_uiMesLocalID];
                                    r20 = 0x1;
                                    if (r19 <= r0) {
                                            asm{ movz       x20, #0x0 };
                                    }
                            }
                            else {
                                    asm{ movz       x20, #0x0 };
                            }
                    }
            }
    }
    else {
            asm{ movn       x20, #0x0 };
    }
    r0 = *(int32_t *)(r31 + 0x18);
    [r0 release];
    [r23 release];
    r0 = *(int32_t *)(r31 + 0x10);
    [r0 release];
    [r21 release];
    r0 = r20;
    0x0 = r29 - 0x80;
    asm{ ldp        x29, x30, [sp, #0x80] };
    asm{ ldp        x20, x19, [sp, #0x70] };
    asm{ ldp        x22, x21, [sp, #0x60] };
    asm{ ldp        x24, x23, [sp, #0x50] };
    asm{ ldp        x26, x25, [sp, #0x40] };
    asm{ ldp        x28, x27, [sp, #0x30] };
    asm{ ldp        d9, d8, [sp, #0x20] };
    asm{ ldp        d11, d10, [sp, #0x10] };
    asm{ ldp        d13, d12, [sp], #0x90 };
    return r0;
}

- (id)getInnerVisibleRectInScreen:(id)arg2 
{
    asm{ stp        d15, d14, [sp, #0xffffff80]! };
    asm{ stp        d13, d12, [sp, #0x10] };
    asm{ stp        d11, d10, [sp, #0x20] };
    asm{ stp        d9, d8, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    r0 = [self navigationController];
    r0 = [r0 retain];
    r19 = r0;
    r0 = [r0 navigationBar];
    r0 = [r0 retain];
    r21 = r0;
    r22 = [[r0 superview] retain];
    r0 = [r20 navigationController];
    *(int32_t *)(r31 + 0x8) = d8;
    r0 = [r0 retain];
    r23 = r0;
    r0 = [r0 navigationBar];
    r29 = 0x70;
    r0 = [r0 retain];
    r24 = r0;
    [r0 frame];
    asm{ movz       x2, #0x0 };
    [r22 convertRect:arg2 toView:r3];
    [r24 release];
    [r23 release];
    [r22 release];
    [r21 release];
    [r19 release];
    r19 = @selector(isiPadUniversal);
    r1 = r19;
    r0 = objc_msgSend(DeviceInfo, r1);
    asm{ fcmp       d13, #0x0 };
    asm{ ccmp       w8, #0x0, #0x4, ne };
    if (CPU_FLAGS & E) {
            r21 = @selector(navigationBarHeight:);
            r1 = r21;
            r0 = objc_msgSend(UiUtil, r1);
            asm{ fcmp       d13, d0 };
            if (CPU_FLAGS & E) {
                    asm{ ldrsw      x8, [x8, #0xd8c] };
                    if (*(int32_t *)(r20 + 0x1039e8000) == 0x1) {
                            r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                            [r0 navigationBarHeight:r2];
                            asm{ fsub       d0, d0, d13 };
                            asm{ fadd       d10, d10, d0 };
                            r0 = *(int32_t *)(0x1039c3000 + 0x3d0);
                            r1 = r21;
                            r0 = objc_msgSend(r0, r1);
                    }
            }
    }
    r0 = CGRectIntersection(r0, r1);
    r0 = CGRectIsNull(r0);
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d415d4;
    goto loc_101d4153c;

loc_101d415d4:

loc_101d415e0:
    0x0 = r29 - 0x70;
    asm{ ldp        x29, x30, [sp, #0x70] };
    asm{ ldp        x20, x19, [sp, #0x60] };
    asm{ ldp        x22, x21, [sp, #0x50] };
    asm{ ldp        x24, x23, [sp, #0x40] };
    asm{ ldp        d9, d8, [sp, #0x30] };
    asm{ ldp        d11, d10, [sp, #0x20] };
    asm{ ldp        d13, d12, [sp, #0x10] };
    asm{ ldp        d15, d14, [sp], #0x80 };
    return r0;

loc_101d4153c:
    r0 = *(int32_t *)(0x1039c3000 + 0x5c8);
    r0 = [r0 isiPadUniversal];
    if (r0 == 0x0) goto loc_101d415b8;
    goto loc_101d4154c;

loc_101d415b8:
    asm{ fadd       d0, d0, d10 };
    asm{ fadd       d10, d12, d13 };
    asm{ fsub       d3, d0, d10 };
    goto loc_101d415e0;

loc_101d4154c:
    r0 = *(int32_t *)(0x1039c3000 + 0x5c8);
    r0 = [r0 isiOS8plus];
    if ((r0 & 0x1 << 0x0) != 0x0) goto loc_101d415b8;
    r0 = [UIApplication sharedApplication];
    r29 = 0x70;
    r0 = [r0 retain];
    r20 = [r0 statusBarOrientation];
    r0 = [r0 release];
    r8 = r20 - 0x1;
    if (r8 > 0x3) goto loc_101d415d4;
    asm{ nop         };
    asm{ ldrsw      x8, [x9, x8, lsl #2] };
    asm{ br         x8 };
    goto loc_101d415b8;
}

- (id)getVisibleRectInScreen:(id)arg2 
{
    asm{ stp        d11, d10, [sp, #0xffffffb0]! };
    asm{ stp        d9, d8, [sp, #0x10] };
    asm{ stp        x22, x21, [sp, #0x20] };
    asm{ stp        x20, x19, [sp, #0x30] };
    asm{ stp        x29, x30, [sp, #0x40] };
    r0 = [arg2 retain];
    r19 = r0;
    r0 = [r0 superview];
    r20 = [r0 retain];
    [r19 frame];
    r22 = [[self view] retain];
    [r20 convertRect:r22 toView:r3];
    [self getInnerVisibleRectInScreen:r22];
    [r22 release];
    [r20 release];
    r0 = [r19 release];
    asm{ ldp        x29, x30, [sp, #0x40] };
    asm{ ldp        x20, x19, [sp, #0x30] };
    asm{ ldp        x22, x21, [sp, #0x20] };
    asm{ ldp        d9, d8, [sp, #0x10] };
    asm{ ldp        d11, d10, [sp], #0x50 };
    return r0;
}

- (void)onFullScreenWindowWillHide
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    r29 = 0x10;
    r19 = self;
    if ([DeviceInfo isiPadUniversal] == 0x0) {
            asm{ ldrsw      x8, [x8, #0xd8c] };
            if (*(int32_t *)(r19 + 0x1039e8000) <= 0x2) {
                    r0 = [r19 view];
                    r29 = 0x10;
                    r20 = [r0 retain];
                    [UiUtil screenSizeOri:0x1];
                    [r20 setHeight:0x1];
                    [r20 release];
                    asm{ ldrsw      x20, [x8, #0xeac] };
                    *(int8_t *)(r19 + r20) = 0x1;
                    [r19 startForcedRotationToPortrait];
                    *(int8_t *)(r19 + r20) = 0x0;
            }
    }
    [r19 updateToolViewOrigin];
    r0 = [UIApplication sharedApplication];
    r0 = [r0 retain];
    r20 = r0;
    r2 = [r0 statusBarOrientation];
    asm{ movi.16b   v0, #0x0 };
    [r19 updateTableLayoutAnimateDuration:r2 Orientation:r3];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 release];
    return;
}

- (void)onIdleTimerUtilVoipQuit
{
    r0 = [self beginLockerTimer];
    return;
}

- (void)setIsPeekPreview:(id)arg2 
{
    asm{ stp        d13, d12, [sp, #0xffffff80]! };
    asm{ stp        d11, d10, [sp, #0x10] };
    asm{ stp        d9, d8, [sp, #0x20] };
    asm{ stp        x26, x25, [sp, #0x30] };
    asm{ stp        x24, x23, [sp, #0x40] };
    asm{ stp        x22, x21, [sp, #0x50] };
    asm{ stp        x20, x19, [sp, #0x60] };
    asm{ stp        x29, x30, [sp, #0x70] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    asm{ ldrsw      x8, [x8, #0xd90] };
    *(int8_t *)(r20 + 0x1039e8000) = arg2;
    if (arg2 != 0x0) {
            asm{ ldrsw      x8, [x8, #0xdd4] };
            r0 = *(int32_t *)(r20 + 0x1039e8000);
            [r0 setHidden:0x1];
            asm{ movz       x2, #0x0 };
            [r20 updateTitleView:0x1];
            r19 = [UIView alloc];
            r0 = [r20 view];
            r0 = [r0 retain];
            r23 = r0;
            [r0 frame];
            asm{ movi.16b   v0, #0x0 };
            asm{ movi.16b   v1, #0x0 };
            r19 = [r19 initWithFrame:0x1];
            [r23 release];
            r23 = [[UIColor colorWithWhite:0x1 alpha:r3] retain];
            [r19 setBackgroundColor:r23];
            [r23 release];
            r0 = [r20 view];
            r0 = [r0 retain];
            r23 = r0;
            [r0 addSubview:r19];
            [r23 release];
            asm{ nop         };
            asm{ ldrsw      x23, [x8, #0x818] };
            r2 = *(int32_t *)(r20 + r23);
            [r19 addSubview:r2];
            r24 = *(int32_t *)(r20 + r23);
            [r19 frame];
            r0 = *(int32_t *)(r20 + r23);
            [r0 frame];
            [r19 frame];
            r0 = *(int32_t *)(r20 + r23);
            [r0 frame];
            r0 = *(int32_t *)(r20 + r23);
            [r0 frame];
            r0 = *(int32_t *)(r20 + r23);
            [r0 frame];
            asm{ fmov       d1, #0x0 };
            asm{ fmul       d0, d8, d1 };
            asm{ fmul       d2, d9, d1 };
            asm{ fsub       d0, d0, d2 };
            asm{ fmul       d2, d10, d1 };
            asm{ fmul       d1, d12, d1 };
            asm{ fsub       d1, d2, d1 };
            [r24 setFrame:r2];
            asm{ ldrsw      x8, [x8, #0xd74] };
            r25 = *(int32_t *)(r20 + 0x1039e8000);
            [r19 frame];
            r0 = [r20 view];
            r0 = [r0 retain];
            r24 = r0;
            [r0 frame];
            r0 = [r20 view];
            r0 = [r0 retain];
            r22 = r0;
            [r0 frame];
            [r19 frame];
            asm{ fsub       d3, d10, d3 };
            asm{ movi.16b   v0, #0x0 };
            [r25 setFrame:r2];
            [r22 release];
            [r24 release];
            0x0 = 0x70 - 0x70;
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        x26, x25, [sp, #0x30] };
            asm{ ldp        d9, d8, [sp, #0x20] };
            asm{ ldp        d11, d10, [sp, #0x10] };
            asm{ ldp        d13, d12, [sp], #0x80 };
            r0 = [r19 release];
    }
    else {
            *(int32_t *)r31 = @"Setting hide chrome = NO";
            asm{ movz       w6, #0x2226 };
            asm{ movz       x3, #0x0 };
            asm{ movz       w4, #0x0 };
            r0 = [iConsole logWithLevel:0x1 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
            0x0 = 0x70 - 0x70;
            asm{ ldp        x29, x30, [sp, #0x70] };
            asm{ ldp        x20, x19, [sp, #0x60] };
            asm{ ldp        x22, x21, [sp, #0x50] };
            asm{ ldp        x24, x23, [sp, #0x40] };
            asm{ ldp        x26, x25, [sp, #0x30] };
            asm{ ldp        d9, d8, [sp, #0x20] };
            asm{ ldp        d11, d10, [sp, #0x10] };
            asm{ ldp        d13, d12, [sp], #0x80 };
            return;
    }
    return;
}

- (id)isPeekPreview
{
    asm{ ldrsw      x8, [x8, #0xd90] };
    r0 = *(int8_t *)(self + 0x1039e8000);
    return r0;
}

- (id)previewActionItems
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    r19 = r0;
    r0 = [r0 previewActionItems];
    r20 = [r0 retain];
    [r19 release];
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r20 autorelease];
    return r0;
}

- (id)previewingContext:(id)arg2 viewControllerForLocation:(id)arg3 
{
    asm{ stp        d9, d8, [sp, #0xffffff90]! };
    asm{ stp        x28, x27, [sp, #0x10] };
    asm{ stp        x26, x25, [sp, #0x20] };
    asm{ stp        x24, x23, [sp, #0x30] };
    asm{ stp        x22, x21, [sp, #0x40] };
    asm{ stp        x20, x19, [sp, #0x50] };
    asm{ stp        x29, x30, [sp, #0x60] };
    0x0 = 0x0 - 0x1f0;
    *(int32_t *)(r31 + 0x58) = self;
    r20 = *(int32_t *)__stack_chk_guard;
    r20 = *(int32_t *)r20;
    asm{ stur       x20, [x29, #0xffffff98] };
    r22 = [arg2 retain];
    *(int32_t *)(r31 + 0x30) = r22;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 indexPathForRowAtPoint:r2];
    r29 = 0x60;
    r0 = [r0 retain];
    r21 = r0;
    r19 = [r0 section];
    asm{ ldrsw      x8, [x8, #0xd70] };
    r0 = *(int32_t *)(*(int32_t *)(r31 + 0x58) + 0x1039e8000);
    r8 = 0x103950000;
    if (r19 >= [r0 count]) goto loc_101d42100;
    goto loc_101d41dd0;

loc_101d42100:
    asm{ movz       x27, #0x0 };

loc_101d42358:
    [r21 release];
    r0 = [r22 release];
    asm{ ldur       x8, [x29, #0xffffff98] };
    if (r20 == r8) {
            0x0 = r29 - 0x60;
            asm{ ldp        x29, x30, [sp, #0x60] };
            asm{ ldp        x20, x19, [sp, #0x50] };
            asm{ ldp        x22, x21, [sp, #0x40] };
            asm{ ldp        x24, x23, [sp, #0x30] };
            asm{ ldp        x26, x25, [sp, #0x20] };
            asm{ ldp        x28, x27, [sp, #0x10] };
            asm{ ldp        d9, d8, [sp], #0x70 };
            r0 = [r27 autorelease];
    }
    else {
            r0 = __stack_chk_fail(r0);
    }
    return r0;

loc_101d41dd0:
    r0 = [r22 sourceView];
    *(int32_t *)(r31 + 0x18) = @selector(sourceView);
    r0 = [r0 retain];
    r20 = r0;
    r8 = 0x103983000;
    r0 = [r0 visibleViewsAtPoint:r2];
    r29 = 0x60;
    r19 = [r0 retain];
    [r20 release];
    asm{ stp        xzr, xzr, [sp, #0xd8] };
    asm{ stp        xzr, xzr, [sp, #0xc8] };
    asm{ stp        xzr, xzr, [sp, #0xb8] };
    asm{ stp        xzr, xzr, [sp, #0xa8] };
    r0 = [r19 retain];
    r27 = r0;
    r24 = 0x103950000;
    *(int32_t *)(r31 + 0x28) = @selector(countByEnumeratingWithState:objects:count:);
    r23 = [r0 countByEnumeratingWithState:0xa8 objects:r29 - 0xe8 count:STK-1];
    *(int32_t *)(r31 + 0x20) = r21;
    if (r23 == 0x0) goto loc_101d4200c;
    goto loc_101d41e60;

loc_101d4200c:
    *(int32_t *)(r31 + 0x10) = r27;
    [r27 release];
    asm{ stp        xzr, xzr, [sp, #0x98] };
    asm{ stp        xzr, xzr, [sp, #0x88] };
    asm{ stp        xzr, xzr, [sp, #0x78] };
    asm{ stp        xzr, xzr, [sp, #0x68] };
    r0 = [r27 retain];
    r22 = r0;
    r20 = objc_msgSend(r0, *(int32_t *)(r31 + 0x28));
    if (r20 == 0x0) goto loc_101d421c4;
    goto loc_101d42050;

loc_101d421c4:
    [r22 release];
    asm{ movz       x27, #0x0 };
    r22 = *(int32_t *)(r31 + 0x30);
    r28 = *(int32_t *)(r31 + 0x10);

loc_101d42340:
    [r28 release];
    r21 = *(int32_t *)(r31 + 0x20);
    r20 = *(int32_t *)__stack_chk_guard;
    r20 = *(int32_t *)r20;
    goto loc_101d42358;

loc_101d42050:
    r26 = **(int32_t *)(r31 + 0x78);
    *(int32_t *)(r31 + 0x60) = *(int32_t *)(r24 + 0xa18);
    r8 = 0x103984000;
    r9 = 0x103950000;

loc_101d42070:
    asm{ movz       x27, #0x0 };
    r23 = *(int32_t *)(0x10395b000 + 0x780);
    r21 = *(int32_t *)(r8 + 0x60);
    r24 = *(int32_t *)(r9 + 0x5d8);

loc_101d42080:
    if (**(int32_t *)(r31 + 0x78) != r26) {
            objc_enumerationMutation(r22);
    }
    r8 = *(int32_t *)(r31 + 0x70);
    r25 = *(int32_t *)(r8 + r27 * 0x8);
    if ((objc_msgSend(r25, r23) != 0x0) && (objc_msgSend(r25, r24) != 0x0)) goto loc_101d42178;
    goto loc_101d420c8;

loc_101d42178:
    r20 = [r25 retain];
    r0 = *(int32_t *)(r31 + 0x30);
    r0 = objc_msgSend(r0, *(int32_t *)(r31 + 0x18));
    r29 = r29;
    r23 = [r0 retain];
    objc_msgSend(r20, r21);
    [r23 release];
    [r20 release];
    goto loc_101d421c4;

loc_101d420c8:
    r27 = r27 + 0x1;
    if (r27 < r20) goto loc_101d42080;
    r20 = objc_msgSend(r22, *(int32_t *)(r31 + 0x60));
    r8 = 0x103984000;
    r9 = 0x103950000;
    if (r20 != 0x0) goto loc_101d42070;
    goto loc_101d421c4;

loc_101d41e60:
    r19 = **(int32_t *)(r31 + 0xb8);
    *(int32_t *)(r31 + 0x28) = *(int32_t *)(0x103950000 + 0xa18);

loc_101d41e74:
    asm{ movz       x25, #0x0 };
    r26 = @selector(conformsToProtocol:);
    r20 = @selector(canPeek);
    r28 = @selector(respondsToSelector:);
    *(int32_t *)(r31 + 0x38) = r28;
    *(int32_t *)(r31 + 0x60) = @selector(sourceView);
    *(int32_t *)(r31 + 0x50) = @selector(previewingSourceRectForLocation:inCoordinateView:);
    *(int32_t *)(r31 + 0x48) = @selector(setSourceRect:);
    *(int32_t *)(r31 + 0x40) = @selector(viewControllerToPreviewWithFromController:forLocation:inCoordinateView:);

loc_101d41ec4:
    if (**(int32_t *)(r31 + 0xb8) != r19) {
            objc_enumerationMutation(r27);
    }
    r8 = *(int32_t *)(r31 + 0xb0);
    r24 = *(int32_t *)(r8 + r25 * 0x8);
    if (([r24 conformsToProtocol:r2] != 0x0) && ([r24 respondsToSelector:r2] != 0x0)) goto loc_101d41f0c;
    goto loc_101d41fd8;

loc_101d41f0c:
    r0 = [r24 retain];
    r24 = r0;
    if ([r0 canPeek] == 0x0) goto loc_101d41fd0;
    goto loc_101d41f24;

loc_101d41fd0:
    [r24 release];

loc_101d41fd8:
    r25 = r25 + 0x1;
    if (r25 < r23) goto loc_101d41ec4;
    r23 = objc_msgSend(r27, *(int32_t *)(r31 + 0x28));
    if (r23 != 0x0) goto loc_101d41e74;
    *(int32_t *)(r31 + 0x30) = r22;
    r24 = 0x103950000;
    goto loc_101d4200c;

loc_101d41f24:
    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x60));
    r28 = r27;
    r27 = [r0 retain];
    r1 = *(int32_t *)(r31 + 0x50);
    objc_msgSend(r24, r1);
    objc_msgSend(r22, *(int32_t *)(r31 + 0x48));
    [r27 release];
    r0 = objc_msgSend(r22, *(int32_t *)(r31 + 0x60));
    r28 = r28;
    r22 = [r0 retain];
    r1 = *(int32_t *)(r31 + 0x40);
    r3 = r22;
    r0 = objc_msgSend(r24, r1);
    r29 = r29;
    r27 = [r0 retain];
    [r22 release];
    if (r27 != 0x0) goto loc_101d42108;
    goto loc_101d41fc0;

loc_101d42108:
    r20 = @selector(class);
    [MMWebViewController class];
    r19 = @selector(isKindOfClass:);
    if ([r27 isKindOfClass:r2] != 0x0) {
            r2 = NSClassFromString(@"AppUrlMessageCellView");
            r0 = [r24 isKindOfClass:r2];
            if (r0 != 0x0) {
                    asm{ movz       w0, #0x3312 };
                    asm{ movz       w2, #0x0 };
                    asm{ movz       w3, #0x0 };
                    loc_1028e2f90(r0, @"1,1", r2, r3, STK0, STK-1);
            }
            else {
                    r2 = NSClassFromString(@"TextMessageCellView");
                    r0 = [r24 isKindOfClass:r2];
                    if (r0 != 0x0) {
                            asm{ movz       w0, #0x3312 };
                            asm{ movz       w2, #0x0 };
                            asm{ movz       w3, #0x0 };
                            loc_1028e2f90(r0, @"2,1", r2, r3, STK0, STK-1);
                    }
            }
    }
    else {
            [PeekImageViewController class];
            if ([r27 isKindOfClass:r2] != 0x0) {
                    r2 = NSClassFromString(@"ImageMessageCellView");
                    r0 = [r24 isKindOfClass:r2];
                    if (r0 != 0x0) {
                            asm{ movz       w0, #0x3312 };
                            asm{ movz       w2, #0x0 };
                            asm{ movz       w3, #0x0 };
                            loc_1028e2f90(r0, @"3,1", r2, r3, STK0, STK-1);
                    }
            }
    }
    if ([r27 conformsToProtocol:r2] != 0x0) {
            r0 = [r27 retain];
            r20 = r0;
            r19 = @selector(setPreviewSourceView:);
            if (objc_msgSend(r0, *(int32_t *)(r31 + 0x38), r19) != 0x0) {
                    [r20 setPreviewSourceView:r2];
            }
            r19 = @selector(setPreviewFromController:);
            if (objc_msgSend(r20, *(int32_t *)(r31 + 0x38), r19) != 0x0) {
                    [r20 setPreviewFromController:r2];
            }
            [r20 release];
    }
    asm{ ldrsw      x19, [x8, #0xdd4] };
    r0 = *(int32_t *)objc_ivar_offset_FTSVoiceSearchBarController__grayBlurView;
    r8 = 0x10395c000;
    if ([r0 isFirstResponder] != 0x0) {
            r0 = *(int32_t *)(*(int32_t *)(r31 + 0x58) + r19);
            r8 = 0x103955000;
            [r0 hideToolView:0x1];
    }
    [r24 release];
    [r28 release];
    r22 = *(int32_t *)(r31 + 0x30);
    goto loc_101d42340;

loc_101d41fc0:
    [r27 release];
    r27 = r28;
    asm{ ldp        x22, x28, [sp, #0x30] };
    goto loc_101d41fd0;
}

- (void)previewingContext:(id)arg2 commitViewController:(id)arg3 
{
    r3 = arg3;
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    r0 = [r3 retain];
    r19 = r0;
    if ([r0 conformsToProtocol:@protocol(WCForceTouchPopProtocol)] != 0x0) {
            r0 = [r19 retain];
            r20 = r0;
            if ([r0 canPop] != 0x0) {
                    r21 = @selector(commitViewController);
                    r22 = @selector(respondsToSelector:);
                    if ([r20 respondsToSelector:r2] != 0x0) {
                            [r20 commitViewController];
                            r24 = @selector(class);
                            [MMWebViewController class];
                            r21 = @selector(isKindOfClass:);
                            if ([r20 isKindOfClass:r2] != 0x0) {
                                    r23 = @selector(previewSourceView);
                                    if ([r20 respondsToSelector:r2] != 0x0) {
                                            r0 = [r20 previewSourceView];
                                            r29 = 0x30;
                                            r22 = [r0 retain];
                                            r2 = NSClassFromString(@"AppUrlMessageCellView");
                                            r24 = [r22 isKindOfClass:r2];
                                            r0 = [r22 release];
                                            if (r24 != 0x0) {
                                                    asm{ movz       w0, #0x3312 };
                                                    asm{ movz       w2, #0x0 };
                                                    asm{ movz       w3, #0x0 };
                                                    loc_1028e2f90(r0, @"1,2", r2, r3, STK0, STK-1);
                                            }
                                            else {
                                                    r0 = [r20 previewSourceView];
                                                    r22 = [r0 retain];
                                                    r2 = NSClassFromString(@"TextMessageCellView");
                                                    r21 = [r22 isKindOfClass:r2];
                                                    r0 = [r22 release];
                                                    if (r21 != 0x0) {
                                                            asm{ movz       w0, #0x3312 };
                                                            asm{ movz       w2, #0x0 };
                                                            asm{ movz       w3, #0x0 };
                                                            loc_1028e2f90(r0, @"2,2", r2, r3, STK0, STK-1);
                                                    }
                                            }
                                    }
                                    else {
                                            [PeekImageViewController class];
                                            if ([r20 isKindOfClass:r2] != 0x0) {
                                                    r23 = @selector(previewSourceView);
                                                    if ([r20 respondsToSelector:r2] != 0x0) {
                                                            r0 = [r20 previewSourceView];
                                                            r22 = [r0 retain];
                                                            r2 = NSClassFromString(@"ImageMessageCellView");
                                                            r21 = [r22 isKindOfClass:r2];
                                                            r0 = [r22 release];
                                                            if (r21 != 0x0) {
                                                                    asm{ movz       w0, #0x3312 };
                                                                    asm{ movz       w2, #0x0 };
                                                                    asm{ movz       w3, #0x0 };
                                                                    loc_1028e2f90(r0, @"3,2", r2, r3, STK0, STK-1);
                                                            }
                                                    }
                                            }
                                    }
                            }
                            else {
                                    [PeekImageViewController class];
                                    if ([r20 isKindOfClass:r2] != 0x0) {
                                            r23 = @selector(previewSourceView);
                                            if ([r20 respondsToSelector:r2] != 0x0) {
                                                    r0 = [r20 previewSourceView];
                                                    r22 = [r0 retain];
                                                    r2 = NSClassFromString(@"ImageMessageCellView");
                                                    r21 = [r22 isKindOfClass:r2];
                                                    r0 = [r22 release];
                                                    if (r21 != 0x0) {
                                                            asm{ movz       w0, #0x3312 };
                                                            asm{ movz       w2, #0x0 };
                                                            asm{ movz       w3, #0x0 };
                                                            loc_1028e2f90(r0, @"3,2", r2, r3, STK0, STK-1);
                                                    }
                                            }
                                    }
                            }
                    }
            }
            [r20 release];
    }
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    r0 = [r19 release];
    return;
}

- (void)traitCollectionDidChange:(id)arg2 
{
    asm{ stp        x24, x23, [sp, #0xffffffc0]! };
    asm{ stp        x22, x21, [sp, #0x10] };
    asm{ stp        x20, x19, [sp, #0x20] };
    asm{ stp        x29, x30, [sp, #0x30] };
    0x0 = 0x0 - 0x10;
    r20 = self;
    r19 = [arg2 retain];
    *(int32_t *)r31 = r20;
    *(int32_t *)(r31 + 0x8) = *(int32_t *)0x1039d3c98;
    [[0x0 super] traitCollectionDidChange:r19];
    r21 = @selector(traitCollection);
    r0 = [r20 traitCollection];
    r29 = 0x30;
    r0 = [r0 retain];
    r22 = @selector(forceTouchCapability);
    r24 = [r0 respondsToSelector:r22];
    [r0 release];
    if (r24 == 0x0) goto loc_101d42860;
    goto loc_101d427c4;

loc_101d42860:
    r0 = [r19 release];
    0x0 = r29 - 0x30;
    asm{ ldp        x29, x30, [sp, #0x30] };
    asm{ ldp        x20, x19, [sp, #0x20] };
    asm{ ldp        x22, x21, [sp, #0x10] };
    asm{ ldp        x24, x23, [sp], #0x40 };
    return;

loc_101d427c4:
    r0 = [r20 traitCollection];
    r29 = 0x30;
    r0 = [r0 retain];
    r21 = r0;
    r22 = [r0 forceTouchCapability];
    [r21 release];
    asm{ ldrsw      x21, [x8, #0xe74] };
    r2 = *(int32_t *)(r20 + r21);
    if (r22 != 0x2) goto loc_101d42840;
    goto loc_101d42804;

loc_101d42840:
    if (r2 == 0x0) goto loc_101d42860;
    [r20 unregisterForPreviewingWithContext:r2];
    r0 = *(int32_t *)(r20 + r21);
    *(int32_t *)(r20 + r21) = 0x0;

loc_101d4285c:
    [r0 release];
    goto loc_101d42860;

loc_101d42804:
    if (r2 != 0x0) goto loc_101d42860;
    asm{ ldrsw      x8, [x8, #0xd74] };
    r3 = *(int32_t *)(r20 + 0x1039e8000);
    r0 = [r20 registerForPreviewingWithDelegate:r20 sourceView:r3];
    r29 = r29;
    r0 = [r0 retain];
    r8 = *(int32_t *)(r20 + r21);
    *(int32_t *)(r20 + r21) = r0;
    r0 = r8;
    goto loc_101d4285c;
}

- (void)showAttachmentView
{
    asm{ movz       x2, #0x0 };
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    r0 = [r0 onAttachmentModeChangeButtonClicked:r2];
    return;
}

- (void)showSightDraftBoxView
{
    asm{ stp        x22, x21, [sp, #0xffffffd0]! };
    asm{ stp        x20, x19, [sp, #0x10] };
    asm{ stp        x29, x30, [sp, #0x20] };
    *(int32_t *)(r31 + 0xfffffffffffffff0) = @"showSightDraftBoxView";
    asm{ movz       w6, #0x22a8 };
    asm{ movz       x3, #0x0 };
    asm{ movz       w4, #0x0 };
    [iConsole logWithLevel:0x2 module:r3 errorCode:STK3 file:STK2 line:STK1 func:STK0 format:STK-1];
    r20 = [[MMServiceCenter defaultCenter] retain];
    r2 = [SightFacade class];
    r0 = [r20 getService:r2];
    r0 = [r0 retain];
    r21 = r0;
    asm{ movz       x2, #0x0 };
    [r0 showSightWindowForMomentWithMask:r2 byViewController:self scene:STK-1];
    [r21 release];
    0x0 = 0x20 - 0x20;
    asm{ ldp        x29, x30, [sp, #0x20] };
    asm{ ldp        x20, x19, [sp, #0x10] };
    asm{ ldp        x22, x21, [sp], #0x30 };
    r0 = [r20 release];
    return;
}

- (id)m_delegate
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ ldrsw      x8, [x8, #0xd6c] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    asm{ ldp        x29, x30, [sp], #0x10 };
    r0 = [r0 autorelease];
    return r0;
}

- (id)m_backgroundThreadDelegate
{
    asm{ stp        x29, x30, [sp, #0xfffffff0]! };
    asm{ ldrsw      x8, [x8, #0xda0] };
    r0 = objc_loadWeakRetained(self + 0x1039e8000);
    asm{ ldp        x29, x30, [sp], #0x10 };
    r0 = [r0 autorelease];
    return r0;
}

- (void)setM_backgroundThreadDelegate:(id)arg2 
{
    asm{ ldrsw      x8, [x8, #0xda0] };
    r0 = objc_storeWeak(self + 0x1039e8000, arg2);
    return;
}

- (id)toolView
{
    asm{ ldrsw      x8, [x8, #0xdd4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setToolView:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xdd4] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)m_LockerTimer
{
    asm{ ldrsw      x8, [x8, #0xe80] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setM_LockerTimer:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xe80] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)gesture
{
    asm{ ldrsw      x8, [x8, #0xe18] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setGesture:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xe18] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)m_msgReceivingTipsView
{
    asm{ ldrsw      x8, [x8, #0xe48] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setM_msgReceivingTipsView:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xe48] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)m_shareContacts
{
    asm{ ldrsw      x8, [x8, #0xe60] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setM_shareContacts:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xe60] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (id)m_searchScene
{
    asm{ ldrsw      x8, [x8, #0xea4] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setM_searchScene:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xea4] };
    *(int32_t *)(r0 + 0x1039e8000) = arg2;
    return;
}

- (id)m_bIsInMainFrame
{
    asm{ ldrsw      x8, [x8, #0xeb8] };
    r0 = *(int8_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setM_bIsInMainFrame:(id)arg2 
{
    r0 = self;
    asm{ ldrsw      x8, [x8, #0xeb8] };
    *(int8_t *)(r0 + 0x1039e8000) = arg2;
    return;
}

- (id)m_badRoomLogicController
{
    asm{ ldrsw      x8, [x8, #0xebc] };
    r0 = *(int32_t *)(self + 0x1039e8000);
    return r0;
}

- (void)setM_badRoomLogicController:(id)arg2 
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x20, [x8, #0xebc] };
    r0 = [arg2 retain];
    r8 = *(int32_t *)(self + r20);
    *(int32_t *)(self + r20) = r0;
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = [r8 release];
    return;
}

- (void).cxx_destruct
{
    asm{ stp        x20, x19, [sp, #0xffffffe0]! };
    asm{ stp        x29, x30, [sp, #0x10] };
    asm{ ldrsw      x8, [x8, #0xebc] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe60] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe74] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd98] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdac] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd78] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdfc] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdf8] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe3c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdc0] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdbc] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xeb4] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe34] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xde8] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdb4] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdb0] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdb8] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe48] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe20] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe14] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe18] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe50] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xea8] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd9c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe88] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe28] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe2c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe58] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe1c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe0c] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xdd4] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe08] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd88] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xd74] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xe80] };
    asm{ movz       x1, #0x0 };
    objc_storeStrong(self + 0x1039e8000, _cmd);
    asm{ ldrsw      x8, [x8, #0xda0] };
    objc_destroyWeak(self + 0x1039e8000);
    asm{ ldrsw      x8, [x8, #0xd6c] };
    objc_destroyWeak(self + 0x1039e8000);
    asm{ movz       x1, #0x0 };
    asm{ ldrsw      x8, [x8, #0xd70] };
    asm{ ldp        x29, x30, [sp, #0x10] };
    asm{ ldp        x20, x19, [sp], #0x20 };
    r0 = objc_storeStrong(self + 0x1039e8000, _cmd);
    return;
}

@end
